
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004908  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00004908  0000499c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800106  00800106  00004a42  2**0
                  ALLOC
  3 .stab         00003dbc  00000000  00000000  00004a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023c5  00000000  00000000  00008800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000abc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ad05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ae75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cabe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d9a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e758  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000eb45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 77 07 	jmp	0xeee	; 0xeee <__vector_7>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__pack_f+0xba>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 e0       	ldi	r30, 0x08	; 8
     162:	f9 e4       	ldi	r31, 0x49	; 73
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a6 30       	cpi	r26, 0x06	; 6
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a6 e0       	ldi	r26, 0x06	; 6
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ab 30       	cpi	r26, 0x0B	; 11
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 ee 18 	call	0x31dc	; 0x31dc <main>
     184:	0c 94 82 24 	jmp	0x4904	; 0x4904 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a3 ef       	ldi	r26, 0xF3	; 243
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 c7 21 	jmp	0x438e	; 0x438e <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 b7 21 	jmp	0x436e	; 0x436e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 b7 21 	jmp	0x436e	; 0x436e <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	83 ef       	ldi	r24, 0xF3	; 243
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 c7 21 	jmp	0x438e	; 0x438e <__epilogue_restores__>

0000072c <__gtsf2>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 b7 21 	jmp	0x436e	; 0x436e <__prologue_saves__+0x18>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	89 e0       	ldi	r24, 0x09	; 9
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     76c:	89 85       	ldd	r24, Y+9	; 0x09
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	40 f0       	brcs	.+16     	; 0x782 <__gtsf2+0x56>
     772:	89 89       	ldd	r24, Y+17	; 0x11
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	28 f0       	brcs	.+10     	; 0x782 <__gtsf2+0x56>
     778:	c7 01       	movw	r24, r14
     77a:	b8 01       	movw	r22, r16
     77c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     780:	01 c0       	rjmp	.+2      	; 0x784 <__gtsf2+0x58>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	68 96       	adiw	r28, 0x18	; 24
     786:	e6 e0       	ldi	r30, 0x06	; 6
     788:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <__epilogue_restores__+0x18>

0000078c <__gesf2>:
     78c:	a8 e1       	ldi	r26, 0x18	; 24
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	ec ec       	ldi	r30, 0xCC	; 204
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	0c 94 b7 21 	jmp	0x436e	; 0x436e <__prologue_saves__+0x18>
     798:	69 83       	std	Y+1, r22	; 0x01
     79a:	7a 83       	std	Y+2, r23	; 0x02
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	9c 83       	std	Y+4, r25	; 0x04
     7a0:	2d 83       	std	Y+5, r18	; 0x05
     7a2:	3e 83       	std	Y+6, r19	; 0x06
     7a4:	4f 83       	std	Y+7, r20	; 0x07
     7a6:	58 87       	std	Y+8, r21	; 0x08
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	e8 2e       	mov	r14, r24
     7ac:	f1 2c       	mov	r15, r1
     7ae:	ec 0e       	add	r14, r28
     7b0:	fd 1e       	adc	r15, r29
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	b7 01       	movw	r22, r14
     7b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5e       	subi	r16, 0xEF	; 239
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	ce 01       	movw	r24, r28
     7c4:	05 96       	adiw	r24, 0x05	; 5
     7c6:	b8 01       	movw	r22, r16
     7c8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7cc:	89 85       	ldd	r24, Y+9	; 0x09
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__gesf2+0x56>
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__gesf2+0x56>
     7d8:	c7 01       	movw	r24, r14
     7da:	b8 01       	movw	r22, r16
     7dc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__gesf2+0x58>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	68 96       	adiw	r28, 0x18	; 24
     7e6:	e6 e0       	ldi	r30, 0x06	; 6
     7e8:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <__epilogue_restores__+0x18>

000007ec <__ltsf2>:
     7ec:	a8 e1       	ldi	r26, 0x18	; 24
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	ec ef       	ldi	r30, 0xFC	; 252
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	0c 94 b7 21 	jmp	0x436e	; 0x436e <__prologue_saves__+0x18>
     7f8:	69 83       	std	Y+1, r22	; 0x01
     7fa:	7a 83       	std	Y+2, r23	; 0x02
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	2d 83       	std	Y+5, r18	; 0x05
     802:	3e 83       	std	Y+6, r19	; 0x06
     804:	4f 83       	std	Y+7, r20	; 0x07
     806:	58 87       	std	Y+8, r21	; 0x08
     808:	89 e0       	ldi	r24, 0x09	; 9
     80a:	e8 2e       	mov	r14, r24
     80c:	f1 2c       	mov	r15, r1
     80e:	ec 0e       	add	r14, r28
     810:	fd 1e       	adc	r15, r29
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	b7 01       	movw	r22, r14
     818:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5e       	subi	r16, 0xEF	; 239
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	05 96       	adiw	r24, 0x05	; 5
     826:	b8 01       	movw	r22, r16
     828:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	40 f0       	brcs	.+16     	; 0x842 <__ltsf2+0x56>
     832:	89 89       	ldd	r24, Y+17	; 0x11
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	28 f0       	brcs	.+10     	; 0x842 <__ltsf2+0x56>
     838:	c7 01       	movw	r24, r14
     83a:	b8 01       	movw	r22, r16
     83c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     840:	01 c0       	rjmp	.+2      	; 0x844 <__ltsf2+0x58>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	68 96       	adiw	r28, 0x18	; 24
     846:	e6 e0       	ldi	r30, 0x06	; 6
     848:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <__epilogue_restores__+0x18>

0000084c <__fixsfsi>:
     84c:	ac e0       	ldi	r26, 0x0C	; 12
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 bb 21 	jmp	0x4376	; 0x4376 <__prologue_saves__+0x20>
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	be 01       	movw	r22, r28
     866:	6b 5f       	subi	r22, 0xFB	; 251
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	61 f1       	breq	.+88     	; 0x8cc <__stack+0x6d>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	50 f1       	brcs	.+84     	; 0x8cc <__stack+0x6d>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	88 23       	and	r24, r24
     880:	51 f1       	breq	.+84     	; 0x8d6 <__stack+0x77>
     882:	2e c0       	rjmp	.+92     	; 0x8e0 <__stack+0x81>
     884:	2f 81       	ldd	r18, Y+7	; 0x07
     886:	38 85       	ldd	r19, Y+8	; 0x08
     888:	37 fd       	sbrc	r19, 7
     88a:	20 c0       	rjmp	.+64     	; 0x8cc <__stack+0x6d>
     88c:	6e 81       	ldd	r22, Y+6	; 0x06
     88e:	2f 31       	cpi	r18, 0x1F	; 31
     890:	31 05       	cpc	r19, r1
     892:	1c f0       	brlt	.+6      	; 0x89a <__stack+0x3b>
     894:	66 23       	and	r22, r22
     896:	f9 f0       	breq	.+62     	; 0x8d6 <__stack+0x77>
     898:	23 c0       	rjmp	.+70     	; 0x8e0 <__stack+0x81>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	29 85       	ldd	r18, Y+9	; 0x09
     8a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	56 95       	lsr	r21
     8ae:	47 95       	ror	r20
     8b0:	37 95       	ror	r19
     8b2:	27 95       	ror	r18
     8b4:	8a 95       	dec	r24
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	66 23       	and	r22, r22
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <__stack+0x89>
     8bc:	50 95       	com	r21
     8be:	40 95       	com	r20
     8c0:	30 95       	com	r19
     8c2:	21 95       	neg	r18
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	4f 4f       	sbci	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__stack+0x89>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f ef       	ldi	r20, 0xFF	; 255
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e8       	ldi	r21, 0x80	; 128
     8e8:	b9 01       	movw	r22, r18
     8ea:	ca 01       	movw	r24, r20
     8ec:	2c 96       	adiw	r28, 0x0c	; 12
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	0c 94 d7 21 	jmp	0x43ae	; 0x43ae <__epilogue_restores__+0x20>

000008f4 <__pack_f>:
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	fc 01       	movw	r30, r24
     900:	e4 80       	ldd	r14, Z+4	; 0x04
     902:	f5 80       	ldd	r15, Z+5	; 0x05
     904:	06 81       	ldd	r16, Z+6	; 0x06
     906:	17 81       	ldd	r17, Z+7	; 0x07
     908:	d1 80       	ldd	r13, Z+1	; 0x01
     90a:	80 81       	ld	r24, Z
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	48 f4       	brcc	.+18     	; 0x922 <__pack_f+0x2e>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e1       	ldi	r26, 0x10	; 16
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e8 2a       	or	r14, r24
     91a:	f9 2a       	or	r15, r25
     91c:	0a 2b       	or	r16, r26
     91e:	1b 2b       	or	r17, r27
     920:	a5 c0       	rjmp	.+330    	; 0xa6c <__pack_f+0x178>
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	09 f4       	brne	.+2      	; 0x928 <__pack_f+0x34>
     926:	9f c0       	rjmp	.+318    	; 0xa66 <__pack_f+0x172>
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	21 f4       	brne	.+8      	; 0x934 <__pack_f+0x40>
     92c:	ee 24       	eor	r14, r14
     92e:	ff 24       	eor	r15, r15
     930:	87 01       	movw	r16, r14
     932:	05 c0       	rjmp	.+10     	; 0x93e <__pack_f+0x4a>
     934:	e1 14       	cp	r14, r1
     936:	f1 04       	cpc	r15, r1
     938:	01 05       	cpc	r16, r1
     93a:	11 05       	cpc	r17, r1
     93c:	19 f4       	brne	.+6      	; 0x944 <__pack_f+0x50>
     93e:	e0 e0       	ldi	r30, 0x00	; 0
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	96 c0       	rjmp	.+300    	; 0xa70 <__pack_f+0x17c>
     944:	62 81       	ldd	r22, Z+2	; 0x02
     946:	73 81       	ldd	r23, Z+3	; 0x03
     948:	9f ef       	ldi	r25, 0xFF	; 255
     94a:	62 38       	cpi	r22, 0x82	; 130
     94c:	79 07       	cpc	r23, r25
     94e:	0c f0       	brlt	.+2      	; 0x952 <__pack_f+0x5e>
     950:	5b c0       	rjmp	.+182    	; 0xa08 <__pack_f+0x114>
     952:	22 e8       	ldi	r18, 0x82	; 130
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	26 1b       	sub	r18, r22
     958:	37 0b       	sbc	r19, r23
     95a:	2a 31       	cpi	r18, 0x1A	; 26
     95c:	31 05       	cpc	r19, r1
     95e:	2c f0       	brlt	.+10     	; 0x96a <__pack_f+0x76>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	2a c0       	rjmp	.+84     	; 0x9be <__pack_f+0xca>
     96a:	b8 01       	movw	r22, r16
     96c:	a7 01       	movw	r20, r14
     96e:	02 2e       	mov	r0, r18
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0x86>
     972:	76 95       	lsr	r23
     974:	67 95       	ror	r22
     976:	57 95       	ror	r21
     978:	47 95       	ror	r20
     97a:	0a 94       	dec	r0
     97c:	d2 f7       	brpl	.-12     	; 0x972 <__pack_f+0x7e>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	04 c0       	rjmp	.+8      	; 0x990 <__pack_f+0x9c>
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	aa 1f       	adc	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	2a 95       	dec	r18
     992:	d2 f7       	brpl	.-12     	; 0x988 <__pack_f+0x94>
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	a1 09       	sbc	r26, r1
     998:	b1 09       	sbc	r27, r1
     99a:	8e 21       	and	r24, r14
     99c:	9f 21       	and	r25, r15
     99e:	a0 23       	and	r26, r16
     9a0:	b1 23       	and	r27, r17
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <__pack_f+0xbe>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	9a 01       	movw	r18, r20
     9b4:	ab 01       	movw	r20, r22
     9b6:	28 2b       	or	r18, r24
     9b8:	39 2b       	or	r19, r25
     9ba:	4a 2b       	or	r20, r26
     9bc:	5b 2b       	or	r21, r27
     9be:	da 01       	movw	r26, r20
     9c0:	c9 01       	movw	r24, r18
     9c2:	8f 77       	andi	r24, 0x7F	; 127
     9c4:	90 70       	andi	r25, 0x00	; 0
     9c6:	a0 70       	andi	r26, 0x00	; 0
     9c8:	b0 70       	andi	r27, 0x00	; 0
     9ca:	80 34       	cpi	r24, 0x40	; 64
     9cc:	91 05       	cpc	r25, r1
     9ce:	a1 05       	cpc	r26, r1
     9d0:	b1 05       	cpc	r27, r1
     9d2:	39 f4       	brne	.+14     	; 0x9e2 <__pack_f+0xee>
     9d4:	27 ff       	sbrs	r18, 7
     9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__pack_f+0xf6>
     9d8:	20 5c       	subi	r18, 0xC0	; 192
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	4f 4f       	sbci	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__pack_f+0xf6>
     9e2:	21 5c       	subi	r18, 0xC1	; 193
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	4f 4f       	sbci	r20, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	e0 e0       	ldi	r30, 0x00	; 0
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	20 30       	cpi	r18, 0x00	; 0
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	3a 07       	cpc	r19, r26
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	4a 07       	cpc	r20, r26
     9f8:	a0 e4       	ldi	r26, 0x40	; 64
     9fa:	5a 07       	cpc	r21, r26
     9fc:	10 f0       	brcs	.+4      	; 0xa02 <__pack_f+0x10e>
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	79 01       	movw	r14, r18
     a04:	8a 01       	movw	r16, r20
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <__pack_f+0x162>
     a08:	60 38       	cpi	r22, 0x80	; 128
     a0a:	71 05       	cpc	r23, r1
     a0c:	64 f5       	brge	.+88     	; 0xa66 <__pack_f+0x172>
     a0e:	fb 01       	movw	r30, r22
     a10:	e1 58       	subi	r30, 0x81	; 129
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	d8 01       	movw	r26, r16
     a16:	c7 01       	movw	r24, r14
     a18:	8f 77       	andi	r24, 0x7F	; 127
     a1a:	90 70       	andi	r25, 0x00	; 0
     a1c:	a0 70       	andi	r26, 0x00	; 0
     a1e:	b0 70       	andi	r27, 0x00	; 0
     a20:	80 34       	cpi	r24, 0x40	; 64
     a22:	91 05       	cpc	r25, r1
     a24:	a1 05       	cpc	r26, r1
     a26:	b1 05       	cpc	r27, r1
     a28:	39 f4       	brne	.+14     	; 0xa38 <__pack_f+0x144>
     a2a:	e7 fe       	sbrs	r14, 7
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__pack_f+0x154>
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__pack_f+0x14c>
     a38:	8f e3       	ldi	r24, 0x3F	; 63
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e8 0e       	add	r14, r24
     a42:	f9 1e       	adc	r15, r25
     a44:	0a 1f       	adc	r16, r26
     a46:	1b 1f       	adc	r17, r27
     a48:	17 ff       	sbrs	r17, 7
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__pack_f+0x162>
     a4c:	16 95       	lsr	r17
     a4e:	07 95       	ror	r16
     a50:	f7 94       	ror	r15
     a52:	e7 94       	ror	r14
     a54:	31 96       	adiw	r30, 0x01	; 1
     a56:	87 e0       	ldi	r24, 0x07	; 7
     a58:	16 95       	lsr	r17
     a5a:	07 95       	ror	r16
     a5c:	f7 94       	ror	r15
     a5e:	e7 94       	ror	r14
     a60:	8a 95       	dec	r24
     a62:	d1 f7       	brne	.-12     	; 0xa58 <__pack_f+0x164>
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__pack_f+0x17c>
     a66:	ee 24       	eor	r14, r14
     a68:	ff 24       	eor	r15, r15
     a6a:	87 01       	movw	r16, r14
     a6c:	ef ef       	ldi	r30, 0xFF	; 255
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	6e 2f       	mov	r22, r30
     a72:	67 95       	ror	r22
     a74:	66 27       	eor	r22, r22
     a76:	67 95       	ror	r22
     a78:	90 2f       	mov	r25, r16
     a7a:	9f 77       	andi	r25, 0x7F	; 127
     a7c:	d7 94       	ror	r13
     a7e:	dd 24       	eor	r13, r13
     a80:	d7 94       	ror	r13
     a82:	8e 2f       	mov	r24, r30
     a84:	86 95       	lsr	r24
     a86:	49 2f       	mov	r20, r25
     a88:	46 2b       	or	r20, r22
     a8a:	58 2f       	mov	r21, r24
     a8c:	5d 29       	or	r21, r13
     a8e:	b7 01       	movw	r22, r14
     a90:	ca 01       	movw	r24, r20
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	08 95       	ret

00000a9e <__unpack_f>:
     a9e:	fc 01       	movw	r30, r24
     aa0:	db 01       	movw	r26, r22
     aa2:	40 81       	ld	r20, Z
     aa4:	51 81       	ldd	r21, Z+1	; 0x01
     aa6:	22 81       	ldd	r18, Z+2	; 0x02
     aa8:	62 2f       	mov	r22, r18
     aaa:	6f 77       	andi	r22, 0x7F	; 127
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	22 1f       	adc	r18, r18
     ab0:	22 27       	eor	r18, r18
     ab2:	22 1f       	adc	r18, r18
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	89 2f       	mov	r24, r25
     ab8:	88 0f       	add	r24, r24
     aba:	82 2b       	or	r24, r18
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	99 1f       	adc	r25, r25
     ac2:	99 27       	eor	r25, r25
     ac4:	99 1f       	adc	r25, r25
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	9c 93       	st	X, r25
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	21 15       	cp	r18, r1
     ace:	31 05       	cpc	r19, r1
     ad0:	a9 f5       	brne	.+106    	; 0xb3c <__unpack_f+0x9e>
     ad2:	41 15       	cp	r20, r1
     ad4:	51 05       	cpc	r21, r1
     ad6:	61 05       	cpc	r22, r1
     ad8:	71 05       	cpc	r23, r1
     ada:	11 f4       	brne	.+4      	; 0xae0 <__unpack_f+0x42>
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	37 c0       	rjmp	.+110    	; 0xb4e <__unpack_f+0xb0>
     ae0:	82 e8       	ldi	r24, 0x82	; 130
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
     aec:	9a 01       	movw	r18, r20
     aee:	ab 01       	movw	r20, r22
     af0:	67 e0       	ldi	r22, 0x07	; 7
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	44 1f       	adc	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	6a 95       	dec	r22
     afc:	d1 f7       	brne	.-12     	; 0xaf2 <__unpack_f+0x54>
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	8c 93       	st	X, r24
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <__unpack_f+0x80>
     b04:	22 0f       	add	r18, r18
     b06:	33 1f       	adc	r19, r19
     b08:	44 1f       	adc	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	12 96       	adiw	r26, 0x02	; 2
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	13 97       	sbiw	r26, 0x03	; 3
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	13 96       	adiw	r26, 0x03	; 3
     b18:	9c 93       	st	X, r25
     b1a:	8e 93       	st	-X, r24
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	20 30       	cpi	r18, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	38 07       	cpc	r19, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	48 07       	cpc	r20, r24
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	58 07       	cpc	r21, r24
     b2c:	58 f3       	brcs	.-42     	; 0xb04 <__unpack_f+0x66>
     b2e:	14 96       	adiw	r26, 0x04	; 4
     b30:	2d 93       	st	X+, r18
     b32:	3d 93       	st	X+, r19
     b34:	4d 93       	st	X+, r20
     b36:	5c 93       	st	X, r21
     b38:	17 97       	sbiw	r26, 0x07	; 7
     b3a:	08 95       	ret
     b3c:	2f 3f       	cpi	r18, 0xFF	; 255
     b3e:	31 05       	cpc	r19, r1
     b40:	79 f4       	brne	.+30     	; 0xb60 <__unpack_f+0xc2>
     b42:	41 15       	cp	r20, r1
     b44:	51 05       	cpc	r21, r1
     b46:	61 05       	cpc	r22, r1
     b48:	71 05       	cpc	r23, r1
     b4a:	19 f4       	brne	.+6      	; 0xb52 <__unpack_f+0xb4>
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	8c 93       	st	X, r24
     b50:	08 95       	ret
     b52:	64 ff       	sbrs	r22, 4
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <__unpack_f+0xbe>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8c 93       	st	X, r24
     b5a:	12 c0       	rjmp	.+36     	; 0xb80 <__unpack_f+0xe2>
     b5c:	1c 92       	st	X, r1
     b5e:	10 c0       	rjmp	.+32     	; 0xb80 <__unpack_f+0xe2>
     b60:	2f 57       	subi	r18, 0x7F	; 127
     b62:	30 40       	sbci	r19, 0x00	; 0
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	3c 93       	st	X, r19
     b68:	2e 93       	st	-X, r18
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	8c 93       	st	X, r24
     b70:	87 e0       	ldi	r24, 0x07	; 7
     b72:	44 0f       	add	r20, r20
     b74:	55 1f       	adc	r21, r21
     b76:	66 1f       	adc	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	8a 95       	dec	r24
     b7c:	d1 f7       	brne	.-12     	; 0xb72 <__unpack_f+0xd4>
     b7e:	70 64       	ori	r23, 0x40	; 64
     b80:	14 96       	adiw	r26, 0x04	; 4
     b82:	4d 93       	st	X+, r20
     b84:	5d 93       	st	X+, r21
     b86:	6d 93       	st	X+, r22
     b88:	7c 93       	st	X, r23
     b8a:	17 97       	sbiw	r26, 0x07	; 7
     b8c:	08 95       	ret

00000b8e <__fpcmp_parts_f>:
     b8e:	1f 93       	push	r17
     b90:	dc 01       	movw	r26, r24
     b92:	fb 01       	movw	r30, r22
     b94:	9c 91       	ld	r25, X
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	08 f4       	brcc	.+2      	; 0xb9c <__fpcmp_parts_f+0xe>
     b9a:	47 c0       	rjmp	.+142    	; 0xc2a <__fpcmp_parts_f+0x9c>
     b9c:	80 81       	ld	r24, Z
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <__fpcmp_parts_f+0x16>
     ba2:	43 c0       	rjmp	.+134    	; 0xc2a <__fpcmp_parts_f+0x9c>
     ba4:	94 30       	cpi	r25, 0x04	; 4
     ba6:	51 f4       	brne	.+20     	; 0xbbc <__fpcmp_parts_f+0x2e>
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	1c 91       	ld	r17, X
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	99 f5       	brne	.+102    	; 0xc16 <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	68 2f       	mov	r22, r24
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	61 1b       	sub	r22, r17
     bb8:	71 09       	sbc	r23, r1
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <__fpcmp_parts_f+0xac>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <__fpcmp_parts_f+0x3a>
     bc0:	92 30       	cpi	r25, 0x02	; 2
     bc2:	31 f4       	brne	.+12     	; 0xbd0 <__fpcmp_parts_f+0x42>
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	b9 f1       	breq	.+110    	; 0xc36 <__fpcmp_parts_f+0xa8>
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	88 23       	and	r24, r24
     bcc:	89 f1       	breq	.+98     	; 0xc30 <__fpcmp_parts_f+0xa2>
     bce:	2d c0       	rjmp	.+90     	; 0xc2a <__fpcmp_parts_f+0x9c>
     bd0:	11 96       	adiw	r26, 0x01	; 1
     bd2:	1c 91       	ld	r17, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	f1 f0       	breq	.+60     	; 0xc16 <__fpcmp_parts_f+0x88>
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	18 17       	cp	r17, r24
     bde:	d9 f4       	brne	.+54     	; 0xc16 <__fpcmp_parts_f+0x88>
     be0:	12 96       	adiw	r26, 0x02	; 2
     be2:	2d 91       	ld	r18, X+
     be4:	3c 91       	ld	r19, X
     be6:	13 97       	sbiw	r26, 0x03	; 3
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
     bf0:	94 f0       	brlt	.+36     	; 0xc16 <__fpcmp_parts_f+0x88>
     bf2:	28 17       	cp	r18, r24
     bf4:	39 07       	cpc	r19, r25
     bf6:	bc f0       	brlt	.+46     	; 0xc26 <__fpcmp_parts_f+0x98>
     bf8:	14 96       	adiw	r26, 0x04	; 4
     bfa:	8d 91       	ld	r24, X+
     bfc:	9d 91       	ld	r25, X+
     bfe:	0d 90       	ld	r0, X+
     c00:	bc 91       	ld	r27, X
     c02:	a0 2d       	mov	r26, r0
     c04:	24 81       	ldd	r18, Z+4	; 0x04
     c06:	35 81       	ldd	r19, Z+5	; 0x05
     c08:	46 81       	ldd	r20, Z+6	; 0x06
     c0a:	57 81       	ldd	r21, Z+7	; 0x07
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	4a 07       	cpc	r20, r26
     c12:	5b 07       	cpc	r21, r27
     c14:	18 f4       	brcc	.+6      	; 0xc1c <__fpcmp_parts_f+0x8e>
     c16:	11 23       	and	r17, r17
     c18:	41 f0       	breq	.+16     	; 0xc2a <__fpcmp_parts_f+0x9c>
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <__fpcmp_parts_f+0xa2>
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	a4 07       	cpc	r26, r20
     c22:	b5 07       	cpc	r27, r21
     c24:	40 f4       	brcc	.+16     	; 0xc36 <__fpcmp_parts_f+0xa8>
     c26:	11 23       	and	r17, r17
     c28:	19 f0       	breq	.+6      	; 0xc30 <__fpcmp_parts_f+0xa2>
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__fpcmp_parts_f+0xac>
     c30:	6f ef       	ldi	r22, 0xFF	; 255
     c32:	7f ef       	ldi	r23, 0xFF	; 255
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <__fpcmp_parts_f+0xac>
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	cb 01       	movw	r24, r22
     c3c:	1f 91       	pop	r17
     c3e:	08 95       	ret

00000c40 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <UART_init+0x6>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <UART_init+0x8>
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     c50:	1a 82       	std	Y+2, r1	; 0x02
     c52:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA.Bits.U2X = 1;
     c54:	eb e2       	ldi	r30, 0x2B	; 43
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	82 60       	ori	r24, 0x02	; 2
     c5c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB.Bits.RXEN = 1;
     c5e:	ea e2       	ldi	r30, 0x2A	; 42
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	80 61       	ori	r24, 0x10	; 16
     c66:	80 83       	st	Z, r24
	UCSRB.Bits.TXEN = 1;
     c68:	ea e2       	ldi	r30, 0x2A	; 42
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	88 60       	ori	r24, 0x08	; 8
     c70:	80 83       	st	Z, r24
	UCSRB.Bits.UCSZ2 = (((Config_Ptr->bit_data) & 0x04) >> 2);
     c72:	aa e2       	ldi	r26, 0x2A	; 42
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	eb 81       	ldd	r30, Y+3	; 0x03
     c78:	fc 81       	ldd	r31, Y+4	; 0x04
     c7a:	80 81       	ld	r24, Z
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	84 70       	andi	r24, 0x04	; 4
     c82:	90 70       	andi	r25, 0x00	; 0
     c84:	95 95       	asr	r25
     c86:	87 95       	ror	r24
     c88:	95 95       	asr	r25
     c8a:	87 95       	ror	r24
     c8c:	81 70       	andi	r24, 0x01	; 1
     c8e:	81 70       	andi	r24, 0x01	; 1
     c90:	98 2f       	mov	r25, r24
     c92:	99 0f       	add	r25, r25
     c94:	99 0f       	add	r25, r25
     c96:	8c 91       	ld	r24, X
     c98:	8b 7f       	andi	r24, 0xFB	; 251
     c9a:	89 2b       	or	r24, r25
     c9c:	8c 93       	st	X, r24
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 * 011
	 *
	 ***********************************************************************/
	UCSRC.Bits.URSEL = 1;
     c9e:	e0 e4       	ldi	r30, 0x40	; 64
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	80 68       	ori	r24, 0x80	; 128
     ca6:	80 83       	st	Z, r24
	UCSRC.Bits.UCSZ01 = ((Config_Ptr->bit_data) & (0x03));
     ca8:	a0 e4       	ldi	r26, 0x40	; 64
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	eb 81       	ldd	r30, Y+3	; 0x03
     cae:	fc 81       	ldd	r31, Y+4	; 0x04
     cb0:	80 81       	ld	r24, Z
     cb2:	83 70       	andi	r24, 0x03	; 3
     cb4:	83 70       	andi	r24, 0x03	; 3
     cb6:	83 70       	andi	r24, 0x03	; 3
     cb8:	83 70       	andi	r24, 0x03	; 3
     cba:	98 2f       	mov	r25, r24
     cbc:	99 0f       	add	r25, r25
     cbe:	8c 91       	ld	r24, X
     cc0:	89 7f       	andi	r24, 0xF9	; 249
     cc2:	89 2b       	or	r24, r25
     cc4:	8c 93       	st	X, r24
	UCSRC.Bits.USBS = Config_Ptr->stop_bit;
     cc6:	a0 e4       	ldi	r26, 0x40	; 64
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	fc 81       	ldd	r31, Y+4	; 0x04
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	81 70       	andi	r24, 0x01	; 1
     cd2:	81 70       	andi	r24, 0x01	; 1
     cd4:	98 2f       	mov	r25, r24
     cd6:	99 0f       	add	r25, r25
     cd8:	99 0f       	add	r25, r25
     cda:	99 0f       	add	r25, r25
     cdc:	8c 91       	ld	r24, X
     cde:	87 7f       	andi	r24, 0xF7	; 247
     ce0:	89 2b       	or	r24, r25
     ce2:	8c 93       	st	X, r24
	UCSRC.Bits.UPM01 = Config_Ptr->parity;
     ce4:	a0 e4       	ldi	r26, 0x40	; 64
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	eb 81       	ldd	r30, Y+3	; 0x03
     cea:	fc 81       	ldd	r31, Y+4	; 0x04
     cec:	81 81       	ldd	r24, Z+1	; 0x01
     cee:	83 70       	andi	r24, 0x03	; 3
     cf0:	83 70       	andi	r24, 0x03	; 3
     cf2:	98 2f       	mov	r25, r24
     cf4:	92 95       	swap	r25
     cf6:	90 7f       	andi	r25, 0xF0	; 240
     cf8:	8c 91       	ld	r24, X
     cfa:	8f 7c       	andi	r24, 0xCF	; 207
     cfc:	89 2b       	or	r24, r25
     cfe:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
     d00:	eb 81       	ldd	r30, Y+3	; 0x03
     d02:	fc 81       	ldd	r31, Y+4	; 0x04
     d04:	83 81       	ldd	r24, Z+3	; 0x03
     d06:	94 81       	ldd	r25, Z+4	; 0x04
     d08:	cc 01       	movw	r24, r24
     d0a:	a0 e0       	ldi	r26, 0x00	; 0
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	aa 1f       	adc	r26, r26
     d14:	bb 1f       	adc	r27, r27
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	aa 1f       	adc	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	aa 1f       	adc	r26, r26
     d24:	bb 1f       	adc	r27, r27
     d26:	9c 01       	movw	r18, r24
     d28:	ad 01       	movw	r20, r26
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	92 e1       	ldi	r25, 0x12	; 18
     d2e:	aa e7       	ldi	r26, 0x7A	; 122
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	0e 94 89 21 	call	0x4312	; 0x4312 <__udivmodsi4>
     d3a:	da 01       	movw	r26, r20
     d3c:	c9 01       	movw	r24, r18
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
     d44:	e0 e4       	ldi	r30, 0x40	; 64
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	89 2f       	mov	r24, r25
     d4e:	99 27       	eor	r25, r25
     d50:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     d52:	e9 e2       	ldi	r30, 0x29	; 41
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	80 83       	st	Z, r24
}
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	0f 92       	push	r0
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (UCSRA.Bits.UDRE == 0) {
     d74:	eb e2       	ldi	r30, 0x2B	; 43
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	80 72       	andi	r24, 0x20	; 32
     d7c:	88 23       	and	r24, r24
     d7e:	d1 f3       	breq	.-12     	; 0xd74 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     d80:	ec e2       	ldi	r30, 0x2C	; 44
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (UCSRA.Bits.RXC == 0) {
     d98:	eb e2       	ldi	r30, 0x2B	; 43
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	80 78       	andi	r24, 0x80	; 128
     da0:	88 23       	and	r24, r24
     da2:	d1 f3       	breq	.-12     	; 0xd98 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
     da4:	ec e2       	ldi	r30, 0x2C	; 44
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
}
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <UART_sendString+0x6>
     db6:	0f 92       	push	r0
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	9b 83       	std	Y+3, r25	; 0x03
     dbe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     dc0:	19 82       	std	Y+1, r1	; 0x01
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	9b 81       	ldd	r25, Y+3	; 0x03
     dce:	fc 01       	movw	r30, r24
     dd0:	e2 0f       	add	r30, r18
     dd2:	f3 1f       	adc	r31, r19
     dd4:	80 81       	ld	r24, Z
     dd6:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
		i++;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	9b 81       	ldd	r25, Y+3	; 0x03
     dea:	fc 01       	movw	r30, r24
     dec:	e2 0f       	add	r30, r18
     dee:	f3 1f       	adc	r31, r19
     df0:	80 81       	ld	r24, Z
     df2:	88 23       	and	r24, r24
     df4:	39 f7       	brne	.-50     	; 0xdc4 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <UART_receiveString+0xa>
     e0c:	0f 92       	push	r0
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	9b 83       	std	Y+3, r25	; 0x03
     e14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e16:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	9b 81       	ldd	r25, Y+3	; 0x03
     e22:	8c 01       	movw	r16, r24
     e24:	02 0f       	add	r16, r18
     e26:	13 1f       	adc	r17, r19
     e28:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
     e2c:	f8 01       	movw	r30, r16
     e2e:	80 83       	st	Z, r24
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	9b 81       	ldd	r25, Y+3	; 0x03
     e42:	8c 01       	movw	r16, r24
     e44:	02 0f       	add	r16, r18
     e46:	13 1f       	adc	r17, r19
     e48:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
     e4c:	f8 01       	movw	r30, r16
     e4e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	fc 01       	movw	r30, r24
     e5c:	e2 0f       	add	r30, r18
     e5e:	f3 1f       	adc	r31, r19
     e60:	80 81       	ld	r24, Z
     e62:	83 32       	cpi	r24, 0x23	; 35
     e64:	31 f7       	brne	.-52     	; 0xe32 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	9b 81       	ldd	r25, Y+3	; 0x03
     e70:	fc 01       	movw	r30, r24
     e72:	e2 0f       	add	r30, r18
     e74:	f3 1f       	adc	r31, r19
     e76:	10 82       	st	Z, r1
}
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <__vector_9>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/* Normal mode ISR */
ISR(TIMER1_OVF_vect) {
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
     eb2:	80 91 06 01 	lds	r24, 0x0106
     eb6:	90 91 07 01 	lds	r25, 0x0107
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	29 f0       	breq	.+10     	; 0xec8 <__vector_9+0x40>
		(*g_callBackPtr)();
     ebe:	e0 91 06 01 	lds	r30, 0x0106
     ec2:	f0 91 07 01 	lds	r31, 0x0107
     ec6:	09 95       	icall
	}
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <__vector_7>:

/* Compare mode ISR */
ISR(TIMER1_COMPA_vect) {
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
     f18:	80 91 06 01 	lds	r24, 0x0106
     f1c:	90 91 07 01 	lds	r25, 0x0107
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	29 f0       	breq	.+10     	; 0xf2e <__vector_7+0x40>
		(*g_callBackPtr)();
     f24:	e0 91 06 01 	lds	r30, 0x0106
     f28:	f0 91 07 01 	lds	r31, 0x0107
     f2c:	09 95       	icall
	}
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/* Description
 Function to initialize the Timer driver */
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	00 d0       	rcall	.+0      	; 0xf5a <Timer1_init+0x6>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <Timer1_init+0x8>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_REG = (Config_Ptr->initial_value);
     f64:	ac e4       	ldi	r26, 0x4C	; 76
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e9 81       	ldd	r30, Y+1	; 0x01
     f6a:	fa 81       	ldd	r31, Y+2	; 0x02
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	9c 93       	st	X, r25
     f74:	8e 93       	st	-X, r24
	switch ((Config_Ptr->mode)) {
     f76:	e9 81       	ldd	r30, Y+1	; 0x01
     f78:	fa 81       	ldd	r31, Y+2	; 0x02
     f7a:	85 81       	ldd	r24, Z+5	; 0x05
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3c 83       	std	Y+4, r19	; 0x04
     f82:	2b 83       	std	Y+3, r18	; 0x03
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	87 30       	cpi	r24, 0x07	; 7
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <Timer1_init+0x3c>
     f8e:	bb c0       	rjmp	.+374    	; 0x1106 <Timer1_init+0x1b2>
     f90:	2b 81       	ldd	r18, Y+3	; 0x03
     f92:	3c 81       	ldd	r19, Y+4	; 0x04
     f94:	28 30       	cpi	r18, 0x08	; 8
     f96:	31 05       	cpc	r19, r1
     f98:	54 f5       	brge	.+84     	; 0xfee <Timer1_init+0x9a>
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	83 30       	cpi	r24, 0x03	; 3
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <Timer1_init+0x52>
     fa4:	71 c0       	rjmp	.+226    	; 0x1088 <Timer1_init+0x134>
     fa6:	2b 81       	ldd	r18, Y+3	; 0x03
     fa8:	3c 81       	ldd	r19, Y+4	; 0x04
     faa:	24 30       	cpi	r18, 0x04	; 4
     fac:	31 05       	cpc	r19, r1
     fae:	94 f4       	brge	.+36     	; 0xfd4 <Timer1_init+0x80>
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	91 05       	cpc	r25, r1
     fb8:	09 f4       	brne	.+2      	; 0xfbc <Timer1_init+0x68>
     fba:	5a c0       	rjmp	.+180    	; 0x1070 <Timer1_init+0x11c>
     fbc:	2b 81       	ldd	r18, Y+3	; 0x03
     fbe:	3c 81       	ldd	r19, Y+4	; 0x04
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	0c f0       	brlt	.+2      	; 0xfc8 <Timer1_init+0x74>
     fc6:	5a c0       	rjmp	.+180    	; 0x107c <Timer1_init+0x128>
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	09 f4       	brne	.+2      	; 0xfd2 <Timer1_init+0x7e>
     fd0:	3f c0       	rjmp	.+126    	; 0x1050 <Timer1_init+0xfc>
     fd2:	53 c1       	rjmp	.+678    	; 0x127a <Timer1_init+0x326>
     fd4:	2b 81       	ldd	r18, Y+3	; 0x03
     fd6:	3c 81       	ldd	r19, Y+4	; 0x04
     fd8:	25 30       	cpi	r18, 0x05	; 5
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <Timer1_init+0x8c>
     fde:	7d c0       	rjmp	.+250    	; 0x10da <Timer1_init+0x186>
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	86 30       	cpi	r24, 0x06	; 6
     fe6:	91 05       	cpc	r25, r1
     fe8:	0c f0       	brlt	.+2      	; 0xfec <Timer1_init+0x98>
     fea:	82 c0       	rjmp	.+260    	; 0x10f0 <Timer1_init+0x19c>
     fec:	58 c0       	rjmp	.+176    	; 0x109e <Timer1_init+0x14a>
     fee:	2b 81       	ldd	r18, Y+3	; 0x03
     ff0:	3c 81       	ldd	r19, Y+4	; 0x04
     ff2:	2b 30       	cpi	r18, 0x0B	; 11
     ff4:	31 05       	cpc	r19, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <Timer1_init+0xa6>
     ff8:	cd c0       	rjmp	.+410    	; 0x1194 <Timer1_init+0x240>
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	8c 30       	cpi	r24, 0x0C	; 12
    1000:	91 05       	cpc	r25, r1
    1002:	6c f4       	brge	.+26     	; 0x101e <Timer1_init+0xca>
    1004:	2b 81       	ldd	r18, Y+3	; 0x03
    1006:	3c 81       	ldd	r19, Y+4	; 0x04
    1008:	29 30       	cpi	r18, 0x09	; 9
    100a:	31 05       	cpc	r19, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <Timer1_init+0xbc>
    100e:	9a c0       	rjmp	.+308    	; 0x1144 <Timer1_init+0x1f0>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	8a 30       	cpi	r24, 0x0A	; 10
    1016:	91 05       	cpc	r25, r1
    1018:	0c f0       	brlt	.+2      	; 0x101c <Timer1_init+0xc8>
    101a:	a8 c0       	rjmp	.+336    	; 0x116c <Timer1_init+0x218>
    101c:	84 c0       	rjmp	.+264    	; 0x1126 <Timer1_init+0x1d2>
    101e:	2b 81       	ldd	r18, Y+3	; 0x03
    1020:	3c 81       	ldd	r19, Y+4	; 0x04
    1022:	2d 30       	cpi	r18, 0x0D	; 13
    1024:	31 05       	cpc	r19, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <Timer1_init+0xd6>
    1028:	e2 c0       	rjmp	.+452    	; 0x11ee <Timer1_init+0x29a>
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	8d 30       	cpi	r24, 0x0D	; 13
    1030:	91 05       	cpc	r25, r1
    1032:	0c f4       	brge	.+2      	; 0x1036 <Timer1_init+0xe2>
    1034:	c8 c0       	rjmp	.+400    	; 0x11c6 <Timer1_init+0x272>
    1036:	2b 81       	ldd	r18, Y+3	; 0x03
    1038:	3c 81       	ldd	r19, Y+4	; 0x04
    103a:	2e 30       	cpi	r18, 0x0E	; 14
    103c:	31 05       	cpc	r19, r1
    103e:	09 f4       	brne	.+2      	; 0x1042 <Timer1_init+0xee>
    1040:	e6 c0       	rjmp	.+460    	; 0x120e <Timer1_init+0x2ba>
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	9c 81       	ldd	r25, Y+4	; 0x04
    1046:	8f 30       	cpi	r24, 0x0F	; 15
    1048:	91 05       	cpc	r25, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <Timer1_init+0xfa>
    104c:	f9 c0       	rjmp	.+498    	; 0x1240 <Timer1_init+0x2ec>
    104e:	15 c1       	rjmp	.+554    	; 0x127a <Timer1_init+0x326>
	case Timer1_Mode_0_Normal:
		TCCR1A_REG.Bits.FOC1A_BIT = 1;
    1050:	ef e4       	ldi	r30, 0x4F	; 79
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	84 60       	ori	r24, 0x04	; 4
    1058:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.FOC1B_BIT = 1;
    105a:	ef e4       	ldi	r30, 0x4F	; 79
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	88 60       	ori	r24, 0x08	; 8
    1062:	80 83       	st	Z, r24
		TIMSK_REG.Bits.TOIE1_BIT = 1;
    1064:	e9 e5       	ldi	r30, 0x59	; 89
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	84 60       	ori	r24, 0x04	; 4
    106c:	80 83       	st	Z, r24
    106e:	05 c1       	rjmp	.+522    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_1_PWM_Phase_Correct_8bit:
		TCCR1A_REG.Bits.WGM10_BIT = 1;
    1070:	ef e4       	ldi	r30, 0x4F	; 79
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	81 60       	ori	r24, 0x01	; 1
    1078:	80 83       	st	Z, r24
    107a:	ff c0       	rjmp	.+510    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_2_PWM_Phase_Correct_9bit:
		TCCR1A_REG.Bits.WGM11_BIT = 1;
    107c:	ef e4       	ldi	r30, 0x4F	; 79
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	82 60       	ori	r24, 0x02	; 2
    1084:	80 83       	st	Z, r24
    1086:	f9 c0       	rjmp	.+498    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_3_PWM_Phase_Correct_10bit:
		TCCR1A_REG.Bits.WGM10_BIT = 1;
    1088:	ef e4       	ldi	r30, 0x4F	; 79
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_BIT = 1;
    1092:	ef e4       	ldi	r30, 0x4F	; 79
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	82 60       	ori	r24, 0x02	; 2
    109a:	80 83       	st	Z, r24
    109c:	ee c0       	rjmp	.+476    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_4_CTC:
		TCCR1A_REG.Bits.FOC1A_BIT = 1;
    109e:	ef e4       	ldi	r30, 0x4F	; 79
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	84 60       	ori	r24, 0x04	; 4
    10a6:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.FOC1B_BIT = 1;
    10a8:	ef e4       	ldi	r30, 0x4F	; 79
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	88 60       	ori	r24, 0x08	; 8
    10b0:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_BIT = 1;
    10b2:	ee e4       	ldi	r30, 0x4E	; 78
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	88 60       	ori	r24, 0x08	; 8
    10ba:	80 83       	st	Z, r24
		TIMSK_REG.Bits.OCIE1A_BIT = 1;
    10bc:	e9 e5       	ldi	r30, 0x59	; 89
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	80 61       	ori	r24, 0x10	; 16
    10c4:	80 83       	st	Z, r24

		OCR1A_REG = Config_Ptr->compare_value;
    10c6:	aa e4       	ldi	r26, 0x4A	; 74
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e9 81       	ldd	r30, Y+1	; 0x01
    10cc:	fa 81       	ldd	r31, Y+2	; 0x02
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	11 96       	adiw	r26, 0x01	; 1
    10d4:	9c 93       	st	X, r25
    10d6:	8e 93       	st	-X, r24
    10d8:	d0 c0       	rjmp	.+416    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_5_Fast_PWM_8bit:
		TCCR1A_REG.Bits.WGM10_BIT = 1;
    10da:	ef e4       	ldi	r30, 0x4F	; 79
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_BIT = 1;
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 60       	ori	r24, 0x08	; 8
    10ec:	80 83       	st	Z, r24
    10ee:	c5 c0       	rjmp	.+394    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_6_Fast_PWM_9bit:
		TCCR1A_REG.Bits.WGM11_BIT = 1;
    10f0:	ef e4       	ldi	r30, 0x4F	; 79
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	82 60       	ori	r24, 0x02	; 2
    10f8:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_BIT = 1;
    10fa:	ee e4       	ldi	r30, 0x4E	; 78
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	88 60       	ori	r24, 0x08	; 8
    1102:	80 83       	st	Z, r24
    1104:	ba c0       	rjmp	.+372    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_7_Fast_PWM_10bit:
		TCCR1A_REG.Bits.WGM10_BIT = 1;
    1106:	ef e4       	ldi	r30, 0x4F	; 79
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	81 60       	ori	r24, 0x01	; 1
    110e:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_BIT = 1;
    1110:	ef e4       	ldi	r30, 0x4F	; 79
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	82 60       	ori	r24, 0x02	; 2
    1118:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_BIT = 1;
    111a:	ee e4       	ldi	r30, 0x4E	; 78
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	88 60       	ori	r24, 0x08	; 8
    1122:	80 83       	st	Z, r24
    1124:	aa c0       	rjmp	.+340    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_8_PWM_Phase_and_Frequency:
		TCCR1B_REG.Bits.WGM13_BIT = 1;
    1126:	ee e4       	ldi	r30, 0x4E	; 78
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 61       	ori	r24, 0x10	; 16
    112e:	80 83       	st	Z, r24
		ICR1_REG = Config_Ptr->compare_value;
    1130:	a6 e4       	ldi	r26, 0x46	; 70
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e9 81       	ldd	r30, Y+1	; 0x01
    1136:	fa 81       	ldd	r31, Y+2	; 0x02
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	11 96       	adiw	r26, 0x01	; 1
    113e:	9c 93       	st	X, r25
    1140:	8e 93       	st	-X, r24
    1142:	9b c0       	rjmp	.+310    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_9_PWM_Phase_and_Frequency:
		TCCR1A_REG.Bits.WGM10_BIT = 1;
    1144:	ef e4       	ldi	r30, 0x4F	; 79
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	81 60       	ori	r24, 0x01	; 1
    114c:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_BIT = 1;
    114e:	ee e4       	ldi	r30, 0x4E	; 78
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 61       	ori	r24, 0x10	; 16
    1156:	80 83       	st	Z, r24
		OCR1A_REG = Config_Ptr->compare_value;
    1158:	aa e4       	ldi	r26, 0x4A	; 74
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e9 81       	ldd	r30, Y+1	; 0x01
    115e:	fa 81       	ldd	r31, Y+2	; 0x02
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	11 96       	adiw	r26, 0x01	; 1
    1166:	9c 93       	st	X, r25
    1168:	8e 93       	st	-X, r24
    116a:	87 c0       	rjmp	.+270    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_10_PWM_Phase_Correct:
		TCCR1A_REG.Bits.WGM11_BIT = 1;
    116c:	ef e4       	ldi	r30, 0x4F	; 79
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	82 60       	ori	r24, 0x02	; 2
    1174:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_BIT = 1;
    1176:	ee e4       	ldi	r30, 0x4E	; 78
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	80 61       	ori	r24, 0x10	; 16
    117e:	80 83       	st	Z, r24
		ICR1_REG = Config_Ptr->compare_value;
    1180:	a6 e4       	ldi	r26, 0x46	; 70
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	82 81       	ldd	r24, Z+2	; 0x02
    118a:	93 81       	ldd	r25, Z+3	; 0x03
    118c:	11 96       	adiw	r26, 0x01	; 1
    118e:	9c 93       	st	X, r25
    1190:	8e 93       	st	-X, r24
    1192:	73 c0       	rjmp	.+230    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_11_PWM_Phase_Correct:
		TCCR1A_REG.Bits.WGM10_BIT = 1;
    1194:	ef e4       	ldi	r30, 0x4F	; 79
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_BIT = 1;
    119e:	ef e4       	ldi	r30, 0x4F	; 79
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	82 60       	ori	r24, 0x02	; 2
    11a6:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_BIT = 1;
    11a8:	ee e4       	ldi	r30, 0x4E	; 78
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	80 61       	ori	r24, 0x10	; 16
    11b0:	80 83       	st	Z, r24
		OCR1A_REG = Config_Ptr->compare_value;
    11b2:	aa e4       	ldi	r26, 0x4A	; 74
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e9 81       	ldd	r30, Y+1	; 0x01
    11b8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	11 96       	adiw	r26, 0x01	; 1
    11c0:	9c 93       	st	X, r25
    11c2:	8e 93       	st	-X, r24
    11c4:	5a c0       	rjmp	.+180    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_12_CTC:
		TCCR1B_REG.Bits.WGM12_BIT = 1;
    11c6:	ee e4       	ldi	r30, 0x4E	; 78
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	88 60       	ori	r24, 0x08	; 8
    11ce:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_BIT = 1;
    11d0:	ee e4       	ldi	r30, 0x4E	; 78
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	80 61       	ori	r24, 0x10	; 16
    11d8:	80 83       	st	Z, r24
		ICR1_REG = Config_Ptr->compare_value;
    11da:	a6 e4       	ldi	r26, 0x46	; 70
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	11 96       	adiw	r26, 0x01	; 1
    11e8:	9c 93       	st	X, r25
    11ea:	8e 93       	st	-X, r24
    11ec:	46 c0       	rjmp	.+140    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_13_Reserved:
		TCCR1A_REG.Bits.WGM10_BIT = 1;
    11ee:	ef e4       	ldi	r30, 0x4F	; 79
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_BIT = 1;
    11f8:	ee e4       	ldi	r30, 0x4E	; 78
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 60       	ori	r24, 0x08	; 8
    1200:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_BIT = 1;
    1202:	ee e4       	ldi	r30, 0x4E	; 78
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 61       	ori	r24, 0x10	; 16
    120a:	80 83       	st	Z, r24
    120c:	36 c0       	rjmp	.+108    	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_14_Fast_PWM:
		TCCR1A_REG.Bits.WGM11_BIT = 1;
    120e:	ef e4       	ldi	r30, 0x4F	; 79
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	82 60       	ori	r24, 0x02	; 2
    1216:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_BIT = 1;
    1218:	ee e4       	ldi	r30, 0x4E	; 78
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 60       	ori	r24, 0x08	; 8
    1220:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_BIT = 1;
    1222:	ee e4       	ldi	r30, 0x4E	; 78
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 61       	ori	r24, 0x10	; 16
    122a:	80 83       	st	Z, r24
		ICR1_REG = Config_Ptr->compare_value;
    122c:	a6 e4       	ldi	r26, 0x46	; 70
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e9 81       	ldd	r30, Y+1	; 0x01
    1232:	fa 81       	ldd	r31, Y+2	; 0x02
    1234:	82 81       	ldd	r24, Z+2	; 0x02
    1236:	93 81       	ldd	r25, Z+3	; 0x03
    1238:	11 96       	adiw	r26, 0x01	; 1
    123a:	9c 93       	st	X, r25
    123c:	8e 93       	st	-X, r24
    123e:	1d c0       	rjmp	.+58     	; 0x127a <Timer1_init+0x326>
		break;
	case Timer1_Mode_15_Fast_PWM:
		TCCR1A_REG.Bits.WGM10_BIT = 1;
    1240:	ef e4       	ldi	r30, 0x4F	; 79
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	81 60       	ori	r24, 0x01	; 1
    1248:	80 83       	st	Z, r24
		TCCR1A_REG.Bits.WGM11_BIT = 1;
    124a:	ef e4       	ldi	r30, 0x4F	; 79
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	82 60       	ori	r24, 0x02	; 2
    1252:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM12_BIT = 1;
    1254:	ee e4       	ldi	r30, 0x4E	; 78
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	88 60       	ori	r24, 0x08	; 8
    125c:	80 83       	st	Z, r24
		TCCR1B_REG.Bits.WGM13_BIT = 1;
    125e:	ee e4       	ldi	r30, 0x4E	; 78
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 61       	ori	r24, 0x10	; 16
    1266:	80 83       	st	Z, r24
		OCR1A_REG = Config_Ptr->compare_value;
    1268:	aa e4       	ldi	r26, 0x4A	; 74
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e9 81       	ldd	r30, Y+1	; 0x01
    126e:	fa 81       	ldd	r31, Y+2	; 0x02
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	9c 93       	st	X, r25
    1278:	8e 93       	st	-X, r24
		break;
	default:
		break;
	}
	TIMSK_REG.Bits.OCIE1A_BIT = 1; /* Enable compare interrupt for channel A */
    127a:	e9 e5       	ldi	r30, 0x59	; 89
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 61       	ori	r24, 0x10	; 16
    1282:	80 83       	st	Z, r24

	/*Clock*/
	TCCR1B_REG.Bits.CS10_11_12_BITS = (Config_Ptr->prescaler);
    1284:	ae e4       	ldi	r26, 0x4E	; 78
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e9 81       	ldd	r30, Y+1	; 0x01
    128a:	fa 81       	ldd	r31, Y+2	; 0x02
    128c:	84 81       	ldd	r24, Z+4	; 0x04
    128e:	87 70       	andi	r24, 0x07	; 7
    1290:	98 2f       	mov	r25, r24
    1292:	97 70       	andi	r25, 0x07	; 7
    1294:	8c 91       	ld	r24, X
    1296:	88 7f       	andi	r24, 0xF8	; 248
    1298:	89 2b       	or	r24, r25
    129a:	8c 93       	st	X, r24
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <Timer1_deInit>:
/*Description
 Function to disable the Timer1.*/
void Timer1_deInit(void) {
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = 0;
    12b2:	ec e4       	ldi	r30, 0x4C	; 76
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	11 82       	std	Z+1, r1	; 0x01
    12b8:	10 82       	st	Z, r1
	TCCR1A_REG.Byte = 0x00;
    12ba:	ef e4       	ldi	r30, 0x4F	; 79
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0x00;
    12c0:	ee e4       	ldi	r30, 0x4E	; 78
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	10 82       	st	Z, r1
	TIMSK_REG.Byte = 0x00;
    12c6:	e9 e5       	ldi	r30, 0x59	; 89
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	10 82       	st	Z, r1
	OCR1A_REG = 0;
    12cc:	ea e4       	ldi	r30, 0x4A	; 74
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	11 82       	std	Z+1, r1	; 0x01
    12d2:	10 82       	st	Z, r1
	OCR1B_REG = 0;
    12d4:	e8 e4       	ldi	r30, 0x48	; 72
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	11 82       	std	Z+1, r1	; 0x01
    12da:	10 82       	st	Z, r1
	ICR1_REG = 0;
    12dc:	e6 e4       	ldi	r30, 0x46	; 70
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	11 82       	std	Z+1, r1	; 0x01
    12e2:	10 82       	st	Z, r1
}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <Timer1_setCallBack>:
/*Description
 Function to set the Call Back function address.*/
void Timer1_setCallBack(void (*a_ptr)(void)) {
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <Timer1_setCallBack+0x6>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	90 93 07 01 	sts	0x0107, r25
    1300:	80 93 06 01 	sts	0x0106, r24
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <GPIO_setupPinDirection+0x6>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <GPIO_setupPinDirection+0x8>
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	6a 83       	std	Y+2, r22	; 0x02
    1320:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	88 30       	cpi	r24, 0x08	; 8
    1326:	08 f0       	brcs	.+2      	; 0x132a <GPIO_setupPinDirection+0x1c>
    1328:	d5 c0       	rjmp	.+426    	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	08 f0       	brcs	.+2      	; 0x1332 <GPIO_setupPinDirection+0x24>
    1330:	d1 c0       	rjmp	.+418    	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3d 83       	std	Y+5, r19	; 0x05
    133a:	2c 83       	std	Y+4, r18	; 0x04
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	9d 81       	ldd	r25, Y+5	; 0x05
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <GPIO_setupPinDirection+0x3a>
    1346:	43 c0       	rjmp	.+134    	; 0x13ce <GPIO_setupPinDirection+0xc0>
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	2c f4       	brge	.+10     	; 0x135c <GPIO_setupPinDirection+0x4e>
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	71 f0       	breq	.+28     	; 0x1376 <GPIO_setupPinDirection+0x68>
    135a:	bc c0       	rjmp	.+376    	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
    135c:	2c 81       	ldd	r18, Y+4	; 0x04
    135e:	3d 81       	ldd	r19, Y+5	; 0x05
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <GPIO_setupPinDirection+0x5a>
    1366:	5f c0       	rjmp	.+190    	; 0x1426 <GPIO_setupPinDirection+0x118>
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <GPIO_setupPinDirection+0x66>
    1372:	85 c0       	rjmp	.+266    	; 0x147e <GPIO_setupPinDirection+0x170>
    1374:	af c0       	rjmp	.+350    	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	a1 f4       	brne	.+40     	; 0x13a4 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    137c:	aa e3       	ldi	r26, 0x3A	; 58
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	ea e3       	ldi	r30, 0x3A	; 58
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <GPIO_setupPinDirection+0x8c>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <GPIO_setupPinDirection+0x88>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	98 c0       	rjmp	.+304    	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    13a4:	aa e3       	ldi	r26, 0x3A	; 58
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ea e3       	ldi	r30, 0x3A	; 58
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <GPIO_setupPinDirection+0xb4>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <GPIO_setupPinDirection+0xb0>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	83 c0       	rjmp	.+262    	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	a1 f4       	brne	.+40     	; 0x13fc <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    13d4:	a7 e3       	ldi	r26, 0x37	; 55
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e7 e3       	ldi	r30, 0x37	; 55
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_setupPinDirection+0xe4>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_setupPinDirection+0xe0>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	6c c0       	rjmp	.+216    	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    13fc:	a7 e3       	ldi	r26, 0x37	; 55
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e7 e3       	ldi	r30, 0x37	; 55
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <GPIO_setupPinDirection+0x10c>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <GPIO_setupPinDirection+0x108>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	57 c0       	rjmp	.+174    	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	a1 f4       	brne	.+40     	; 0x1454 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    142c:	a4 e3       	ldi	r26, 0x34	; 52
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e4 e3       	ldi	r30, 0x34	; 52
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <GPIO_setupPinDirection+0x13c>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <GPIO_setupPinDirection+0x138>
    144e:	84 2b       	or	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	40 c0       	rjmp	.+128    	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    1454:	a4 e3       	ldi	r26, 0x34	; 52
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e4 e3       	ldi	r30, 0x34	; 52
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <GPIO_setupPinDirection+0x164>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <GPIO_setupPinDirection+0x160>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	2b c0       	rjmp	.+86     	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	a1 f4       	brne	.+40     	; 0x14ac <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    1484:	a1 e3       	ldi	r26, 0x31	; 49
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e1 e3       	ldi	r30, 0x31	; 49
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <GPIO_setupPinDirection+0x194>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <GPIO_setupPinDirection+0x190>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    14ac:	a1 e3       	ldi	r26, 0x31	; 49
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e1 e3       	ldi	r30, 0x31	; 49
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_setupPinDirection+0x1bc>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_setupPinDirection+0x1b8>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <GPIO_writePin+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <GPIO_writePin+0x8>
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	6a 83       	std	Y+2, r22	; 0x02
    14f6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	88 30       	cpi	r24, 0x08	; 8
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <GPIO_writePin+0x1c>
    14fe:	d5 c0       	rjmp	.+426    	; 0x16aa <GPIO_writePin+0x1c6>
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	08 f0       	brcs	.+2      	; 0x1508 <GPIO_writePin+0x24>
    1506:	d1 c0       	rjmp	.+418    	; 0x16aa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* Write the pin value as required */
		switch (port_num) {
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3d 83       	std	Y+5, r19	; 0x05
    1510:	2c 83       	std	Y+4, r18	; 0x04
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	9d 81       	ldd	r25, Y+5	; 0x05
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	91 05       	cpc	r25, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <GPIO_writePin+0x3a>
    151c:	43 c0       	rjmp	.+134    	; 0x15a4 <GPIO_writePin+0xc0>
    151e:	2c 81       	ldd	r18, Y+4	; 0x04
    1520:	3d 81       	ldd	r19, Y+5	; 0x05
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	2c f4       	brge	.+10     	; 0x1532 <GPIO_writePin+0x4e>
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	9d 81       	ldd	r25, Y+5	; 0x05
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	71 f0       	breq	.+28     	; 0x154c <GPIO_writePin+0x68>
    1530:	bc c0       	rjmp	.+376    	; 0x16aa <GPIO_writePin+0x1c6>
    1532:	2c 81       	ldd	r18, Y+4	; 0x04
    1534:	3d 81       	ldd	r19, Y+5	; 0x05
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <GPIO_writePin+0x5a>
    153c:	5f c0       	rjmp	.+190    	; 0x15fc <GPIO_writePin+0x118>
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <GPIO_writePin+0x66>
    1548:	85 c0       	rjmp	.+266    	; 0x1654 <GPIO_writePin+0x170>
    154a:	af c0       	rjmp	.+350    	; 0x16aa <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	a1 f4       	brne	.+40     	; 0x157a <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    1552:	ab e3       	ldi	r26, 0x3B	; 59
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	eb e3       	ldi	r30, 0x3B	; 59
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_writePin+0x8c>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_writePin+0x88>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	98 c0       	rjmp	.+304    	; 0x16aa <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    157a:	ab e3       	ldi	r26, 0x3B	; 59
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	eb e3       	ldi	r30, 0x3B	; 59
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <GPIO_writePin+0xb4>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <GPIO_writePin+0xb0>
    159c:	80 95       	com	r24
    159e:	84 23       	and	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	83 c0       	rjmp	.+262    	; 0x16aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	a1 f4       	brne	.+40     	; 0x15d2 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    15aa:	a8 e3       	ldi	r26, 0x38	; 56
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e8 e3       	ldi	r30, 0x38	; 56
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <GPIO_writePin+0xe4>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <GPIO_writePin+0xe0>
    15cc:	84 2b       	or	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	6c c0       	rjmp	.+216    	; 0x16aa <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    15d2:	a8 e3       	ldi	r26, 0x38	; 56
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <GPIO_writePin+0x10c>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <GPIO_writePin+0x108>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	57 c0       	rjmp	.+174    	; 0x16aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	a1 f4       	brne	.+40     	; 0x162a <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    1602:	a5 e3       	ldi	r26, 0x35	; 53
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e5 e3       	ldi	r30, 0x35	; 53
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <GPIO_writePin+0x13c>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <GPIO_writePin+0x138>
    1624:	84 2b       	or	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	40 c0       	rjmp	.+128    	; 0x16aa <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    162a:	a5 e3       	ldi	r26, 0x35	; 53
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e5 e3       	ldi	r30, 0x35	; 53
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <GPIO_writePin+0x164>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <GPIO_writePin+0x160>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	2b c0       	rjmp	.+86     	; 0x16aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	a1 f4       	brne	.+40     	; 0x1682 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    165a:	a2 e3       	ldi	r26, 0x32	; 50
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e2 e3       	ldi	r30, 0x32	; 50
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <GPIO_writePin+0x194>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <GPIO_writePin+0x190>
    167c:	84 2b       	or	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	14 c0       	rjmp	.+40     	; 0x16aa <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    1682:	a2 e3       	ldi	r26, 0x32	; 50
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e2 e3       	ldi	r30, 0x32	; 50
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <GPIO_writePin+0x1bc>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <GPIO_writePin+0x1b8>
    16a4:	80 95       	com	r24
    16a6:	84 23       	and	r24, r20
    16a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <GPIO_readPin+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <GPIO_readPin+0x8>
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16cc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	88 30       	cpi	r24, 0x08	; 8
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <GPIO_readPin+0x1c>
    16d4:	84 c0       	rjmp	.+264    	; 0x17de <GPIO_readPin+0x124>
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	84 30       	cpi	r24, 0x04	; 4
    16da:	08 f0       	brcs	.+2      	; 0x16de <GPIO_readPin+0x24>
    16dc:	80 c0       	rjmp	.+256    	; 0x17de <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* Read the pin value as required */
		switch (port_num) {
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	3d 83       	std	Y+5, r19	; 0x05
    16e6:	2c 83       	std	Y+4, r18	; 0x04
    16e8:	4c 81       	ldd	r20, Y+4	; 0x04
    16ea:	5d 81       	ldd	r21, Y+5	; 0x05
    16ec:	41 30       	cpi	r20, 0x01	; 1
    16ee:	51 05       	cpc	r21, r1
    16f0:	79 f1       	breq	.+94     	; 0x1750 <GPIO_readPin+0x96>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	91 05       	cpc	r25, r1
    16fa:	34 f4       	brge	.+12     	; 0x1708 <GPIO_readPin+0x4e>
    16fc:	2c 81       	ldd	r18, Y+4	; 0x04
    16fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1700:	21 15       	cp	r18, r1
    1702:	31 05       	cpc	r19, r1
    1704:	69 f0       	breq	.+26     	; 0x1720 <GPIO_readPin+0x66>
    1706:	6b c0       	rjmp	.+214    	; 0x17de <GPIO_readPin+0x124>
    1708:	4c 81       	ldd	r20, Y+4	; 0x04
    170a:	5d 81       	ldd	r21, Y+5	; 0x05
    170c:	42 30       	cpi	r20, 0x02	; 2
    170e:	51 05       	cpc	r21, r1
    1710:	b9 f1       	breq	.+110    	; 0x1780 <GPIO_readPin+0xc6>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <GPIO_readPin+0x64>
    171c:	49 c0       	rjmp	.+146    	; 0x17b0 <GPIO_readPin+0xf6>
    171e:	5f c0       	rjmp	.+190    	; 0x17de <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    1720:	e9 e3       	ldi	r30, 0x39	; 57
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a9 01       	movw	r20, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_readPin+0x7e>
    1734:	55 95       	asr	r21
    1736:	47 95       	ror	r20
    1738:	8a 95       	dec	r24
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_readPin+0x7a>
    173c:	ca 01       	movw	r24, r20
    173e:	81 70       	andi	r24, 0x01	; 1
    1740:	90 70       	andi	r25, 0x00	; 0
    1742:	88 23       	and	r24, r24
    1744:	19 f0       	breq	.+6      	; 0x174c <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	49 c0       	rjmp	.+146    	; 0x17de <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    174c:	19 82       	std	Y+1, r1	; 0x01
    174e:	47 c0       	rjmp	.+142    	; 0x17de <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    1750:	e6 e3       	ldi	r30, 0x36	; 54
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a9 01       	movw	r20, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <GPIO_readPin+0xae>
    1764:	55 95       	asr	r21
    1766:	47 95       	ror	r20
    1768:	8a 95       	dec	r24
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <GPIO_readPin+0xaa>
    176c:	ca 01       	movw	r24, r20
    176e:	81 70       	andi	r24, 0x01	; 1
    1770:	90 70       	andi	r25, 0x00	; 0
    1772:	88 23       	and	r24, r24
    1774:	19 f0       	breq	.+6      	; 0x177c <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	31 c0       	rjmp	.+98     	; 0x17de <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    177c:	19 82       	std	Y+1, r1	; 0x01
    177e:	2f c0       	rjmp	.+94     	; 0x17de <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    1780:	e3 e3       	ldi	r30, 0x33	; 51
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	88 2f       	mov	r24, r24
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a9 01       	movw	r20, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <GPIO_readPin+0xde>
    1794:	55 95       	asr	r21
    1796:	47 95       	ror	r20
    1798:	8a 95       	dec	r24
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <GPIO_readPin+0xda>
    179c:	ca 01       	movw	r24, r20
    179e:	81 70       	andi	r24, 0x01	; 1
    17a0:	90 70       	andi	r25, 0x00	; 0
    17a2:	88 23       	and	r24, r24
    17a4:	19 f0       	breq	.+6      	; 0x17ac <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	19 c0       	rjmp	.+50     	; 0x17de <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    17ac:	19 82       	std	Y+1, r1	; 0x01
    17ae:	17 c0       	rjmp	.+46     	; 0x17de <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    17b0:	e0 e3       	ldi	r30, 0x30	; 48
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	a9 01       	movw	r20, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <GPIO_readPin+0x10e>
    17c4:	55 95       	asr	r21
    17c6:	47 95       	ror	r20
    17c8:	8a 95       	dec	r24
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <GPIO_readPin+0x10a>
    17cc:	ca 01       	movw	r24, r20
    17ce:	81 70       	andi	r24, 0x01	; 1
    17d0:	90 70       	andi	r25, 0x00	; 0
    17d2:	88 23       	and	r24, r24
    17d4:	19 f0       	breq	.+6      	; 0x17dc <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	01 c0       	rjmp	.+2      	; 0x17de <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    17dc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <GPIO_setupPortDirection+0x6>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <GPIO_setupPortDirection+0x8>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	84 30       	cpi	r24, 0x04	; 4
    1804:	90 f5       	brcc	.+100    	; 0x186a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	3c 83       	std	Y+4, r19	; 0x04
    180e:	2b 83       	std	Y+3, r18	; 0x03
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	d1 f0       	breq	.+52     	; 0x184e <GPIO_setupPortDirection+0x5e>
    181a:	2b 81       	ldd	r18, Y+3	; 0x03
    181c:	3c 81       	ldd	r19, Y+4	; 0x04
    181e:	22 30       	cpi	r18, 0x02	; 2
    1820:	31 05       	cpc	r19, r1
    1822:	2c f4       	brge	.+10     	; 0x182e <GPIO_setupPortDirection+0x3e>
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	61 f0       	breq	.+24     	; 0x1844 <GPIO_setupPortDirection+0x54>
    182c:	1e c0       	rjmp	.+60     	; 0x186a <GPIO_setupPortDirection+0x7a>
    182e:	2b 81       	ldd	r18, Y+3	; 0x03
    1830:	3c 81       	ldd	r19, Y+4	; 0x04
    1832:	22 30       	cpi	r18, 0x02	; 2
    1834:	31 05       	cpc	r19, r1
    1836:	81 f0       	breq	.+32     	; 0x1858 <GPIO_setupPortDirection+0x68>
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	81 f0       	breq	.+32     	; 0x1862 <GPIO_setupPortDirection+0x72>
    1842:	13 c0       	rjmp	.+38     	; 0x186a <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1844:	ea e3       	ldi	r30, 0x3A	; 58
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	80 83       	st	Z, r24
    184c:	0e c0       	rjmp	.+28     	; 0x186a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    184e:	e7 e3       	ldi	r30, 0x37	; 55
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	80 83       	st	Z, r24
    1856:	09 c0       	rjmp	.+18     	; 0x186a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1858:	e4 e3       	ldi	r30, 0x34	; 52
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	80 83       	st	Z, r24
    1860:	04 c0       	rjmp	.+8      	; 0x186a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1862:	e1 e3       	ldi	r30, 0x31	; 49
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	80 83       	st	Z, r24
			break;
		}
	}
}
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <GPIO_writePort+0x6>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <GPIO_writePort+0x8>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	84 30       	cpi	r24, 0x04	; 4
    188c:	90 f5       	brcc	.+100    	; 0x18f2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (port_num) {
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3c 83       	std	Y+4, r19	; 0x04
    1896:	2b 83       	std	Y+3, r18	; 0x03
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	d1 f0       	breq	.+52     	; 0x18d6 <GPIO_writePort+0x5e>
    18a2:	2b 81       	ldd	r18, Y+3	; 0x03
    18a4:	3c 81       	ldd	r19, Y+4	; 0x04
    18a6:	22 30       	cpi	r18, 0x02	; 2
    18a8:	31 05       	cpc	r19, r1
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <GPIO_writePort+0x3e>
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	61 f0       	breq	.+24     	; 0x18cc <GPIO_writePort+0x54>
    18b4:	1e c0       	rjmp	.+60     	; 0x18f2 <GPIO_writePort+0x7a>
    18b6:	2b 81       	ldd	r18, Y+3	; 0x03
    18b8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ba:	22 30       	cpi	r18, 0x02	; 2
    18bc:	31 05       	cpc	r19, r1
    18be:	81 f0       	breq	.+32     	; 0x18e0 <GPIO_writePort+0x68>
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	83 30       	cpi	r24, 0x03	; 3
    18c6:	91 05       	cpc	r25, r1
    18c8:	81 f0       	breq	.+32     	; 0x18ea <GPIO_writePort+0x72>
    18ca:	13 c0       	rjmp	.+38     	; 0x18f2 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    18cc:	eb e3       	ldi	r30, 0x3B	; 59
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	80 83       	st	Z, r24
    18d4:	0e c0       	rjmp	.+28     	; 0x18f2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18d6:	e8 e3       	ldi	r30, 0x38	; 56
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	80 83       	st	Z, r24
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18e0:	e5 e3       	ldi	r30, 0x35	; 53
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	80 83       	st	Z, r24
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18ea:	e2 e3       	ldi	r30, 0x32	; 50
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	80 83       	st	Z, r24
			break;
		}
	}
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <GPIO_readPort+0x6>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <GPIO_readPort+0x8>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    190e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	84 30       	cpi	r24, 0x04	; 4
    1914:	90 f5       	brcc	.+100    	; 0x197a <GPIO_readPort+0x7a>
		/* Do Nothing */
	} else {
		/* Read the port value as required */
		switch (port_num) {
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	3c 83       	std	Y+4, r19	; 0x04
    191e:	2b 83       	std	Y+3, r18	; 0x03
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	91 05       	cpc	r25, r1
    1928:	d1 f0       	breq	.+52     	; 0x195e <GPIO_readPort+0x5e>
    192a:	2b 81       	ldd	r18, Y+3	; 0x03
    192c:	3c 81       	ldd	r19, Y+4	; 0x04
    192e:	22 30       	cpi	r18, 0x02	; 2
    1930:	31 05       	cpc	r19, r1
    1932:	2c f4       	brge	.+10     	; 0x193e <GPIO_readPort+0x3e>
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	61 f0       	breq	.+24     	; 0x1954 <GPIO_readPort+0x54>
    193c:	1e c0       	rjmp	.+60     	; 0x197a <GPIO_readPort+0x7a>
    193e:	2b 81       	ldd	r18, Y+3	; 0x03
    1940:	3c 81       	ldd	r19, Y+4	; 0x04
    1942:	22 30       	cpi	r18, 0x02	; 2
    1944:	31 05       	cpc	r19, r1
    1946:	81 f0       	breq	.+32     	; 0x1968 <GPIO_readPort+0x68>
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	91 05       	cpc	r25, r1
    1950:	81 f0       	breq	.+32     	; 0x1972 <GPIO_readPort+0x72>
    1952:	13 c0       	rjmp	.+38     	; 0x197a <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    1954:	e9 e3       	ldi	r30, 0x39	; 57
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	0e c0       	rjmp	.+28     	; 0x197a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    195e:	e6 e3       	ldi	r30, 0x36	; 54
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	09 c0       	rjmp	.+18     	; 0x197a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1968:	e3 e3       	ldi	r30, 0x33	; 51
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	04 c0       	rjmp	.+8      	; 0x197a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1972:	e0 e3       	ldi	r30, 0x30	; 48
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    197a:	89 81       	ldd	r24, Y+1	; 0x01
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <global_interput_int>:
#include "../../lib/common_macros.h"
#include "global_interput_Reg.h"
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void global_interput_int(void) {
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, I_BIT);
    1992:	af e5       	ldi	r26, 0x5F	; 95
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ef e5       	ldi	r30, 0x5F	; 95
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	80 68       	ori	r24, 0x80	; 128
    199e:	8c 93       	st	X, r24
}
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void) {
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	2e 97       	sbiw	r28, 0x0e	; 14
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	61 e0       	ldi	r22, 0x01	; 1
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 ea       	ldi	r26, 0xA0	; 160
    19d4:	b1 e4       	ldi	r27, 0x41	; 65
    19d6:	8b 87       	std	Y+11, r24	; 0x0b
    19d8:	9c 87       	std	Y+12, r25	; 0x0c
    19da:	ad 87       	std	Y+13, r26	; 0x0d
    19dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a ef       	ldi	r20, 0xFA	; 250
    19ec:	54 e4       	ldi	r21, 0x44	; 68
    19ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8f 83       	std	Y+7, r24	; 0x07
    19f8:	98 87       	std	Y+8, r25	; 0x08
    19fa:	a9 87       	std	Y+9, r26	; 0x09
    19fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_init+0x7a>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_init+0xda>
    1a62:	88 ec       	ldi	r24, 0xC8	; 200
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_init+0xc8>
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_init+0xbc>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_init+0x104>
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20); /* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	63 e0       	ldi	r22, 0x03	; 3
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	65 e0       	ldi	r22, 0x05	; 5
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	66 e0       	ldi	r22, 0x06	; 6
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1ada:	83 e3       	ldi	r24, 0x33	; 51
    1adc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1ae0:	82 e3       	ldi	r24, 0x32	; 50
    1ae2:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1ae6:	88 e2       	ldi	r24, 0x28	; 40
    1ae8:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1aec:	8c e0       	ldi	r24, 0x0C	; 12
    1aee:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_sendCommand>
}
    1af8:	2e 96       	adiw	r28, 0x0e	; 14
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	c3 56       	subi	r28, 0x63	; 99
    1b18:	d0 40       	sbci	r29, 0x00	; 0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	fe 01       	movw	r30, r28
    1b26:	ed 59       	subi	r30, 0x9D	; 157
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    1b36:	fe 01       	movw	r30, r28
    1b38:	e1 5a       	subi	r30, 0xA1	; 161
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a0 e8       	ldi	r26, 0x80	; 128
    1b42:	bf e3       	ldi	r27, 0x3F	; 63
    1b44:	80 83       	st	Z, r24
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	a2 83       	std	Z+2, r26	; 0x02
    1b4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4c:	8e 01       	movw	r16, r28
    1b4e:	05 5a       	subi	r16, 0xA5	; 165
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255
    1b52:	fe 01       	movw	r30, r28
    1b54:	e1 5a       	subi	r30, 0xA1	; 161
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a ef       	ldi	r20, 0xFA	; 250
    1b66:	54 e4       	ldi	r21, 0x44	; 68
    1b68:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	f8 01       	movw	r30, r16
    1b72:	80 83       	st	Z, r24
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	a2 83       	std	Z+2, r26	; 0x02
    1b78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e5 5a       	subi	r30, 0xA5	; 165
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	44 f4       	brge	.+16     	; 0x1ba8 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e7 5a       	subi	r30, 0xA7	; 167
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	91 83       	std	Z+1, r25	; 0x01
    1ba4:	80 83       	st	Z, r24
    1ba6:	64 c0       	rjmp	.+200    	; 0x1c70 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e5 5a       	subi	r30, 0xA5	; 165
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	60 81       	ld	r22, Z
    1bb0:	71 81       	ldd	r23, Z+1	; 0x01
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	3f ef       	ldi	r19, 0xFF	; 255
    1bba:	4f e7       	ldi	r20, 0x7F	; 127
    1bbc:	57 e4       	ldi	r21, 0x47	; 71
    1bbe:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1bc2:	18 16       	cp	r1, r24
    1bc4:	0c f0       	brlt	.+2      	; 0x1bc8 <LCD_sendCommand+0xbe>
    1bc6:	43 c0       	rjmp	.+134    	; 0x1c4e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e1 5a       	subi	r30, 0xA1	; 161
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	8e 01       	movw	r16, r28
    1be8:	07 5a       	subi	r16, 0xA7	; 167
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	1f c0       	rjmp	.+62     	; 0x1c3e <LCD_sendCommand+0x134>
    1c00:	fe 01       	movw	r30, r28
    1c02:	e9 5a       	subi	r30, 0xA9	; 169
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	88 ec       	ldi	r24, 0xC8	; 200
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	80 83       	st	Z, r24
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e9 5a       	subi	r30, 0xA9	; 169
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 81       	ld	r24, Z
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_sendCommand+0x10e>
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e9 5a       	subi	r30, 0xA9	; 169
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	de 01       	movw	r26, r28
    1c28:	a7 5a       	subi	r26, 0xA7	; 167
    1c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e7 5a       	subi	r30, 0xA7	; 167
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	11 96       	adiw	r26, 0x01	; 1
    1c3a:	9c 93       	st	X, r25
    1c3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e7 5a       	subi	r30, 0xA7	; 167
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	d1 f6       	brne	.-76     	; 0x1c00 <LCD_sendCommand+0xf6>
    1c4c:	27 c0       	rjmp	.+78     	; 0x1c9c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4e:	8e 01       	movw	r16, r28
    1c50:	07 5a       	subi	r16, 0xA7	; 167
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	fe 01       	movw	r30, r28
    1c56:	e5 5a       	subi	r30, 0xA5	; 165
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
    1c70:	de 01       	movw	r26, r28
    1c72:	ab 5a       	subi	r26, 0xAB	; 171
    1c74:	bf 4f       	sbci	r27, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	e7 5a       	subi	r30, 0xA7	; 167
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	8d 93       	st	X+, r24
    1c82:	9c 93       	st	X, r25
    1c84:	fe 01       	movw	r30, r28
    1c86:	eb 5a       	subi	r30, 0xAB	; 171
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	91 81       	ldd	r25, Z+1	; 0x01
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_sendCommand+0x184>
    1c92:	fe 01       	movw	r30, r28
    1c94:	eb 5a       	subi	r30, 0xAB	; 171
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ef 5a       	subi	r30, 0xAF	; 175
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e8       	ldi	r26, 0x80	; 128
    1cb2:	bf e3       	ldi	r27, 0x3F	; 63
    1cb4:	80 83       	st	Z, r24
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	a2 83       	std	Z+2, r26	; 0x02
    1cba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	8e 01       	movw	r16, r28
    1cbe:	03 5b       	subi	r16, 0xB3	; 179
    1cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ef 5a       	subi	r30, 0xAF	; 175
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	4a ef       	ldi	r20, 0xFA	; 250
    1cd6:	54 e4       	ldi	r21, 0x44	; 68
    1cd8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	80 83       	st	Z, r24
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	a2 83       	std	Z+2, r26	; 0x02
    1ce8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cea:	fe 01       	movw	r30, r28
    1cec:	e3 5b       	subi	r30, 0xB3	; 179
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	44 f4       	brge	.+16     	; 0x1d18 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e5 5b       	subi	r30, 0xB5	; 181
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
    1d16:	64 c0       	rjmp	.+200    	; 0x1de0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e3 5b       	subi	r30, 0xB3	; 179
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	3f ef       	ldi	r19, 0xFF	; 255
    1d2a:	4f e7       	ldi	r20, 0x7F	; 127
    1d2c:	57 e4       	ldi	r21, 0x47	; 71
    1d2e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1d32:	18 16       	cp	r1, r24
    1d34:	0c f0       	brlt	.+2      	; 0x1d38 <LCD_sendCommand+0x22e>
    1d36:	43 c0       	rjmp	.+134    	; 0x1dbe <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ef 5a       	subi	r30, 0xAF	; 175
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e2       	ldi	r20, 0x20	; 32
    1d4c:	51 e4       	ldi	r21, 0x41	; 65
    1d4e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	8e 01       	movw	r16, r28
    1d58:	05 5b       	subi	r16, 0xB5	; 181
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	f8 01       	movw	r30, r16
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
    1d6e:	1f c0       	rjmp	.+62     	; 0x1dae <LCD_sendCommand+0x2a4>
    1d70:	fe 01       	movw	r30, r28
    1d72:	e7 5b       	subi	r30, 0xB7	; 183
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	88 ec       	ldi	r24, 0xC8	; 200
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	80 83       	st	Z, r24
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e7 5b       	subi	r30, 0xB7	; 183
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_sendCommand+0x27e>
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e7 5b       	subi	r30, 0xB7	; 183
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d96:	de 01       	movw	r26, r28
    1d98:	a5 5b       	subi	r26, 0xB5	; 181
    1d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e5 5b       	subi	r30, 0xB5	; 181
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	11 96       	adiw	r26, 0x01	; 1
    1daa:	9c 93       	st	X, r25
    1dac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dae:	fe 01       	movw	r30, r28
    1db0:	e5 5b       	subi	r30, 0xB5	; 181
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	d1 f6       	brne	.-76     	; 0x1d70 <LCD_sendCommand+0x266>
    1dbc:	27 c0       	rjmp	.+78     	; 0x1e0c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbe:	8e 01       	movw	r16, r28
    1dc0:	05 5b       	subi	r16, 0xB5	; 181
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e3 5b       	subi	r30, 0xB3	; 179
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	f8 01       	movw	r30, r16
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	80 83       	st	Z, r24
    1de0:	de 01       	movw	r26, r28
    1de2:	a9 5b       	subi	r26, 0xB9	; 185
    1de4:	bf 4f       	sbci	r27, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	e5 5b       	subi	r30, 0xB5	; 181
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	8d 93       	st	X+, r24
    1df2:	9c 93       	st	X, r25
    1df4:	fe 01       	movw	r30, r28
    1df6:	e9 5b       	subi	r30, 0xB9	; 185
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 81       	ld	r24, Z
    1dfc:	91 81       	ldd	r25, Z+1	; 0x01
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <LCD_sendCommand+0x2f4>
    1e02:	fe 01       	movw	r30, r28
    1e04:	e9 5b       	subi	r30, 0xB9	; 185
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 4));
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ed 59       	subi	r30, 0x9D	; 157
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	80 71       	andi	r24, 0x10	; 16
    1e1a:	90 70       	andi	r25, 0x00	; 0
    1e1c:	95 95       	asr	r25
    1e1e:	87 95       	ror	r24
    1e20:	95 95       	asr	r25
    1e22:	87 95       	ror	r24
    1e24:	95 95       	asr	r25
    1e26:	87 95       	ror	r24
    1e28:	95 95       	asr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	63 e0       	ldi	r22, 0x03	; 3
    1e32:	49 2f       	mov	r20, r25
    1e34:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 5));
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ed 59       	subi	r30, 0x9D	; 157
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	80 72       	andi	r24, 0x20	; 32
    1e46:	90 70       	andi	r25, 0x00	; 0
    1e48:	95 95       	asr	r25
    1e4a:	87 95       	ror	r24
    1e4c:	95 95       	asr	r25
    1e4e:	87 95       	ror	r24
    1e50:	95 95       	asr	r25
    1e52:	87 95       	ror	r24
    1e54:	95 95       	asr	r25
    1e56:	87 95       	ror	r24
    1e58:	95 95       	asr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	98 2f       	mov	r25, r24
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	49 2f       	mov	r20, r25
    1e64:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 6));
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ed 59       	subi	r30, 0x9D	; 157
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	80 74       	andi	r24, 0x40	; 64
    1e76:	90 70       	andi	r25, 0x00	; 0
    1e78:	08 2e       	mov	r0, r24
    1e7a:	89 2f       	mov	r24, r25
    1e7c:	00 0c       	add	r0, r0
    1e7e:	88 1f       	adc	r24, r24
    1e80:	99 0b       	sbc	r25, r25
    1e82:	00 0c       	add	r0, r0
    1e84:	88 1f       	adc	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	98 2f       	mov	r25, r24
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	65 e0       	ldi	r22, 0x05	; 5
    1e8e:	49 2f       	mov	r20, r25
    1e90:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 7));
    1e94:	fe 01       	movw	r30, r28
    1e96:	ed 59       	subi	r30, 0x9D	; 157
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	80 81       	ld	r24, Z
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	99 27       	eor	r25, r25
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	82 e0       	ldi	r24, 0x02	; 2
    1ea6:	66 e0       	ldi	r22, 0x06	; 6
    1ea8:	49 2f       	mov	r20, r25
    1eaa:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ed 5b       	subi	r30, 0xBD	; 189
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a0 e8       	ldi	r26, 0x80	; 128
    1eba:	bf e3       	ldi	r27, 0x3F	; 63
    1ebc:	80 83       	st	Z, r24
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	a2 83       	std	Z+2, r26	; 0x02
    1ec2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	8e 01       	movw	r16, r28
    1ec6:	01 5c       	subi	r16, 0xC1	; 193
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ed 5b       	subi	r30, 0xBD	; 189
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4a ef       	ldi	r20, 0xFA	; 250
    1ede:	54 e4       	ldi	r21, 0x44	; 68
    1ee0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	f8 01       	movw	r30, r16
    1eea:	80 83       	st	Z, r24
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	a2 83       	std	Z+2, r26	; 0x02
    1ef0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ff 96       	adiw	r30, 0x3f	; 63
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9e af       	std	Y+62, r25	; 0x3e
    1f14:	8d af       	std	Y+61, r24	; 0x3d
    1f16:	46 c0       	rjmp	.+140    	; 0x1fa4 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ff 96       	adiw	r30, 0x3f	; 63
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	3f ef       	ldi	r19, 0xFF	; 255
    1f28:	4f e7       	ldi	r20, 0x7F	; 127
    1f2a:	57 e4       	ldi	r21, 0x47	; 71
    1f2c:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1f30:	18 16       	cp	r1, r24
    1f32:	64 f5       	brge	.+88     	; 0x1f8c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f34:	fe 01       	movw	r30, r28
    1f36:	ed 5b       	subi	r30, 0xBD	; 189
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e2       	ldi	r20, 0x20	; 32
    1f48:	51 e4       	ldi	r21, 0x41	; 65
    1f4a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9e af       	std	Y+62, r25	; 0x3e
    1f60:	8d af       	std	Y+61, r24	; 0x3d
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <LCD_sendCommand+0x478>
    1f64:	88 ec       	ldi	r24, 0xC8	; 200
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9c af       	std	Y+60, r25	; 0x3c
    1f6a:	8b af       	std	Y+59, r24	; 0x3b
    1f6c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f6e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD_sendCommand+0x466>
    1f74:	9c af       	std	Y+60, r25	; 0x3c
    1f76:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	9e af       	std	Y+62, r25	; 0x3e
    1f80:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	69 f7       	brne	.-38     	; 0x1f64 <LCD_sendCommand+0x45a>
    1f8a:	16 c0       	rjmp	.+44     	; 0x1fb8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ff 96       	adiw	r30, 0x3f	; 63
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9e af       	std	Y+62, r25	; 0x3e
    1fa2:	8d af       	std	Y+61, r24	; 0x3d
    1fa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fa8:	9a af       	std	Y+58, r25	; 0x3a
    1faa:	89 af       	std	Y+57, r24	; 0x39
    1fac:	89 ad       	ldd	r24, Y+57	; 0x39
    1fae:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_sendCommand+0x4a6>
    1fb4:	9a af       	std	Y+58, r25	; 0x3a
    1fb6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	bf e3       	ldi	r27, 0x3F	; 63
    1fca:	8d ab       	std	Y+53, r24	; 0x35
    1fcc:	9e ab       	std	Y+54, r25	; 0x36
    1fce:	af ab       	std	Y+55, r26	; 0x37
    1fd0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a ef       	ldi	r20, 0xFA	; 250
    1fe0:	54 e4       	ldi	r21, 0x44	; 68
    1fe2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	89 ab       	std	Y+49, r24	; 0x31
    1fec:	9a ab       	std	Y+50, r25	; 0x32
    1fee:	ab ab       	std	Y+51, r26	; 0x33
    1ff0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ff2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_sendCommand+0x50a>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	98 ab       	std	Y+48, r25	; 0x30
    2010:	8f a7       	std	Y+47, r24	; 0x2f
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2014:	69 a9       	ldd	r22, Y+49	; 0x31
    2016:	7a a9       	ldd	r23, Y+50	; 0x32
    2018:	8b a9       	ldd	r24, Y+51	; 0x33
    201a:	9c a9       	ldd	r25, Y+52	; 0x34
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6d a9       	ldd	r22, Y+53	; 0x35
    202e:	7e a9       	ldd	r23, Y+54	; 0x36
    2030:	8f a9       	ldd	r24, Y+55	; 0x37
    2032:	98 ad       	ldd	r25, Y+56	; 0x38
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	98 ab       	std	Y+48, r25	; 0x30
    2052:	8f a7       	std	Y+47, r24	; 0x2f
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_sendCommand+0x56a>
    2056:	88 ec       	ldi	r24, 0xC8	; 200
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9e a7       	std	Y+46, r25	; 0x2e
    205c:	8d a7       	std	Y+45, r24	; 0x2d
    205e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2060:	9e a5       	ldd	r25, Y+46	; 0x2e
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_sendCommand+0x558>
    2066:	9e a7       	std	Y+46, r25	; 0x2e
    2068:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8f a5       	ldd	r24, Y+47	; 0x2f
    206c:	98 a9       	ldd	r25, Y+48	; 0x30
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	98 ab       	std	Y+48, r25	; 0x30
    2072:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8f a5       	ldd	r24, Y+47	; 0x2f
    2076:	98 a9       	ldd	r25, Y+48	; 0x30
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_sendCommand+0x54c>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	69 a9       	ldd	r22, Y+49	; 0x31
    2080:	7a a9       	ldd	r23, Y+50	; 0x32
    2082:	8b a9       	ldd	r24, Y+51	; 0x33
    2084:	9c a9       	ldd	r25, Y+52	; 0x34
    2086:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	98 ab       	std	Y+48, r25	; 0x30
    2090:	8f a7       	std	Y+47, r24	; 0x2f
    2092:	8f a5       	ldd	r24, Y+47	; 0x2f
    2094:	98 a9       	ldd	r25, Y+48	; 0x30
    2096:	9c a7       	std	Y+44, r25	; 0x2c
    2098:	8b a7       	std	Y+43, r24	; 0x2b
    209a:	8b a5       	ldd	r24, Y+43	; 0x2b
    209c:	9c a5       	ldd	r25, Y+44	; 0x2c
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_sendCommand+0x594>
    20a2:	9c a7       	std	Y+44, r25	; 0x2c
    20a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	61 e0       	ldi	r22, 0x01	; 1
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a0 e8       	ldi	r26, 0x80	; 128
    20b6:	bf e3       	ldi	r27, 0x3F	; 63
    20b8:	8f a3       	std	Y+39, r24	; 0x27
    20ba:	98 a7       	std	Y+40, r25	; 0x28
    20bc:	a9 a7       	std	Y+41, r26	; 0x29
    20be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c0:	6f a1       	ldd	r22, Y+39	; 0x27
    20c2:	78 a5       	ldd	r23, Y+40	; 0x28
    20c4:	89 a5       	ldd	r24, Y+41	; 0x29
    20c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a ef       	ldi	r20, 0xFA	; 250
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8b a3       	std	Y+35, r24	; 0x23
    20da:	9c a3       	std	Y+36, r25	; 0x24
    20dc:	ad a3       	std	Y+37, r26	; 0x25
    20de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20e0:	6b a1       	ldd	r22, Y+35	; 0x23
    20e2:	7c a1       	ldd	r23, Y+36	; 0x24
    20e4:	8d a1       	ldd	r24, Y+37	; 0x25
    20e6:	9e a1       	ldd	r25, Y+38	; 0x26
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	2c f4       	brge	.+10     	; 0x2102 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2102:	6b a1       	ldd	r22, Y+35	; 0x23
    2104:	7c a1       	ldd	r23, Y+36	; 0x24
    2106:	8d a1       	ldd	r24, Y+37	; 0x25
    2108:	9e a1       	ldd	r25, Y+38	; 0x26
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	4c f5       	brge	.+82     	; 0x216c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	6f a1       	ldd	r22, Y+39	; 0x27
    211c:	78 a5       	ldd	r23, Y+40	; 0x28
    211e:	89 a5       	ldd	r24, Y+41	; 0x29
    2120:	9a a5       	ldd	r25, Y+42	; 0x2a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9a a3       	std	Y+34, r25	; 0x22
    2140:	89 a3       	std	Y+33, r24	; 0x21
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <LCD_sendCommand+0x658>
    2144:	88 ec       	ldi	r24, 0xC8	; 200
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	98 a3       	std	Y+32, r25	; 0x20
    214a:	8f 8f       	std	Y+31, r24	; 0x1f
    214c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    214e:	98 a1       	ldd	r25, Y+32	; 0x20
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <LCD_sendCommand+0x646>
    2154:	98 a3       	std	Y+32, r25	; 0x20
    2156:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	89 a1       	ldd	r24, Y+33	; 0x21
    215a:	9a a1       	ldd	r25, Y+34	; 0x22
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	9a a3       	std	Y+34, r25	; 0x22
    2160:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	89 a1       	ldd	r24, Y+33	; 0x21
    2164:	9a a1       	ldd	r25, Y+34	; 0x22
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	69 f7       	brne	.-38     	; 0x2144 <LCD_sendCommand+0x63a>
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	6b a1       	ldd	r22, Y+35	; 0x23
    216e:	7c a1       	ldd	r23, Y+36	; 0x24
    2170:	8d a1       	ldd	r24, Y+37	; 0x25
    2172:	9e a1       	ldd	r25, Y+38	; 0x26
    2174:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9a a3       	std	Y+34, r25	; 0x22
    217e:	89 a3       	std	Y+33, r24	; 0x21
    2180:	89 a1       	ldd	r24, Y+33	; 0x21
    2182:	9a a1       	ldd	r25, Y+34	; 0x22
    2184:	9e 8f       	std	Y+30, r25	; 0x1e
    2186:	8d 8f       	std	Y+29, r24	; 0x1d
    2188:	8d 8d       	ldd	r24, Y+29	; 0x1d
    218a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <LCD_sendCommand+0x682>
    2190:	9e 8f       	std	Y+30, r25	; 0x1e
    2192:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command, 0));
    2194:	fe 01       	movw	r30, r28
    2196:	ed 59       	subi	r30, 0x9D	; 157
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	98 2f       	mov	r25, r24
    219e:	91 70       	andi	r25, 0x01	; 1
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	63 e0       	ldi	r22, 0x03	; 3
    21a4:	49 2f       	mov	r20, r25
    21a6:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
    21aa:	fe 01       	movw	r30, r28
    21ac:	ed 59       	subi	r30, 0x9D	; 157
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	82 70       	andi	r24, 0x02	; 2
    21b8:	90 70       	andi	r25, 0x00	; 0
    21ba:	95 95       	asr	r25
    21bc:	87 95       	ror	r24
    21be:	98 2f       	mov	r25, r24
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	64 e0       	ldi	r22, 0x04	; 4
    21c4:	49 2f       	mov	r20, r25
    21c6:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
    21ca:	fe 01       	movw	r30, r28
    21cc:	ed 59       	subi	r30, 0x9D	; 157
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	88 2f       	mov	r24, r24
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	84 70       	andi	r24, 0x04	; 4
    21d8:	90 70       	andi	r25, 0x00	; 0
    21da:	95 95       	asr	r25
    21dc:	87 95       	ror	r24
    21de:	95 95       	asr	r25
    21e0:	87 95       	ror	r24
    21e2:	98 2f       	mov	r25, r24
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	65 e0       	ldi	r22, 0x05	; 5
    21e8:	49 2f       	mov	r20, r25
    21ea:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));
    21ee:	fe 01       	movw	r30, r28
    21f0:	ed 59       	subi	r30, 0x9D	; 157
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	88 2f       	mov	r24, r24
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	88 70       	andi	r24, 0x08	; 8
    21fc:	90 70       	andi	r25, 0x00	; 0
    21fe:	95 95       	asr	r25
    2200:	87 95       	ror	r24
    2202:	95 95       	asr	r25
    2204:	87 95       	ror	r24
    2206:	95 95       	asr	r25
    2208:	87 95       	ror	r24
    220a:	98 2f       	mov	r25, r24
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	66 e0       	ldi	r22, 0x06	; 6
    2210:	49 2f       	mov	r20, r25
    2212:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e8       	ldi	r26, 0x80	; 128
    221c:	bf e3       	ldi	r27, 0x3F	; 63
    221e:	89 8f       	std	Y+25, r24	; 0x19
    2220:	9a 8f       	std	Y+26, r25	; 0x1a
    2222:	ab 8f       	std	Y+27, r26	; 0x1b
    2224:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	69 8d       	ldd	r22, Y+25	; 0x19
    2228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8d 8b       	std	Y+21, r24	; 0x15
    2240:	9e 8b       	std	Y+22, r25	; 0x16
    2242:	af 8b       	std	Y+23, r26	; 0x17
    2244:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2246:	6d 89       	ldd	r22, Y+21	; 0x15
    2248:	7e 89       	ldd	r23, Y+22	; 0x16
    224a:	8f 89       	ldd	r24, Y+23	; 0x17
    224c:	98 8d       	ldd	r25, Y+24	; 0x18
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <LCD_sendCommand+0x75e>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9c 8b       	std	Y+20, r25	; 0x14
    2264:	8b 8b       	std	Y+19, r24	; 0x13
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2268:	6d 89       	ldd	r22, Y+21	; 0x15
    226a:	7e 89       	ldd	r23, Y+22	; 0x16
    226c:	8f 89       	ldd	r24, Y+23	; 0x17
    226e:	98 8d       	ldd	r25, Y+24	; 0x18
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	69 8d       	ldd	r22, Y+25	; 0x19
    2282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9c 8b       	std	Y+20, r25	; 0x14
    22a6:	8b 8b       	std	Y+19, r24	; 0x13
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <LCD_sendCommand+0x7be>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9a 8b       	std	Y+18, r25	; 0x12
    22b0:	89 8b       	std	Y+17, r24	; 0x11
    22b2:	89 89       	ldd	r24, Y+17	; 0x11
    22b4:	9a 89       	ldd	r25, Y+18	; 0x12
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_sendCommand+0x7ac>
    22ba:	9a 8b       	std	Y+18, r25	; 0x12
    22bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8b 89       	ldd	r24, Y+19	; 0x13
    22c0:	9c 89       	ldd	r25, Y+20	; 0x14
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9c 8b       	std	Y+20, r25	; 0x14
    22c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ca:	9c 89       	ldd	r25, Y+20	; 0x14
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <LCD_sendCommand+0x7a0>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9c 8b       	std	Y+20, r25	; 0x14
    22e4:	8b 8b       	std	Y+19, r24	; 0x13
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	98 8b       	std	Y+16, r25	; 0x10
    22ec:	8f 87       	std	Y+15, r24	; 0x0f
    22ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f0:	98 89       	ldd	r25, Y+16	; 0x10
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_sendCommand+0x7e8>
    22f6:	98 8b       	std	Y+16, r25	; 0x10
    22f8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a0 e8       	ldi	r26, 0x80	; 128
    230a:	bf e3       	ldi	r27, 0x3F	; 63
    230c:	8b 87       	std	Y+11, r24	; 0x0b
    230e:	9c 87       	std	Y+12, r25	; 0x0c
    2310:	ad 87       	std	Y+13, r26	; 0x0d
    2312:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2314:	6b 85       	ldd	r22, Y+11	; 0x0b
    2316:	7c 85       	ldd	r23, Y+12	; 0x0c
    2318:	8d 85       	ldd	r24, Y+13	; 0x0d
    231a:	9e 85       	ldd	r25, Y+14	; 0x0e
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	4a ef       	ldi	r20, 0xFA	; 250
    2322:	54 e4       	ldi	r21, 0x44	; 68
    2324:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	8f 83       	std	Y+7, r24	; 0x07
    232e:	98 87       	std	Y+8, r25	; 0x08
    2330:	a9 87       	std	Y+9, r26	; 0x09
    2332:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2334:	6f 81       	ldd	r22, Y+7	; 0x07
    2336:	78 85       	ldd	r23, Y+8	; 0x08
    2338:	89 85       	ldd	r24, Y+9	; 0x09
    233a:	9a 85       	ldd	r25, Y+10	; 0x0a
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	5f e3       	ldi	r21, 0x3F	; 63
    2344:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2348:	88 23       	and	r24, r24
    234a:	2c f4       	brge	.+10     	; 0x2356 <LCD_sendCommand+0x84c>
		__ticks = 1;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	3f c0       	rjmp	.+126    	; 0x23d4 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2356:	6f 81       	ldd	r22, Y+7	; 0x07
    2358:	78 85       	ldd	r23, Y+8	; 0x08
    235a:	89 85       	ldd	r24, Y+9	; 0x09
    235c:	9a 85       	ldd	r25, Y+10	; 0x0a
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	4f e7       	ldi	r20, 0x7F	; 127
    2364:	57 e4       	ldi	r21, 0x47	; 71
    2366:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    236a:	18 16       	cp	r1, r24
    236c:	4c f5       	brge	.+82     	; 0x23c0 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2370:	7c 85       	ldd	r23, Y+12	; 0x0c
    2372:	8d 85       	ldd	r24, Y+13	; 0x0d
    2374:	9e 85       	ldd	r25, Y+14	; 0x0e
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e2       	ldi	r20, 0x20	; 32
    237c:	51 e4       	ldi	r21, 0x41	; 65
    237e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
    2396:	0f c0       	rjmp	.+30     	; 0x23b6 <LCD_sendCommand+0x8ac>
    2398:	88 ec       	ldi	r24, 0xC8	; 200
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	8b 83       	std	Y+3, r24	; 0x03
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_sendCommand+0x89a>
    23a8:	9c 83       	std	Y+4, r25	; 0x04
    23aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	69 f7       	brne	.-38     	; 0x2398 <LCD_sendCommand+0x88e>
    23be:	14 c0       	rjmp	.+40     	; 0x23e8 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c0:	6f 81       	ldd	r22, Y+7	; 0x07
    23c2:	78 85       	ldd	r23, Y+8	; 0x08
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	9a 81       	ldd	r25, Y+2	; 0x02
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <LCD_sendCommand+0x8d6>
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23e8:	cd 59       	subi	r28, 0x9D	; 157
    23ea:	df 4f       	sbci	r29, 0xFF	; 255
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	1f 91       	pop	r17
    23fc:	0f 91       	pop	r16
    23fe:	08 95       	ret

00002400 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data) {
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	c3 56       	subi	r28, 0x63	; 99
    240e:	d0 40       	sbci	r29, 0x00	; 0
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	fe 01       	movw	r30, r28
    241c:	ed 59       	subi	r30, 0x9D	; 157
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	41 e0       	ldi	r20, 0x01	; 1
    2428:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    242c:	fe 01       	movw	r30, r28
    242e:	e1 5a       	subi	r30, 0xA1	; 161
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a0 e8       	ldi	r26, 0x80	; 128
    2438:	bf e3       	ldi	r27, 0x3F	; 63
    243a:	80 83       	st	Z, r24
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	a2 83       	std	Z+2, r26	; 0x02
    2440:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	8e 01       	movw	r16, r28
    2444:	05 5a       	subi	r16, 0xA5	; 165
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	fe 01       	movw	r30, r28
    244a:	e1 5a       	subi	r30, 0xA1	; 161
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a ef       	ldi	r20, 0xFA	; 250
    245c:	54 e4       	ldi	r21, 0x44	; 68
    245e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	f8 01       	movw	r30, r16
    2468:	80 83       	st	Z, r24
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	a2 83       	std	Z+2, r26	; 0x02
    246e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2470:	fe 01       	movw	r30, r28
    2472:	e5 5a       	subi	r30, 0xA5	; 165
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e8       	ldi	r20, 0x80	; 128
    2484:	5f e3       	ldi	r21, 0x3F	; 63
    2486:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    248a:	88 23       	and	r24, r24
    248c:	44 f4       	brge	.+16     	; 0x249e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    248e:	fe 01       	movw	r30, r28
    2490:	e7 5a       	subi	r30, 0xA7	; 167
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	80 83       	st	Z, r24
    249c:	64 c0       	rjmp	.+200    	; 0x2566 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    249e:	fe 01       	movw	r30, r28
    24a0:	e5 5a       	subi	r30, 0xA5	; 165
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	0c f0       	brlt	.+2      	; 0x24be <LCD_displayCharacter+0xbe>
    24bc:	43 c0       	rjmp	.+134    	; 0x2544 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	fe 01       	movw	r30, r28
    24c0:	e1 5a       	subi	r30, 0xA1	; 161
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	8e 01       	movw	r16, r28
    24de:	07 5a       	subi	r16, 0xA7	; 167
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	f8 01       	movw	r30, r16
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24
    24f4:	1f c0       	rjmp	.+62     	; 0x2534 <LCD_displayCharacter+0x134>
    24f6:	fe 01       	movw	r30, r28
    24f8:	e9 5a       	subi	r30, 0xA9	; 169
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	88 ec       	ldi	r24, 0xC8	; 200
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	80 83       	st	Z, r24
    2504:	fe 01       	movw	r30, r28
    2506:	e9 5a       	subi	r30, 0xA9	; 169
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_displayCharacter+0x10e>
    2512:	fe 01       	movw	r30, r28
    2514:	e9 5a       	subi	r30, 0xA9	; 169
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	de 01       	movw	r26, r28
    251e:	a7 5a       	subi	r26, 0xA7	; 167
    2520:	bf 4f       	sbci	r27, 0xFF	; 255
    2522:	fe 01       	movw	r30, r28
    2524:	e7 5a       	subi	r30, 0xA7	; 167
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	80 81       	ld	r24, Z
    252a:	91 81       	ldd	r25, Z+1	; 0x01
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	9c 93       	st	X, r25
    2532:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	fe 01       	movw	r30, r28
    2536:	e7 5a       	subi	r30, 0xA7	; 167
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	d1 f6       	brne	.-76     	; 0x24f6 <LCD_displayCharacter+0xf6>
    2542:	27 c0       	rjmp	.+78     	; 0x2592 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2544:	8e 01       	movw	r16, r28
    2546:	07 5a       	subi	r16, 0xA7	; 167
    2548:	1f 4f       	sbci	r17, 0xFF	; 255
    254a:	fe 01       	movw	r30, r28
    254c:	e5 5a       	subi	r30, 0xA5	; 165
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	60 81       	ld	r22, Z
    2552:	71 81       	ldd	r23, Z+1	; 0x01
    2554:	82 81       	ldd	r24, Z+2	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	f8 01       	movw	r30, r16
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
    2566:	de 01       	movw	r26, r28
    2568:	ab 5a       	subi	r26, 0xAB	; 171
    256a:	bf 4f       	sbci	r27, 0xFF	; 255
    256c:	fe 01       	movw	r30, r28
    256e:	e7 5a       	subi	r30, 0xA7	; 167
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	8d 93       	st	X+, r24
    2578:	9c 93       	st	X, r25
    257a:	fe 01       	movw	r30, r28
    257c:	eb 5a       	subi	r30, 0xAB	; 171
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_displayCharacter+0x184>
    2588:	fe 01       	movw	r30, r28
    258a:	eb 5a       	subi	r30, 0xAB	; 171
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    259c:	fe 01       	movw	r30, r28
    259e:	ef 5a       	subi	r30, 0xAF	; 175
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	a0 e8       	ldi	r26, 0x80	; 128
    25a8:	bf e3       	ldi	r27, 0x3F	; 63
    25aa:	80 83       	st	Z, r24
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	a2 83       	std	Z+2, r26	; 0x02
    25b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b2:	8e 01       	movw	r16, r28
    25b4:	03 5b       	subi	r16, 0xB3	; 179
    25b6:	1f 4f       	sbci	r17, 0xFF	; 255
    25b8:	fe 01       	movw	r30, r28
    25ba:	ef 5a       	subi	r30, 0xAF	; 175
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	4a ef       	ldi	r20, 0xFA	; 250
    25cc:	54 e4       	ldi	r21, 0x44	; 68
    25ce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	f8 01       	movw	r30, r16
    25d8:	80 83       	st	Z, r24
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	a2 83       	std	Z+2, r26	; 0x02
    25de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25e0:	fe 01       	movw	r30, r28
    25e2:	e3 5b       	subi	r30, 0xB3	; 179
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	44 f4       	brge	.+16     	; 0x260e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    25fe:	fe 01       	movw	r30, r28
    2600:	e5 5b       	subi	r30, 0xB5	; 181
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	80 83       	st	Z, r24
    260c:	64 c0       	rjmp	.+200    	; 0x26d6 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    260e:	fe 01       	movw	r30, r28
    2610:	e3 5b       	subi	r30, 0xB3	; 179
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	60 81       	ld	r22, Z
    2616:	71 81       	ldd	r23, Z+1	; 0x01
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	3f ef       	ldi	r19, 0xFF	; 255
    2620:	4f e7       	ldi	r20, 0x7F	; 127
    2622:	57 e4       	ldi	r21, 0x47	; 71
    2624:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2628:	18 16       	cp	r1, r24
    262a:	0c f0       	brlt	.+2      	; 0x262e <LCD_displayCharacter+0x22e>
    262c:	43 c0       	rjmp	.+134    	; 0x26b4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	fe 01       	movw	r30, r28
    2630:	ef 5a       	subi	r30, 0xAF	; 175
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e2       	ldi	r20, 0x20	; 32
    2642:	51 e4       	ldi	r21, 0x41	; 65
    2644:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8e 01       	movw	r16, r28
    264e:	05 5b       	subi	r16, 0xB5	; 181
    2650:	1f 4f       	sbci	r17, 0xFF	; 255
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	f8 01       	movw	r30, r16
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24
    2664:	1f c0       	rjmp	.+62     	; 0x26a4 <LCD_displayCharacter+0x2a4>
    2666:	fe 01       	movw	r30, r28
    2668:	e7 5b       	subi	r30, 0xB7	; 183
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	88 ec       	ldi	r24, 0xC8	; 200
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
    2674:	fe 01       	movw	r30, r28
    2676:	e7 5b       	subi	r30, 0xB7	; 183
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <LCD_displayCharacter+0x27e>
    2682:	fe 01       	movw	r30, r28
    2684:	e7 5b       	subi	r30, 0xB7	; 183
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268c:	de 01       	movw	r26, r28
    268e:	a5 5b       	subi	r26, 0xB5	; 181
    2690:	bf 4f       	sbci	r27, 0xFF	; 255
    2692:	fe 01       	movw	r30, r28
    2694:	e5 5b       	subi	r30, 0xB5	; 181
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 81       	ld	r24, Z
    269a:	91 81       	ldd	r25, Z+1	; 0x01
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	11 96       	adiw	r26, 0x01	; 1
    26a0:	9c 93       	st	X, r25
    26a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	fe 01       	movw	r30, r28
    26a6:	e5 5b       	subi	r30, 0xB5	; 181
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	91 81       	ldd	r25, Z+1	; 0x01
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	d1 f6       	brne	.-76     	; 0x2666 <LCD_displayCharacter+0x266>
    26b2:	27 c0       	rjmp	.+78     	; 0x2702 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	8e 01       	movw	r16, r28
    26b6:	05 5b       	subi	r16, 0xB5	; 181
    26b8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ba:	fe 01       	movw	r30, r28
    26bc:	e3 5b       	subi	r30, 0xB3	; 179
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	60 81       	ld	r22, Z
    26c2:	71 81       	ldd	r23, Z+1	; 0x01
    26c4:	82 81       	ldd	r24, Z+2	; 0x02
    26c6:	93 81       	ldd	r25, Z+3	; 0x03
    26c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	f8 01       	movw	r30, r16
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
    26d6:	de 01       	movw	r26, r28
    26d8:	a9 5b       	subi	r26, 0xB9	; 185
    26da:	bf 4f       	sbci	r27, 0xFF	; 255
    26dc:	fe 01       	movw	r30, r28
    26de:	e5 5b       	subi	r30, 0xB5	; 181
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 81       	ld	r24, Z
    26e4:	91 81       	ldd	r25, Z+1	; 0x01
    26e6:	8d 93       	st	X+, r24
    26e8:	9c 93       	st	X, r25
    26ea:	fe 01       	movw	r30, r28
    26ec:	e9 5b       	subi	r30, 0xB9	; 185
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <LCD_displayCharacter+0x2f4>
    26f8:	fe 01       	movw	r30, r28
    26fa:	e9 5b       	subi	r30, 0xB9	; 185
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 4));
    2702:	fe 01       	movw	r30, r28
    2704:	ed 59       	subi	r30, 0x9D	; 157
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	88 2f       	mov	r24, r24
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	80 71       	andi	r24, 0x10	; 16
    2710:	90 70       	andi	r25, 0x00	; 0
    2712:	95 95       	asr	r25
    2714:	87 95       	ror	r24
    2716:	95 95       	asr	r25
    2718:	87 95       	ror	r24
    271a:	95 95       	asr	r25
    271c:	87 95       	ror	r24
    271e:	95 95       	asr	r25
    2720:	87 95       	ror	r24
    2722:	98 2f       	mov	r25, r24
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	63 e0       	ldi	r22, 0x03	; 3
    2728:	49 2f       	mov	r20, r25
    272a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 5));
    272e:	fe 01       	movw	r30, r28
    2730:	ed 59       	subi	r30, 0x9D	; 157
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	88 2f       	mov	r24, r24
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	80 72       	andi	r24, 0x20	; 32
    273c:	90 70       	andi	r25, 0x00	; 0
    273e:	95 95       	asr	r25
    2740:	87 95       	ror	r24
    2742:	95 95       	asr	r25
    2744:	87 95       	ror	r24
    2746:	95 95       	asr	r25
    2748:	87 95       	ror	r24
    274a:	95 95       	asr	r25
    274c:	87 95       	ror	r24
    274e:	95 95       	asr	r25
    2750:	87 95       	ror	r24
    2752:	98 2f       	mov	r25, r24
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	64 e0       	ldi	r22, 0x04	; 4
    2758:	49 2f       	mov	r20, r25
    275a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 6));
    275e:	fe 01       	movw	r30, r28
    2760:	ed 59       	subi	r30, 0x9D	; 157
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	88 2f       	mov	r24, r24
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	80 74       	andi	r24, 0x40	; 64
    276c:	90 70       	andi	r25, 0x00	; 0
    276e:	08 2e       	mov	r0, r24
    2770:	89 2f       	mov	r24, r25
    2772:	00 0c       	add	r0, r0
    2774:	88 1f       	adc	r24, r24
    2776:	99 0b       	sbc	r25, r25
    2778:	00 0c       	add	r0, r0
    277a:	88 1f       	adc	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	98 2f       	mov	r25, r24
    2780:	82 e0       	ldi	r24, 0x02	; 2
    2782:	65 e0       	ldi	r22, 0x05	; 5
    2784:	49 2f       	mov	r20, r25
    2786:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 7));
    278a:	fe 01       	movw	r30, r28
    278c:	ed 59       	subi	r30, 0x9D	; 157
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	98 2f       	mov	r25, r24
    2794:	99 1f       	adc	r25, r25
    2796:	99 27       	eor	r25, r25
    2798:	99 1f       	adc	r25, r25
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	66 e0       	ldi	r22, 0x06	; 6
    279e:	49 2f       	mov	r20, r25
    27a0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    27a4:	fe 01       	movw	r30, r28
    27a6:	ed 5b       	subi	r30, 0xBD	; 189
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a0 e8       	ldi	r26, 0x80	; 128
    27b0:	bf e3       	ldi	r27, 0x3F	; 63
    27b2:	80 83       	st	Z, r24
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	a2 83       	std	Z+2, r26	; 0x02
    27b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	8e 01       	movw	r16, r28
    27bc:	01 5c       	subi	r16, 0xC1	; 193
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
    27c0:	fe 01       	movw	r30, r28
    27c2:	ed 5b       	subi	r30, 0xBD	; 189
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a ef       	ldi	r20, 0xFA	; 250
    27d4:	54 e4       	ldi	r21, 0x44	; 68
    27d6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	f8 01       	movw	r30, r16
    27e0:	80 83       	st	Z, r24
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	a2 83       	std	Z+2, r26	; 0x02
    27e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e8:	fe 01       	movw	r30, r28
    27ea:	ff 96       	adiw	r30, 0x3f	; 63
    27ec:	60 81       	ld	r22, Z
    27ee:	71 81       	ldd	r23, Z+1	; 0x01
    27f0:	82 81       	ldd	r24, Z+2	; 0x02
    27f2:	93 81       	ldd	r25, Z+3	; 0x03
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9e af       	std	Y+62, r25	; 0x3e
    280a:	8d af       	std	Y+61, r24	; 0x3d
    280c:	46 c0       	rjmp	.+140    	; 0x289a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    280e:	fe 01       	movw	r30, r28
    2810:	ff 96       	adiw	r30, 0x3f	; 63
    2812:	60 81       	ld	r22, Z
    2814:	71 81       	ldd	r23, Z+1	; 0x01
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	64 f5       	brge	.+88     	; 0x2882 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	fe 01       	movw	r30, r28
    282c:	ed 5b       	subi	r30, 0xBD	; 189
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	93 81       	ldd	r25, Z+3	; 0x03
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e2       	ldi	r20, 0x20	; 32
    283e:	51 e4       	ldi	r21, 0x41	; 65
    2840:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9e af       	std	Y+62, r25	; 0x3e
    2856:	8d af       	std	Y+61, r24	; 0x3d
    2858:	0f c0       	rjmp	.+30     	; 0x2878 <LCD_displayCharacter+0x478>
    285a:	88 ec       	ldi	r24, 0xC8	; 200
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9c af       	std	Y+60, r25	; 0x3c
    2860:	8b af       	std	Y+59, r24	; 0x3b
    2862:	8b ad       	ldd	r24, Y+59	; 0x3b
    2864:	9c ad       	ldd	r25, Y+60	; 0x3c
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <LCD_displayCharacter+0x466>
    286a:	9c af       	std	Y+60, r25	; 0x3c
    286c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2870:	9e ad       	ldd	r25, Y+62	; 0x3e
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	9e af       	std	Y+62, r25	; 0x3e
    2876:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2878:	8d ad       	ldd	r24, Y+61	; 0x3d
    287a:	9e ad       	ldd	r25, Y+62	; 0x3e
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	69 f7       	brne	.-38     	; 0x285a <LCD_displayCharacter+0x45a>
    2880:	16 c0       	rjmp	.+44     	; 0x28ae <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2882:	fe 01       	movw	r30, r28
    2884:	ff 96       	adiw	r30, 0x3f	; 63
    2886:	60 81       	ld	r22, Z
    2888:	71 81       	ldd	r23, Z+1	; 0x01
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	93 81       	ldd	r25, Z+3	; 0x03
    288e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9e af       	std	Y+62, r25	; 0x3e
    2898:	8d af       	std	Y+61, r24	; 0x3d
    289a:	8d ad       	ldd	r24, Y+61	; 0x3d
    289c:	9e ad       	ldd	r25, Y+62	; 0x3e
    289e:	9a af       	std	Y+58, r25	; 0x3a
    28a0:	89 af       	std	Y+57, r24	; 0x39
    28a2:	89 ad       	ldd	r24, Y+57	; 0x39
    28a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_displayCharacter+0x4a6>
    28aa:	9a af       	std	Y+58, r25	; 0x3a
    28ac:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    28ae:	82 e0       	ldi	r24, 0x02	; 2
    28b0:	61 e0       	ldi	r22, 0x01	; 1
    28b2:	40 e0       	ldi	r20, 0x00	; 0
    28b4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	a0 e8       	ldi	r26, 0x80	; 128
    28be:	bf e3       	ldi	r27, 0x3F	; 63
    28c0:	8d ab       	std	Y+53, r24	; 0x35
    28c2:	9e ab       	std	Y+54, r25	; 0x36
    28c4:	af ab       	std	Y+55, r26	; 0x37
    28c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c8:	6d a9       	ldd	r22, Y+53	; 0x35
    28ca:	7e a9       	ldd	r23, Y+54	; 0x36
    28cc:	8f a9       	ldd	r24, Y+55	; 0x37
    28ce:	98 ad       	ldd	r25, Y+56	; 0x38
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	4a ef       	ldi	r20, 0xFA	; 250
    28d6:	54 e4       	ldi	r21, 0x44	; 68
    28d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	89 ab       	std	Y+49, r24	; 0x31
    28e2:	9a ab       	std	Y+50, r25	; 0x32
    28e4:	ab ab       	std	Y+51, r26	; 0x33
    28e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28e8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ea:	7a a9       	ldd	r23, Y+50	; 0x32
    28ec:	8b a9       	ldd	r24, Y+51	; 0x33
    28ee:	9c a9       	ldd	r25, Y+52	; 0x34
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e8       	ldi	r20, 0x80	; 128
    28f6:	5f e3       	ldi	r21, 0x3F	; 63
    28f8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    28fc:	88 23       	and	r24, r24
    28fe:	2c f4       	brge	.+10     	; 0x290a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	98 ab       	std	Y+48, r25	; 0x30
    2906:	8f a7       	std	Y+47, r24	; 0x2f
    2908:	3f c0       	rjmp	.+126    	; 0x2988 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    290a:	69 a9       	ldd	r22, Y+49	; 0x31
    290c:	7a a9       	ldd	r23, Y+50	; 0x32
    290e:	8b a9       	ldd	r24, Y+51	; 0x33
    2910:	9c a9       	ldd	r25, Y+52	; 0x34
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	3f ef       	ldi	r19, 0xFF	; 255
    2916:	4f e7       	ldi	r20, 0x7F	; 127
    2918:	57 e4       	ldi	r21, 0x47	; 71
    291a:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    291e:	18 16       	cp	r1, r24
    2920:	4c f5       	brge	.+82     	; 0x2974 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2922:	6d a9       	ldd	r22, Y+53	; 0x35
    2924:	7e a9       	ldd	r23, Y+54	; 0x36
    2926:	8f a9       	ldd	r24, Y+55	; 0x37
    2928:	98 ad       	ldd	r25, Y+56	; 0x38
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e2       	ldi	r20, 0x20	; 32
    2930:	51 e4       	ldi	r21, 0x41	; 65
    2932:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	bc 01       	movw	r22, r24
    293c:	cd 01       	movw	r24, r26
    293e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	98 ab       	std	Y+48, r25	; 0x30
    2948:	8f a7       	std	Y+47, r24	; 0x2f
    294a:	0f c0       	rjmp	.+30     	; 0x296a <LCD_displayCharacter+0x56a>
    294c:	88 ec       	ldi	r24, 0xC8	; 200
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9e a7       	std	Y+46, r25	; 0x2e
    2952:	8d a7       	std	Y+45, r24	; 0x2d
    2954:	8d a5       	ldd	r24, Y+45	; 0x2d
    2956:	9e a5       	ldd	r25, Y+46	; 0x2e
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <LCD_displayCharacter+0x558>
    295c:	9e a7       	std	Y+46, r25	; 0x2e
    295e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2960:	8f a5       	ldd	r24, Y+47	; 0x2f
    2962:	98 a9       	ldd	r25, Y+48	; 0x30
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	98 ab       	std	Y+48, r25	; 0x30
    2968:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296a:	8f a5       	ldd	r24, Y+47	; 0x2f
    296c:	98 a9       	ldd	r25, Y+48	; 0x30
    296e:	00 97       	sbiw	r24, 0x00	; 0
    2970:	69 f7       	brne	.-38     	; 0x294c <LCD_displayCharacter+0x54c>
    2972:	14 c0       	rjmp	.+40     	; 0x299c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2974:	69 a9       	ldd	r22, Y+49	; 0x31
    2976:	7a a9       	ldd	r23, Y+50	; 0x32
    2978:	8b a9       	ldd	r24, Y+51	; 0x33
    297a:	9c a9       	ldd	r25, Y+52	; 0x34
    297c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	98 ab       	std	Y+48, r25	; 0x30
    2986:	8f a7       	std	Y+47, r24	; 0x2f
    2988:	8f a5       	ldd	r24, Y+47	; 0x2f
    298a:	98 a9       	ldd	r25, Y+48	; 0x30
    298c:	9c a7       	std	Y+44, r25	; 0x2c
    298e:	8b a7       	std	Y+43, r24	; 0x2b
    2990:	8b a5       	ldd	r24, Y+43	; 0x2b
    2992:	9c a5       	ldd	r25, Y+44	; 0x2c
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <LCD_displayCharacter+0x594>
    2998:	9c a7       	std	Y+44, r25	; 0x2c
    299a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e8       	ldi	r26, 0x80	; 128
    29ac:	bf e3       	ldi	r27, 0x3F	; 63
    29ae:	8f a3       	std	Y+39, r24	; 0x27
    29b0:	98 a7       	std	Y+40, r25	; 0x28
    29b2:	a9 a7       	std	Y+41, r26	; 0x29
    29b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	6f a1       	ldd	r22, Y+39	; 0x27
    29b8:	78 a5       	ldd	r23, Y+40	; 0x28
    29ba:	89 a5       	ldd	r24, Y+41	; 0x29
    29bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a ef       	ldi	r20, 0xFA	; 250
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8b a3       	std	Y+35, r24	; 0x23
    29d0:	9c a3       	std	Y+36, r25	; 0x24
    29d2:	ad a3       	std	Y+37, r26	; 0x25
    29d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29d6:	6b a1       	ldd	r22, Y+35	; 0x23
    29d8:	7c a1       	ldd	r23, Y+36	; 0x24
    29da:	8d a1       	ldd	r24, Y+37	; 0x25
    29dc:	9e a1       	ldd	r25, Y+38	; 0x26
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9a a3       	std	Y+34, r25	; 0x22
    29f4:	89 a3       	std	Y+33, r24	; 0x21
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    29f8:	6b a1       	ldd	r22, Y+35	; 0x23
    29fa:	7c a1       	ldd	r23, Y+36	; 0x24
    29fc:	8d a1       	ldd	r24, Y+37	; 0x25
    29fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	6f a1       	ldd	r22, Y+39	; 0x27
    2a12:	78 a5       	ldd	r23, Y+40	; 0x28
    2a14:	89 a5       	ldd	r24, Y+41	; 0x29
    2a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9a a3       	std	Y+34, r25	; 0x22
    2a36:	89 a3       	std	Y+33, r24	; 0x21
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <LCD_displayCharacter+0x658>
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	98 a3       	std	Y+32, r25	; 0x20
    2a40:	8f 8f       	std	Y+31, r24	; 0x1f
    2a42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a44:	98 a1       	ldd	r25, Y+32	; 0x20
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <LCD_displayCharacter+0x646>
    2a4a:	98 a3       	std	Y+32, r25	; 0x20
    2a4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a50:	9a a1       	ldd	r25, Y+34	; 0x22
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <LCD_displayCharacter+0x63a>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6b a1       	ldd	r22, Y+35	; 0x23
    2a64:	7c a1       	ldd	r23, Y+36	; 0x24
    2a66:	8d a1       	ldd	r24, Y+37	; 0x25
    2a68:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9a a3       	std	Y+34, r25	; 0x22
    2a74:	89 a3       	std	Y+33, r24	; 0x21
    2a76:	89 a1       	ldd	r24, Y+33	; 0x21
    2a78:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a7c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_displayCharacter+0x682>
    2a86:	9e 8f       	std	Y+30, r25	; 0x1e
    2a88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data, 0));
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ed 59       	subi	r30, 0x9D	; 157
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	98 2f       	mov	r25, r24
    2a94:	91 70       	andi	r25, 0x01	; 1
    2a96:	82 e0       	ldi	r24, 0x02	; 2
    2a98:	63 e0       	ldi	r22, 0x03	; 3
    2a9a:	49 2f       	mov	r20, r25
    2a9c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ed 59       	subi	r30, 0x9D	; 157
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	88 2f       	mov	r24, r24
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	82 70       	andi	r24, 0x02	; 2
    2aae:	90 70       	andi	r25, 0x00	; 0
    2ab0:	95 95       	asr	r25
    2ab2:	87 95       	ror	r24
    2ab4:	98 2f       	mov	r25, r24
    2ab6:	82 e0       	ldi	r24, 0x02	; 2
    2ab8:	64 e0       	ldi	r22, 0x04	; 4
    2aba:	49 2f       	mov	r20, r25
    2abc:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	ed 59       	subi	r30, 0x9D	; 157
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	84 70       	andi	r24, 0x04	; 4
    2ace:	90 70       	andi	r25, 0x00	; 0
    2ad0:	95 95       	asr	r25
    2ad2:	87 95       	ror	r24
    2ad4:	95 95       	asr	r25
    2ad6:	87 95       	ror	r24
    2ad8:	98 2f       	mov	r25, r24
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	65 e0       	ldi	r22, 0x05	; 5
    2ade:	49 2f       	mov	r20, r25
    2ae0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	ed 59       	subi	r30, 0x9D	; 157
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 81       	ld	r24, Z
    2aec:	88 2f       	mov	r24, r24
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	88 70       	andi	r24, 0x08	; 8
    2af2:	90 70       	andi	r25, 0x00	; 0
    2af4:	95 95       	asr	r25
    2af6:	87 95       	ror	r24
    2af8:	95 95       	asr	r25
    2afa:	87 95       	ror	r24
    2afc:	95 95       	asr	r25
    2afe:	87 95       	ror	r24
    2b00:	98 2f       	mov	r25, r24
    2b02:	82 e0       	ldi	r24, 0x02	; 2
    2b04:	66 e0       	ldi	r22, 0x06	; 6
    2b06:	49 2f       	mov	r20, r25
    2b08:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a0 e8       	ldi	r26, 0x80	; 128
    2b12:	bf e3       	ldi	r27, 0x3F	; 63
    2b14:	89 8f       	std	Y+25, r24	; 0x19
    2b16:	9a 8f       	std	Y+26, r25	; 0x1a
    2b18:	ab 8f       	std	Y+27, r26	; 0x1b
    2b1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4a ef       	ldi	r20, 0xFA	; 250
    2b2a:	54 e4       	ldi	r21, 0x44	; 68
    2b2c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8d 8b       	std	Y+21, r24	; 0x15
    2b36:	9e 8b       	std	Y+22, r25	; 0x16
    2b38:	af 8b       	std	Y+23, r26	; 0x17
    2b3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b40:	8f 89       	ldd	r24, Y+23	; 0x17
    2b42:	98 8d       	ldd	r25, Y+24	; 0x18
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	2c f4       	brge	.+10     	; 0x2b5e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
    2b5c:	3f c0       	rjmp	.+126    	; 0x2bdc <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2b5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b60:	7e 89       	ldd	r23, Y+22	; 0x16
    2b62:	8f 89       	ldd	r24, Y+23	; 0x17
    2b64:	98 8d       	ldd	r25, Y+24	; 0x18
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	4c f5       	brge	.+82     	; 0x2bc8 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	69 8d       	ldd	r22, Y+25	; 0x19
    2b78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e2       	ldi	r20, 0x20	; 32
    2b84:	51 e4       	ldi	r21, 0x41	; 65
    2b86:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9c 8b       	std	Y+20, r25	; 0x14
    2b9c:	8b 8b       	std	Y+19, r24	; 0x13
    2b9e:	0f c0       	rjmp	.+30     	; 0x2bbe <LCD_displayCharacter+0x7be>
    2ba0:	88 ec       	ldi	r24, 0xC8	; 200
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9a 8b       	std	Y+18, r25	; 0x12
    2ba6:	89 8b       	std	Y+17, r24	; 0x11
    2ba8:	89 89       	ldd	r24, Y+17	; 0x11
    2baa:	9a 89       	ldd	r25, Y+18	; 0x12
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <LCD_displayCharacter+0x7ac>
    2bb0:	9a 8b       	std	Y+18, r25	; 0x12
    2bb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	9c 8b       	std	Y+20, r25	; 0x14
    2bbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	69 f7       	brne	.-38     	; 0x2ba0 <LCD_displayCharacter+0x7a0>
    2bc6:	14 c0       	rjmp	.+40     	; 0x2bf0 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bca:	7e 89       	ldd	r23, Y+22	; 0x16
    2bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bce:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9c 8b       	std	Y+20, r25	; 0x14
    2bda:	8b 8b       	std	Y+19, r24	; 0x13
    2bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bde:	9c 89       	ldd	r25, Y+20	; 0x14
    2be0:	98 8b       	std	Y+16, r25	; 0x10
    2be2:	8f 87       	std	Y+15, r24	; 0x0f
    2be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be6:	98 89       	ldd	r25, Y+16	; 0x10
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <LCD_displayCharacter+0x7e8>
    2bec:	98 8b       	std	Y+16, r25	; 0x10
    2bee:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2bf0:	82 e0       	ldi	r24, 0x02	; 2
    2bf2:	61 e0       	ldi	r22, 0x01	; 1
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	a0 e8       	ldi	r26, 0x80	; 128
    2c00:	bf e3       	ldi	r27, 0x3F	; 63
    2c02:	8b 87       	std	Y+11, r24	; 0x0b
    2c04:	9c 87       	std	Y+12, r25	; 0x0c
    2c06:	ad 87       	std	Y+13, r26	; 0x0d
    2c08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	4a ef       	ldi	r20, 0xFA	; 250
    2c18:	54 e4       	ldi	r21, 0x44	; 68
    2c1a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	8f 83       	std	Y+7, r24	; 0x07
    2c24:	98 87       	std	Y+8, r25	; 0x08
    2c26:	a9 87       	std	Y+9, r26	; 0x09
    2c28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2c:	78 85       	ldd	r23, Y+8	; 0x08
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e8       	ldi	r20, 0x80	; 128
    2c38:	5f e3       	ldi	r21, 0x3F	; 63
    2c3a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2c3e:	88 23       	and	r24, r24
    2c40:	2c f4       	brge	.+10     	; 0x2c4c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	3f c0       	rjmp	.+126    	; 0x2cca <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4e:	78 85       	ldd	r23, Y+8	; 0x08
    2c50:	89 85       	ldd	r24, Y+9	; 0x09
    2c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	3f ef       	ldi	r19, 0xFF	; 255
    2c58:	4f e7       	ldi	r20, 0x7F	; 127
    2c5a:	57 e4       	ldi	r21, 0x47	; 71
    2c5c:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2c60:	18 16       	cp	r1, r24
    2c62:	4c f5       	brge	.+82     	; 0x2cb6 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e2       	ldi	r20, 0x20	; 32
    2c72:	51 e4       	ldi	r21, 0x41	; 65
    2c74:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	bc 01       	movw	r22, r24
    2c7e:	cd 01       	movw	r24, r26
    2c80:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
    2c8c:	0f c0       	rjmp	.+30     	; 0x2cac <LCD_displayCharacter+0x8ac>
    2c8e:	88 ec       	ldi	r24, 0xC8	; 200
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	9c 83       	std	Y+4, r25	; 0x04
    2c94:	8b 83       	std	Y+3, r24	; 0x03
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <LCD_displayCharacter+0x89a>
    2c9e:	9c 83       	std	Y+4, r25	; 0x04
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cac:	8d 81       	ldd	r24, Y+5	; 0x05
    2cae:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	69 f7       	brne	.-38     	; 0x2c8e <LCD_displayCharacter+0x88e>
    2cb4:	14 c0       	rjmp	.+40     	; 0x2cde <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb8:	78 85       	ldd	r23, Y+8	; 0x08
    2cba:	89 85       	ldd	r24, Y+9	; 0x09
    2cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	9e 83       	std	Y+6, r25	; 0x06
    2cc8:	8d 83       	std	Y+5, r24	; 0x05
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	9a 83       	std	Y+2, r25	; 0x02
    2cd0:	89 83       	std	Y+1, r24	; 0x01
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_displayCharacter+0x8d6>
    2cda:	9a 83       	std	Y+2, r25	; 0x02
    2cdc:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2cde:	cd 59       	subi	r28, 0x9D	; 157
    2ce0:	df 4f       	sbci	r29, 0xFF	; 255
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	08 95       	ret

00002cf6 <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <LCD_displayString+0x6>
    2cfc:	0f 92       	push	r0
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	9b 83       	std	Y+3, r25	; 0x03
    2d04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d06:	19 82       	std	Y+1, r1	; 0x01
    2d08:	0e c0       	rjmp	.+28     	; 0x2d26 <LCD_displayString+0x30>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	fc 01       	movw	r30, r24
    2d16:	e2 0f       	add	r30, r18
    2d18:	f3 1f       	adc	r31, r19
    2d1a:	80 81       	ld	r24, Z
    2d1c:	0e 94 00 12 	call	0x2400	; 0x2400 <LCD_displayCharacter>
		i++;
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	8f 5f       	subi	r24, 0xFF	; 255
    2d24:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d30:	fc 01       	movw	r30, r24
    2d32:	e2 0f       	add	r30, r18
    2d34:	f3 1f       	adc	r31, r19
    2d36:	80 81       	ld	r24, Z
    2d38:	88 23       	and	r24, r24
    2d3a:	39 f7       	brne	.-50     	; 0x2d0a <LCD_displayString+0x14>
	 {
	 LCD_displayCharacter(*Str);
	 Str++;
	 }
	 *********************************************************/
}
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col) {
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <LCD_moveCursor+0x6>
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <LCD_moveCursor+0x8>
    2d50:	0f 92       	push	r0
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	8a 83       	std	Y+2, r24	; 0x02
    2d58:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	3d 83       	std	Y+5, r19	; 0x05
    2d62:	2c 83       	std	Y+4, r18	; 0x04
    2d64:	8c 81       	ldd	r24, Y+4	; 0x04
    2d66:	9d 81       	ldd	r25, Y+5	; 0x05
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	c1 f0       	breq	.+48     	; 0x2d9e <LCD_moveCursor+0x56>
    2d6e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d70:	3d 81       	ldd	r19, Y+5	; 0x05
    2d72:	22 30       	cpi	r18, 0x02	; 2
    2d74:	31 05       	cpc	r19, r1
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <LCD_moveCursor+0x3a>
    2d78:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	61 f0       	breq	.+24     	; 0x2d98 <LCD_moveCursor+0x50>
    2d80:	19 c0       	rjmp	.+50     	; 0x2db4 <LCD_moveCursor+0x6c>
    2d82:	2c 81       	ldd	r18, Y+4	; 0x04
    2d84:	3d 81       	ldd	r19, Y+5	; 0x05
    2d86:	22 30       	cpi	r18, 0x02	; 2
    2d88:	31 05       	cpc	r19, r1
    2d8a:	69 f0       	breq	.+26     	; 0x2da6 <LCD_moveCursor+0x5e>
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d90:	83 30       	cpi	r24, 0x03	; 3
    2d92:	91 05       	cpc	r25, r1
    2d94:	61 f0       	breq	.+24     	; 0x2dae <LCD_moveCursor+0x66>
    2d96:	0e c0       	rjmp	.+28     	; 0x2db4 <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	89 83       	std	Y+1, r24	; 0x01
    2d9c:	0b c0       	rjmp	.+22     	; 0x2db4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	80 5c       	subi	r24, 0xC0	; 192
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	07 c0       	rjmp	.+14     	; 0x2db4 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	80 5f       	subi	r24, 0xF0	; 240
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	03 c0       	rjmp	.+6      	; 0x2db4 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	80 5b       	subi	r24, 0xB0	; 176
    2db2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	80 68       	ori	r24, 0x80	; 128
    2db8:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_sendCommand>
}
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <LCD_displayStringRowColumn+0x6>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <LCD_displayStringRowColumn+0x8>
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	6a 83       	std	Y+2, r22	; 0x02
    2ddc:	5c 83       	std	Y+4, r21	; 0x04
    2dde:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	6a 81       	ldd	r22, Y+2	; 0x02
    2de4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	9c 81       	ldd	r25, Y+4	; 0x04
    2dec:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
}
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data) {
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	62 97       	sbiw	r28, 0x12	; 18
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	f8 94       	cli
    2e0c:	de bf       	out	0x3e, r29	; 62
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	cd bf       	out	0x3d, r28	; 61
    2e12:	9a 8b       	std	Y+18, r25	; 0x12
    2e14:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e16:	89 89       	ldd	r24, Y+17	; 0x11
    2e18:	9a 89       	ldd	r25, Y+18	; 0x12
    2e1a:	9e 01       	movw	r18, r28
    2e1c:	2f 5f       	subi	r18, 0xFF	; 255
    2e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e20:	b9 01       	movw	r22, r18
    2e22:	4a e0       	ldi	r20, 0x0A	; 10
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	0e 94 03 22 	call	0x4406	; 0x4406 <itoa>
	LCD_displayString(buff); /* Display the string */
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>

}
    2e32:	62 96       	adiw	r28, 0x12	; 18
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <LCD_floatToString>:

/*
 * Description :
 * Display the required Float decimal value on the screen
 */
void LCD_floatToString(float32 data) {
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	64 97       	sbiw	r28, 0x14	; 20
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	69 8b       	std	Y+17, r22	; 0x11
    2e5e:	7a 8b       	std	Y+18, r23	; 0x12
    2e60:	8b 8b       	std	Y+19, r24	; 0x13
    2e62:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	dtostrf(data, 6, 3, buff); /* Use dtostrf C function to convert the data to its corresponding ASCII value, 10 for float decimal */
    2e64:	89 89       	ldd	r24, Y+17	; 0x11
    2e66:	9a 89       	ldd	r25, Y+18	; 0x12
    2e68:	ab 89       	ldd	r26, Y+19	; 0x13
    2e6a:	bc 89       	ldd	r27, Y+20	; 0x14
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	46 e0       	ldi	r20, 0x06	; 6
    2e72:	50 e0       	ldi	r21, 0x00	; 0
    2e74:	23 e0       	ldi	r18, 0x03	; 3
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	fe 01       	movw	r30, r28
    2e7a:	31 96       	adiw	r30, 0x01	; 1
    2e7c:	8f 01       	movw	r16, r30
    2e7e:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <dtostrf>
	LCD_displayString(buff); /* Display the string */
    2e82:	ce 01       	movw	r24, r28
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
}
    2e8a:	64 96       	adiw	r28, 0x14	; 20
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	1f 91       	pop	r17
    2e9c:	0f 91       	pop	r16
    2e9e:	08 95       	ret

00002ea0 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void) {
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_sendCommand>
}
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void) {
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	60 97       	sbiw	r28, 0x10	; 16
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	64 e0       	ldi	r22, 0x04	; 4
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	65 e0       	ldi	r22, 0x05	; 5
    2ed6:	40 e0       	ldi	r20, 0x00	; 0
    2ed8:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	66 e0       	ldi	r22, 0x06	; 6
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	67 e0       	ldi	r22, 0x07	; 7
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
			PIN_INPUT);

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,
    2ef0:	83 e0       	ldi	r24, 0x03	; 3
    2ef2:	62 e0       	ldi	r22, 0x02	; 2
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	63 e0       	ldi	r22, 0x03	; 3
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    2f04:	83 e0       	ldi	r24, 0x03	; 3
    2f06:	64 e0       	ldi	r22, 0x04	; 4
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
			PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
    2f0e:	83 e0       	ldi	r24, 0x03	; 3
    2f10:	65 e0       	ldi	r22, 0x05	; 5
    2f12:	40 e0       	ldi	r20, 0x00	; 0
    2f14:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
			PIN_INPUT);
#endif
	while (1) {
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    2f18:	1f 86       	std	Y+15, r1	; 0x0f
    2f1a:	b4 c0       	rjmp	.+360    	; 0x3084 <KEYPAD_getPressedKey+0x1d0>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f1e:	98 2f       	mov	r25, r24
    2f20:	9c 5f       	subi	r25, 0xFC	; 252
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	69 2f       	mov	r22, r25
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
    2f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2e:	98 2f       	mov	r25, r24
    2f30:	9c 5f       	subi	r25, 0xFC	; 252
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	69 2f       	mov	r22, r25
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2f3c:	18 8a       	std	Y+16, r1	; 0x10
    2f3e:	22 c0       	rjmp	.+68     	; 0x2f84 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,
    2f40:	88 89       	ldd	r24, Y+16	; 0x10
    2f42:	98 2f       	mov	r25, r24
    2f44:	9e 5f       	subi	r25, 0xFE	; 254
    2f46:	83 e0       	ldi	r24, 0x03	; 3
    2f48:	69 2f       	mov	r22, r25
    2f4a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <GPIO_readPin>
    2f4e:	88 23       	and	r24, r24
    2f50:	b1 f4       	brne	.+44     	; 0x2f7e <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
					return KEYPAD_4x4_adjustKeyNumber(
    2f52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f54:	88 2f       	mov	r24, r24
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	88 0f       	add	r24, r24
    2f5a:	99 1f       	adc	r25, r25
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	98 2f       	mov	r25, r24
    2f62:	88 89       	ldd	r24, Y+16	; 0x10
    2f64:	89 0f       	add	r24, r25
    2f66:	8f 5f       	subi	r24, 0xFF	; 255
    2f68:	0e 94 47 18 	call	0x308e	; 0x308e <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    2f6c:	60 96       	adiw	r28, 0x10	; 16
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
			KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2f7e:	88 89       	ldd	r24, Y+16	; 0x10
    2f80:	8f 5f       	subi	r24, 0xFF	; 255
    2f82:	88 8b       	std	Y+16, r24	; 0x10
    2f84:	88 89       	ldd	r24, Y+16	; 0x10
    2f86:	84 30       	cpi	r24, 0x04	; 4
    2f88:	d8 f2       	brcs	.-74     	; 0x2f40 <KEYPAD_getPressedKey+0x8c>
							(row * KEYPAD_NUM_COLS) + col + 1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f8c:	98 2f       	mov	r25, r24
    2f8e:	9c 5f       	subi	r25, 0xFC	; 252
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	69 2f       	mov	r22, r25
    2f94:	40 e0       	ldi	r20, 0x00	; 0
    2f96:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_setupPinDirection>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a0 ea       	ldi	r26, 0xA0	; 160
    2fa0:	b0 e4       	ldi	r27, 0x40	; 64
    2fa2:	8b 87       	std	Y+11, r24	; 0x0b
    2fa4:	9c 87       	std	Y+12, r25	; 0x0c
    2fa6:	ad 87       	std	Y+13, r26	; 0x0d
    2fa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a ef       	ldi	r20, 0xFA	; 250
    2fb8:	54 e4       	ldi	r21, 0x44	; 68
    2fba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	8f 83       	std	Y+7, r24	; 0x07
    2fc4:	98 87       	std	Y+8, r25	; 0x08
    2fc6:	a9 87       	std	Y+9, r26	; 0x09
    2fc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e8       	ldi	r20, 0x80	; 128
    2fd8:	5f e3       	ldi	r21, 0x3F	; 63
    2fda:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2fde:	88 23       	and	r24, r24
    2fe0:	2c f4       	brge	.+10     	; 0x2fec <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	9e 83       	std	Y+6, r25	; 0x06
    2fe8:	8d 83       	std	Y+5, r24	; 0x05
    2fea:	3f c0       	rjmp	.+126    	; 0x306a <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    2fec:	6f 81       	ldd	r22, Y+7	; 0x07
    2fee:	78 85       	ldd	r23, Y+8	; 0x08
    2ff0:	89 85       	ldd	r24, Y+9	; 0x09
    2ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	3f ef       	ldi	r19, 0xFF	; 255
    2ff8:	4f e7       	ldi	r20, 0x7F	; 127
    2ffa:	57 e4       	ldi	r21, 0x47	; 71
    2ffc:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3000:	18 16       	cp	r1, r24
    3002:	4c f5       	brge	.+82     	; 0x3056 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3004:	6b 85       	ldd	r22, Y+11	; 0x0b
    3006:	7c 85       	ldd	r23, Y+12	; 0x0c
    3008:	8d 85       	ldd	r24, Y+13	; 0x0d
    300a:	9e 85       	ldd	r25, Y+14	; 0x0e
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e2       	ldi	r20, 0x20	; 32
    3012:	51 e4       	ldi	r21, 0x41	; 65
    3014:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9e 83       	std	Y+6, r25	; 0x06
    302a:	8d 83       	std	Y+5, r24	; 0x05
    302c:	0f c0       	rjmp	.+30     	; 0x304c <KEYPAD_getPressedKey+0x198>
    302e:	88 ec       	ldi	r24, 0xC8	; 200
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9c 83       	std	Y+4, r25	; 0x04
    3034:	8b 83       	std	Y+3, r24	; 0x03
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	9c 81       	ldd	r25, Y+4	; 0x04
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <KEYPAD_getPressedKey+0x186>
    303e:	9c 83       	std	Y+4, r25	; 0x04
    3040:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	8d 81       	ldd	r24, Y+5	; 0x05
    3044:	9e 81       	ldd	r25, Y+6	; 0x06
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	9e 83       	std	Y+6, r25	; 0x06
    304a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	69 f7       	brne	.-38     	; 0x302e <KEYPAD_getPressedKey+0x17a>
    3054:	14 c0       	rjmp	.+40     	; 0x307e <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9e 83       	std	Y+6, r25	; 0x06
    3068:	8d 83       	std	Y+5, r24	; 0x05
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	89 83       	std	Y+1, r24	; 0x01
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <KEYPAD_getPressedKey+0x1c2>
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
			PIN_INPUT);
#endif
	while (1) {
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    307e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3080:	8f 5f       	subi	r24, 0xFF	; 255
    3082:	8f 87       	std	Y+15, r24	; 0x0f
    3084:	8f 85       	ldd	r24, Y+15	; 0x0f
    3086:	84 30       	cpi	r24, 0x04	; 4
    3088:	08 f4       	brcc	.+2      	; 0x308c <KEYPAD_getPressedKey+0x1d8>
    308a:	48 cf       	rjmp	.-368    	; 0x2f1c <KEYPAD_getPressedKey+0x68>
    308c:	45 cf       	rjmp	.-374    	; 0x2f18 <KEYPAD_getPressedKey+0x64>

0000308e <KEYPAD_4x4_adjustKeyNumber>:

/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number) {
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	00 d0       	rcall	.+0      	; 0x3094 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3094:	00 d0       	rcall	.+0      	; 0x3096 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    309c:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number) {
    309e:	8a 81       	ldd	r24, Y+2	; 0x02
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	3c 83       	std	Y+4, r19	; 0x04
    30a6:	2b 83       	std	Y+3, r18	; 0x03
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	88 30       	cpi	r24, 0x08	; 8
    30ae:	91 05       	cpc	r25, r1
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    30b2:	70 c0       	rjmp	.+224    	; 0x3194 <KEYPAD_4x4_adjustKeyNumber+0x106>
    30b4:	2b 81       	ldd	r18, Y+3	; 0x03
    30b6:	3c 81       	ldd	r19, Y+4	; 0x04
    30b8:	29 30       	cpi	r18, 0x09	; 9
    30ba:	31 05       	cpc	r19, r1
    30bc:	5c f5       	brge	.+86     	; 0x3114 <KEYPAD_4x4_adjustKeyNumber+0x86>
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
    30c0:	9c 81       	ldd	r25, Y+4	; 0x04
    30c2:	84 30       	cpi	r24, 0x04	; 4
    30c4:	91 05       	cpc	r25, r1
    30c6:	09 f4       	brne	.+2      	; 0x30ca <KEYPAD_4x4_adjustKeyNumber+0x3c>
    30c8:	59 c0       	rjmp	.+178    	; 0x317c <KEYPAD_4x4_adjustKeyNumber+0xee>
    30ca:	2b 81       	ldd	r18, Y+3	; 0x03
    30cc:	3c 81       	ldd	r19, Y+4	; 0x04
    30ce:	25 30       	cpi	r18, 0x05	; 5
    30d0:	31 05       	cpc	r19, r1
    30d2:	9c f4       	brge	.+38     	; 0x30fa <KEYPAD_4x4_adjustKeyNumber+0x6c>
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	82 30       	cpi	r24, 0x02	; 2
    30da:	91 05       	cpc	r25, r1
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    30de:	48 c0       	rjmp	.+144    	; 0x3170 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    30e0:	2b 81       	ldd	r18, Y+3	; 0x03
    30e2:	3c 81       	ldd	r19, Y+4	; 0x04
    30e4:	23 30       	cpi	r18, 0x03	; 3
    30e6:	31 05       	cpc	r19, r1
    30e8:	0c f0       	brlt	.+2      	; 0x30ec <KEYPAD_4x4_adjustKeyNumber+0x5e>
    30ea:	45 c0       	rjmp	.+138    	; 0x3176 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	9c 81       	ldd	r25, Y+4	; 0x04
    30f0:	81 30       	cpi	r24, 0x01	; 1
    30f2:	91 05       	cpc	r25, r1
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    30f6:	39 c0       	rjmp	.+114    	; 0x316a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    30f8:	67 c0       	rjmp	.+206    	; 0x31c8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    30fa:	2b 81       	ldd	r18, Y+3	; 0x03
    30fc:	3c 81       	ldd	r19, Y+4	; 0x04
    30fe:	26 30       	cpi	r18, 0x06	; 6
    3100:	31 05       	cpc	r19, r1
    3102:	09 f4       	brne	.+2      	; 0x3106 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3104:	41 c0       	rjmp	.+130    	; 0x3188 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	87 30       	cpi	r24, 0x07	; 7
    310c:	91 05       	cpc	r25, r1
    310e:	0c f0       	brlt	.+2      	; 0x3112 <KEYPAD_4x4_adjustKeyNumber+0x84>
    3110:	3e c0       	rjmp	.+124    	; 0x318e <KEYPAD_4x4_adjustKeyNumber+0x100>
    3112:	37 c0       	rjmp	.+110    	; 0x3182 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3114:	2b 81       	ldd	r18, Y+3	; 0x03
    3116:	3c 81       	ldd	r19, Y+4	; 0x04
    3118:	2c 30       	cpi	r18, 0x0C	; 12
    311a:	31 05       	cpc	r19, r1
    311c:	09 f4       	brne	.+2      	; 0x3120 <KEYPAD_4x4_adjustKeyNumber+0x92>
    311e:	46 c0       	rjmp	.+140    	; 0x31ac <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	8d 30       	cpi	r24, 0x0D	; 13
    3126:	91 05       	cpc	r25, r1
    3128:	5c f4       	brge	.+22     	; 0x3140 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    312a:	2b 81       	ldd	r18, Y+3	; 0x03
    312c:	3c 81       	ldd	r19, Y+4	; 0x04
    312e:	2a 30       	cpi	r18, 0x0A	; 10
    3130:	31 05       	cpc	r19, r1
    3132:	b1 f1       	breq	.+108    	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	9c 81       	ldd	r25, Y+4	; 0x04
    3138:	8b 30       	cpi	r24, 0x0B	; 11
    313a:	91 05       	cpc	r25, r1
    313c:	a4 f5       	brge	.+104    	; 0x31a6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    313e:	2d c0       	rjmp	.+90     	; 0x319a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3140:	2b 81       	ldd	r18, Y+3	; 0x03
    3142:	3c 81       	ldd	r19, Y+4	; 0x04
    3144:	2e 30       	cpi	r18, 0x0E	; 14
    3146:	31 05       	cpc	r19, r1
    3148:	b9 f1       	breq	.+110    	; 0x31b8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	9c 81       	ldd	r25, Y+4	; 0x04
    314e:	8e 30       	cpi	r24, 0x0E	; 14
    3150:	91 05       	cpc	r25, r1
    3152:	7c f1       	brlt	.+94     	; 0x31b2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3154:	2b 81       	ldd	r18, Y+3	; 0x03
    3156:	3c 81       	ldd	r19, Y+4	; 0x04
    3158:	2f 30       	cpi	r18, 0x0F	; 15
    315a:	31 05       	cpc	r19, r1
    315c:	79 f1       	breq	.+94     	; 0x31bc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	80 31       	cpi	r24, 0x10	; 16
    3164:	91 05       	cpc	r25, r1
    3166:	69 f1       	breq	.+90     	; 0x31c2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    3168:	2f c0       	rjmp	.+94     	; 0x31c8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	case 1:
		keypad_button = 7;
    316a:	87 e0       	ldi	r24, 0x07	; 7
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	2e c0       	rjmp	.+92     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    3170:	88 e0       	ldi	r24, 0x08	; 8
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	2b c0       	rjmp	.+86     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    3176:	89 e0       	ldi	r24, 0x09	; 9
    3178:	89 83       	std	Y+1, r24	; 0x01
    317a:	28 c0       	rjmp	.+80     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%'; // ASCII Code of %
    317c:	85 e2       	ldi	r24, 0x25	; 37
    317e:	89 83       	std	Y+1, r24	; 0x01
    3180:	25 c0       	rjmp	.+74     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    3182:	84 e0       	ldi	r24, 0x04	; 4
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	22 c0       	rjmp	.+68     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    3188:	85 e0       	ldi	r24, 0x05	; 5
    318a:	89 83       	std	Y+1, r24	; 0x01
    318c:	1f c0       	rjmp	.+62     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    318e:	86 e0       	ldi	r24, 0x06	; 6
    3190:	89 83       	std	Y+1, r24	; 0x01
    3192:	1c c0       	rjmp	.+56     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*'; /* ASCII Code of '*' */
    3194:	8a e2       	ldi	r24, 0x2A	; 42
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	19 c0       	rjmp	.+50     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	89 83       	std	Y+1, r24	; 0x01
    319e:	16 c0       	rjmp	.+44     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    31a0:	82 e0       	ldi	r24, 0x02	; 2
    31a2:	89 83       	std	Y+1, r24	; 0x01
    31a4:	13 c0       	rjmp	.+38     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    31a6:	83 e0       	ldi	r24, 0x03	; 3
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	10 c0       	rjmp	.+32     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-'; /* ASCII Code of '-' */
    31ac:	8d e2       	ldi	r24, 0x2D	; 45
    31ae:	89 83       	std	Y+1, r24	; 0x01
    31b0:	0d c0       	rjmp	.+26     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 'E'; /* ASCII of Enter */
    31b2:	85 e4       	ldi	r24, 0x45	; 69
    31b4:	89 83       	std	Y+1, r24	; 0x01
    31b6:	0a c0       	rjmp	.+20     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    31b8:	19 82       	std	Y+1, r1	; 0x01
    31ba:	08 c0       	rjmp	.+16     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '='; /* ASCII Code of '=' */
    31bc:	8d e3       	ldi	r24, 0x3D	; 61
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	05 c0       	rjmp	.+10     	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+'; /* ASCII Code of '+' */
    31c2:	8b e2       	ldi	r24, 0x2B	; 43
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    31c8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ca:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <main>:
void count_Seconds(void);
void Delay_By_Uing_Timer1_Using_interput(uint16 SecDelay);
/*******************************************************************************
 *                                    main                                     *
 *******************************************************************************/
int main(void) {
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	cd 58       	subi	r28, 0x8D	; 141
    31ea:	d0 40       	sbci	r29, 0x00	; 0
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
	/*to Setting UART*/
	UART_ConfigType uart_Config =
			{ bits_8, Parity_Disabled, one_stop_bit, 9600 };
    31f6:	ce 01       	movw	r24, r28
    31f8:	81 58       	subi	r24, 0x81	; 129
    31fa:	9f 4f       	sbci	r25, 0xFF	; 255
    31fc:	c7 57       	subi	r28, 0x77	; 119
    31fe:	df 4f       	sbci	r29, 0xFF	; 255
    3200:	99 83       	std	Y+1, r25	; 0x01
    3202:	88 83       	st	Y, r24
    3204:	c9 58       	subi	r28, 0x89	; 137
    3206:	d0 40       	sbci	r29, 0x00	; 0
    3208:	8b ef       	ldi	r24, 0xFB	; 251
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	c5 57       	subi	r28, 0x75	; 117
    320e:	df 4f       	sbci	r29, 0xFF	; 255
    3210:	99 83       	std	Y+1, r25	; 0x01
    3212:	88 83       	st	Y, r24
    3214:	cb 58       	subi	r28, 0x8B	; 139
    3216:	d0 40       	sbci	r29, 0x00	; 0
    3218:	95 e0       	ldi	r25, 0x05	; 5
    321a:	c3 57       	subi	r28, 0x73	; 115
    321c:	df 4f       	sbci	r29, 0xFF	; 255
    321e:	98 83       	st	Y, r25
    3220:	cd 58       	subi	r28, 0x8D	; 141
    3222:	d0 40       	sbci	r29, 0x00	; 0
    3224:	c5 57       	subi	r28, 0x75	; 117
    3226:	df 4f       	sbci	r29, 0xFF	; 255
    3228:	a8 81       	ld	r26, Y
    322a:	b9 81       	ldd	r27, Y+1	; 0x01
    322c:	cb 58       	subi	r28, 0x8B	; 139
    322e:	d0 40       	sbci	r29, 0x00	; 0
    3230:	0c 90       	ld	r0, X
    3232:	c5 57       	subi	r28, 0x75	; 117
    3234:	df 4f       	sbci	r29, 0xFF	; 255
    3236:	e8 81       	ld	r30, Y
    3238:	f9 81       	ldd	r31, Y+1	; 0x01
    323a:	cb 58       	subi	r28, 0x8B	; 139
    323c:	d0 40       	sbci	r29, 0x00	; 0
    323e:	31 96       	adiw	r30, 0x01	; 1
    3240:	c5 57       	subi	r28, 0x75	; 117
    3242:	df 4f       	sbci	r29, 0xFF	; 255
    3244:	f9 83       	std	Y+1, r31	; 0x01
    3246:	e8 83       	st	Y, r30
    3248:	cb 58       	subi	r28, 0x8B	; 139
    324a:	d0 40       	sbci	r29, 0x00	; 0
    324c:	c7 57       	subi	r28, 0x77	; 119
    324e:	df 4f       	sbci	r29, 0xFF	; 255
    3250:	a8 81       	ld	r26, Y
    3252:	b9 81       	ldd	r27, Y+1	; 0x01
    3254:	c9 58       	subi	r28, 0x89	; 137
    3256:	d0 40       	sbci	r29, 0x00	; 0
    3258:	0c 92       	st	X, r0
    325a:	c7 57       	subi	r28, 0x77	; 119
    325c:	df 4f       	sbci	r29, 0xFF	; 255
    325e:	e8 81       	ld	r30, Y
    3260:	f9 81       	ldd	r31, Y+1	; 0x01
    3262:	c9 58       	subi	r28, 0x89	; 137
    3264:	d0 40       	sbci	r29, 0x00	; 0
    3266:	31 96       	adiw	r30, 0x01	; 1
    3268:	c7 57       	subi	r28, 0x77	; 119
    326a:	df 4f       	sbci	r29, 0xFF	; 255
    326c:	f9 83       	std	Y+1, r31	; 0x01
    326e:	e8 83       	st	Y, r30
    3270:	c9 58       	subi	r28, 0x89	; 137
    3272:	d0 40       	sbci	r29, 0x00	; 0
    3274:	c3 57       	subi	r28, 0x73	; 115
    3276:	df 4f       	sbci	r29, 0xFF	; 255
    3278:	f8 81       	ld	r31, Y
    327a:	cd 58       	subi	r28, 0x8D	; 141
    327c:	d0 40       	sbci	r29, 0x00	; 0
    327e:	f1 50       	subi	r31, 0x01	; 1
    3280:	c3 57       	subi	r28, 0x73	; 115
    3282:	df 4f       	sbci	r29, 0xFF	; 255
    3284:	f8 83       	st	Y, r31
    3286:	cd 58       	subi	r28, 0x8D	; 141
    3288:	d0 40       	sbci	r29, 0x00	; 0
    328a:	c3 57       	subi	r28, 0x73	; 115
    328c:	df 4f       	sbci	r29, 0xFF	; 255
    328e:	88 81       	ld	r24, Y
    3290:	cd 58       	subi	r28, 0x8D	; 141
    3292:	d0 40       	sbci	r29, 0x00	; 0
    3294:	88 23       	and	r24, r24
    3296:	31 f6       	brne	.-116    	; 0x3224 <main+0x48>
	/*
	 * temp_keypad-> get values from keypad
	 * password_counter_digit-> counter for loops
	 * state-> to control program
	 */
	uint8 temp_keypad = 0, password_counter_digit = 0, state = CREATE_PASS;
    3298:	fe 01       	movw	r30, r28
    329a:	e2 58       	subi	r30, 0x82	; 130
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	10 82       	st	Z, r1
    32a0:	fe 01       	movw	r30, r28
    32a2:	e3 58       	subi	r30, 0x83	; 131
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	10 82       	st	Z, r1
    32a8:	fe 01       	movw	r30, r28
    32aa:	e4 58       	subi	r30, 0x84	; 132
    32ac:	ff 4f       	sbci	r31, 0xFF	; 255
    32ae:	10 82       	st	Z, r1
	uint8 password[5] = { 0, 0 };/*to save pass on it*/
    32b0:	ce 01       	movw	r24, r28
    32b2:	8c 57       	subi	r24, 0x7C	; 124
    32b4:	9f 4f       	sbci	r25, 0xFF	; 255
    32b6:	25 e0       	ldi	r18, 0x05	; 5
    32b8:	fc 01       	movw	r30, r24
    32ba:	df 01       	movw	r26, r30
    32bc:	82 2f       	mov	r24, r18
    32be:	1d 92       	st	X+, r1
    32c0:	8a 95       	dec	r24
    32c2:	e9 f7       	brne	.-6      	; 0x32be <main+0xe2>
	global_interput_int();
    32c4:	0e 94 c5 0c 	call	0x198a	; 0x198a <global_interput_int>
	LCD_init();
    32c8:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_init>
	UART_init(&uart_Config);
    32cc:	ce 01       	movw	r24, r28
    32ce:	81 58       	subi	r24, 0x81	; 129
    32d0:	9f 4f       	sbci	r25, 0xFF	; 255
    32d2:	0e 94 20 06 	call	0xc40	; 0xc40 <UART_init>
	UART_sendByte(READY);
    32d6:	80 e2       	ldi	r24, 0x20	; 32
    32d8:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
	if (UART_recieveByte() == IAM_READY) {/*to make sure that ready to send and recieve*/
    32dc:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    32e0:	80 31       	cpi	r24, 0x10	; 16
    32e2:	09 f0       	breq	.+2      	; 0x32e6 <main+0x10a>
    32e4:	ae c7       	rjmp	.+3932   	; 0x4242 <main+0x1066>
    32e6:	f1 c1       	rjmp	.+994    	; 0x36ca <main+0x4ee>
		while (1) {
			/*******************************************************************************
			 *                                    CREATE_PASS                              *
			 *******************************************************************************/
			while (state == CREATE_PASS) {
				uint8 local_state = 0;/*to receive uart state */
    32e8:	fe 01       	movw	r30, r28
    32ea:	e5 58       	subi	r30, 0x85	; 133
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	10 82       	st	Z, r1
				g_try = 0;/*to clear try*/
    32f0:	10 92 09 01 	sts	0x0109, r1
				LCD_clearScreen();
    32f4:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Plz enter pass: ");
    32f8:	20 e6       	ldi	r18, 0x60	; 96
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	a9 01       	movw	r20, r18
    3302:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
				LCD_moveCursor(1, 0);
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	60 e0       	ldi	r22, 0x00	; 0
    330a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
				UART_sendByte(UART_CREATE_PASS_READY);
    330e:	8a e0       	ldi	r24, 0x0A	; 10
    3310:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
				local_state = UART_recieveByte();
    3314:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    3318:	fe 01       	movw	r30, r28
    331a:	e5 58       	subi	r30, 0x85	; 133
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 83       	st	Z, r24
				if (local_state == UART_CREATE_PASS_YES_READY) {
    3320:	fe 01       	movw	r30, r28
    3322:	e5 58       	subi	r30, 0x85	; 133
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	80 81       	ld	r24, Z
    3328:	8b 30       	cpi	r24, 0x0B	; 11
    332a:	09 f0       	breq	.+2      	; 0x332e <main+0x152>
    332c:	ca c1       	rjmp	.+916    	; 0x36c2 <main+0x4e6>
					/*take password and save it on arry*/
					for (password_counter_digit = 0; password_counter_digit < 5;
    332e:	fe 01       	movw	r30, r28
    3330:	e3 58       	subi	r30, 0x83	; 131
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	10 82       	st	Z, r1
    3336:	dd c0       	rjmp	.+442    	; 0x34f2 <main+0x316>
							) {
						temp_keypad = KEYPAD_getPressedKey();
    3338:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <KEYPAD_getPressedKey>
    333c:	fe 01       	movw	r30, r28
    333e:	e2 58       	subi	r30, 0x82	; 130
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	80 83       	st	Z, r24
    3344:	fe 01       	movw	r30, r28
    3346:	e3 59       	subi	r30, 0x93	; 147
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	a6 e1       	ldi	r26, 0x16	; 22
    3350:	b4 e4       	ldi	r27, 0x44	; 68
    3352:	80 83       	st	Z, r24
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	a2 83       	std	Z+2, r26	; 0x02
    3358:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335a:	8e 01       	movw	r16, r28
    335c:	07 59       	subi	r16, 0x97	; 151
    335e:	1f 4f       	sbci	r17, 0xFF	; 255
    3360:	fe 01       	movw	r30, r28
    3362:	e3 59       	subi	r30, 0x93	; 147
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	60 81       	ld	r22, Z
    3368:	71 81       	ldd	r23, Z+1	; 0x01
    336a:	82 81       	ldd	r24, Z+2	; 0x02
    336c:	93 81       	ldd	r25, Z+3	; 0x03
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a ef       	ldi	r20, 0xFA	; 250
    3374:	54 e4       	ldi	r21, 0x44	; 68
    3376:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	f8 01       	movw	r30, r16
    3380:	80 83       	st	Z, r24
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	a2 83       	std	Z+2, r26	; 0x02
    3386:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3388:	fe 01       	movw	r30, r28
    338a:	e7 59       	subi	r30, 0x97	; 151
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	60 81       	ld	r22, Z
    3390:	71 81       	ldd	r23, Z+1	; 0x01
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e8       	ldi	r20, 0x80	; 128
    339c:	5f e3       	ldi	r21, 0x3F	; 63
    339e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    33a2:	88 23       	and	r24, r24
    33a4:	44 f4       	brge	.+16     	; 0x33b6 <main+0x1da>
		__ticks = 1;
    33a6:	fe 01       	movw	r30, r28
    33a8:	e9 59       	subi	r30, 0x99	; 153
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	80 83       	st	Z, r24
    33b4:	64 c0       	rjmp	.+200    	; 0x347e <main+0x2a2>
	else if (__tmp > 65535)
    33b6:	fe 01       	movw	r30, r28
    33b8:	e7 59       	subi	r30, 0x97	; 151
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	60 81       	ld	r22, Z
    33be:	71 81       	ldd	r23, Z+1	; 0x01
    33c0:	82 81       	ldd	r24, Z+2	; 0x02
    33c2:	93 81       	ldd	r25, Z+3	; 0x03
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	0c f0       	brlt	.+2      	; 0x33d6 <main+0x1fa>
    33d4:	43 c0       	rjmp	.+134    	; 0x345c <main+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	fe 01       	movw	r30, r28
    33d8:	e3 59       	subi	r30, 0x93	; 147
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	60 81       	ld	r22, Z
    33de:	71 81       	ldd	r23, Z+1	; 0x01
    33e0:	82 81       	ldd	r24, Z+2	; 0x02
    33e2:	93 81       	ldd	r25, Z+3	; 0x03
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	8e 01       	movw	r16, r28
    33f6:	09 59       	subi	r16, 0x99	; 153
    33f8:	1f 4f       	sbci	r17, 0xFF	; 255
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	f8 01       	movw	r30, r16
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	80 83       	st	Z, r24
    340c:	1f c0       	rjmp	.+62     	; 0x344c <main+0x270>
    340e:	fe 01       	movw	r30, r28
    3410:	eb 59       	subi	r30, 0x9B	; 155
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	88 ec       	ldi	r24, 0xC8	; 200
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	91 83       	std	Z+1, r25	; 0x01
    341a:	80 83       	st	Z, r24
    341c:	fe 01       	movw	r30, r28
    341e:	eb 59       	subi	r30, 0x9B	; 155
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	80 81       	ld	r24, Z
    3424:	91 81       	ldd	r25, Z+1	; 0x01
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <main+0x24a>
    342a:	fe 01       	movw	r30, r28
    342c:	eb 59       	subi	r30, 0x9B	; 155
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	91 83       	std	Z+1, r25	; 0x01
    3432:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3434:	de 01       	movw	r26, r28
    3436:	a9 59       	subi	r26, 0x99	; 153
    3438:	bf 4f       	sbci	r27, 0xFF	; 255
    343a:	fe 01       	movw	r30, r28
    343c:	e9 59       	subi	r30, 0x99	; 153
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	11 96       	adiw	r26, 0x01	; 1
    3448:	9c 93       	st	X, r25
    344a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344c:	fe 01       	movw	r30, r28
    344e:	e9 59       	subi	r30, 0x99	; 153
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	d1 f6       	brne	.-76     	; 0x340e <main+0x232>
    345a:	28 c0       	rjmp	.+80     	; 0x34ac <main+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345c:	8e 01       	movw	r16, r28
    345e:	09 59       	subi	r16, 0x99	; 153
    3460:	1f 4f       	sbci	r17, 0xFF	; 255
    3462:	fe 01       	movw	r30, r28
    3464:	e7 59       	subi	r30, 0x97	; 151
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	60 81       	ld	r22, Z
    346a:	71 81       	ldd	r23, Z+1	; 0x01
    346c:	82 81       	ldd	r24, Z+2	; 0x02
    346e:	93 81       	ldd	r25, Z+3	; 0x03
    3470:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	f8 01       	movw	r30, r16
    347a:	91 83       	std	Z+1, r25	; 0x01
    347c:	80 83       	st	Z, r24
    347e:	de 01       	movw	r26, r28
    3480:	ad 59       	subi	r26, 0x9D	; 157
    3482:	bf 4f       	sbci	r27, 0xFF	; 255
    3484:	fe 01       	movw	r30, r28
    3486:	e9 59       	subi	r30, 0x99	; 153
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	80 81       	ld	r24, Z
    348c:	91 81       	ldd	r25, Z+1	; 0x01
    348e:	11 96       	adiw	r26, 0x01	; 1
    3490:	9c 93       	st	X, r25
    3492:	8e 93       	st	-X, r24
    3494:	fe 01       	movw	r30, r28
    3496:	ed 59       	subi	r30, 0x9D	; 157
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <main+0x2c2>
    34a2:	fe 01       	movw	r30, r28
    34a4:	ed 59       	subi	r30, 0x9D	; 157
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	80 83       	st	Z, r24
						_delay_ms(600);
						if ((temp_keypad <= 9) && (temp_keypad >= 0)) {
    34ac:	fe 01       	movw	r30, r28
    34ae:	e2 58       	subi	r30, 0x82	; 130
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	8a 30       	cpi	r24, 0x0A	; 10
    34b6:	e8 f4       	brcc	.+58     	; 0x34f2 <main+0x316>
							//LCD_intgerToString(temp_keypad);
							LCD_displayCharacter('*');
    34b8:	8a e2       	ldi	r24, 0x2A	; 42
    34ba:	0e 94 00 12 	call	0x2400	; 0x2400 <LCD_displayCharacter>
							password[password_counter_digit] = temp_keypad;
    34be:	fe 01       	movw	r30, r28
    34c0:	e3 58       	subi	r30, 0x83	; 131
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 81       	ld	r24, Z
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	ce 01       	movw	r24, r28
    34cc:	8c 57       	subi	r24, 0x7C	; 124
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	dc 01       	movw	r26, r24
    34d2:	a2 0f       	add	r26, r18
    34d4:	b3 1f       	adc	r27, r19
    34d6:	fe 01       	movw	r30, r28
    34d8:	e2 58       	subi	r30, 0x82	; 130
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	80 81       	ld	r24, Z
    34de:	8c 93       	st	X, r24
							password_counter_digit++;
    34e0:	de 01       	movw	r26, r28
    34e2:	a3 58       	subi	r26, 0x83	; 131
    34e4:	bf 4f       	sbci	r27, 0xFF	; 255
    34e6:	fe 01       	movw	r30, r28
    34e8:	e3 58       	subi	r30, 0x83	; 131
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	80 81       	ld	r24, Z
    34ee:	8f 5f       	subi	r24, 0xFF	; 255
    34f0:	8c 93       	st	X, r24
				LCD_moveCursor(1, 0);
				UART_sendByte(UART_CREATE_PASS_READY);
				local_state = UART_recieveByte();
				if (local_state == UART_CREATE_PASS_YES_READY) {
					/*take password and save it on arry*/
					for (password_counter_digit = 0; password_counter_digit < 5;
    34f2:	fe 01       	movw	r30, r28
    34f4:	e3 58       	subi	r30, 0x83	; 131
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 81       	ld	r24, Z
    34fa:	85 30       	cpi	r24, 0x05	; 5
    34fc:	08 f4       	brcc	.+2      	; 0x3500 <main+0x324>
    34fe:	1c cf       	rjmp	.-456    	; 0x3338 <main+0x15c>
							LCD_displayCharacter('*');
							password[password_counter_digit] = temp_keypad;
							password_counter_digit++;
						}
					}
					while (KEYPAD_getPressedKey() != 'E')
    3500:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <KEYPAD_getPressedKey>
    3504:	85 34       	cpi	r24, 0x45	; 69
    3506:	e1 f7       	brne	.-8      	; 0x3500 <main+0x324>
						; /*polling waiting Enter*/
					/*sending data*/
					for (password_counter_digit = 0; password_counter_digit < 5;
    3508:	fe 01       	movw	r30, r28
    350a:	e3 58       	subi	r30, 0x83	; 131
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	10 82       	st	Z, r1
    3510:	cb c0       	rjmp	.+406    	; 0x36a8 <main+0x4cc>
							password_counter_digit++) {
						UART_sendByte(password[password_counter_digit]);
    3512:	fe 01       	movw	r30, r28
    3514:	e3 58       	subi	r30, 0x83	; 131
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	80 81       	ld	r24, Z
    351a:	28 2f       	mov	r18, r24
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	ce 01       	movw	r24, r28
    3520:	8c 57       	subi	r24, 0x7C	; 124
    3522:	9f 4f       	sbci	r25, 0xFF	; 255
    3524:	fc 01       	movw	r30, r24
    3526:	e2 0f       	add	r30, r18
    3528:	f3 1f       	adc	r31, r19
    352a:	80 81       	ld	r24, Z
    352c:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
    3530:	fe 01       	movw	r30, r28
    3532:	e1 5a       	subi	r30, 0xA1	; 161
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	a0 e2       	ldi	r26, 0x20	; 32
    353c:	b1 e4       	ldi	r27, 0x41	; 65
    353e:	80 83       	st	Z, r24
    3540:	91 83       	std	Z+1, r25	; 0x01
    3542:	a2 83       	std	Z+2, r26	; 0x02
    3544:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3546:	8e 01       	movw	r16, r28
    3548:	05 5a       	subi	r16, 0xA5	; 165
    354a:	1f 4f       	sbci	r17, 0xFF	; 255
    354c:	fe 01       	movw	r30, r28
    354e:	e1 5a       	subi	r30, 0xA1	; 161
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	60 81       	ld	r22, Z
    3554:	71 81       	ldd	r23, Z+1	; 0x01
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	93 81       	ldd	r25, Z+3	; 0x03
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	4a ef       	ldi	r20, 0xFA	; 250
    3560:	54 e4       	ldi	r21, 0x44	; 68
    3562:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	f8 01       	movw	r30, r16
    356c:	80 83       	st	Z, r24
    356e:	91 83       	std	Z+1, r25	; 0x01
    3570:	a2 83       	std	Z+2, r26	; 0x02
    3572:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3574:	fe 01       	movw	r30, r28
    3576:	e5 5a       	subi	r30, 0xA5	; 165
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	60 81       	ld	r22, Z
    357c:	71 81       	ldd	r23, Z+1	; 0x01
    357e:	82 81       	ldd	r24, Z+2	; 0x02
    3580:	93 81       	ldd	r25, Z+3	; 0x03
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e8       	ldi	r20, 0x80	; 128
    3588:	5f e3       	ldi	r21, 0x3F	; 63
    358a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    358e:	88 23       	and	r24, r24
    3590:	44 f4       	brge	.+16     	; 0x35a2 <main+0x3c6>
		__ticks = 1;
    3592:	fe 01       	movw	r30, r28
    3594:	e7 5a       	subi	r30, 0xA7	; 167
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	91 83       	std	Z+1, r25	; 0x01
    359e:	80 83       	st	Z, r24
    35a0:	64 c0       	rjmp	.+200    	; 0x366a <main+0x48e>
	else if (__tmp > 65535)
    35a2:	fe 01       	movw	r30, r28
    35a4:	e5 5a       	subi	r30, 0xA5	; 165
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	60 81       	ld	r22, Z
    35aa:	71 81       	ldd	r23, Z+1	; 0x01
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	3f ef       	ldi	r19, 0xFF	; 255
    35b4:	4f e7       	ldi	r20, 0x7F	; 127
    35b6:	57 e4       	ldi	r21, 0x47	; 71
    35b8:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    35bc:	18 16       	cp	r1, r24
    35be:	0c f0       	brlt	.+2      	; 0x35c2 <main+0x3e6>
    35c0:	43 c0       	rjmp	.+134    	; 0x3648 <main+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c2:	fe 01       	movw	r30, r28
    35c4:	e1 5a       	subi	r30, 0xA1	; 161
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	60 81       	ld	r22, Z
    35ca:	71 81       	ldd	r23, Z+1	; 0x01
    35cc:	82 81       	ldd	r24, Z+2	; 0x02
    35ce:	93 81       	ldd	r25, Z+3	; 0x03
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e2       	ldi	r20, 0x20	; 32
    35d6:	51 e4       	ldi	r21, 0x41	; 65
    35d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	8e 01       	movw	r16, r28
    35e2:	07 5a       	subi	r16, 0xA7	; 167
    35e4:	1f 4f       	sbci	r17, 0xFF	; 255
    35e6:	bc 01       	movw	r22, r24
    35e8:	cd 01       	movw	r24, r26
    35ea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	f8 01       	movw	r30, r16
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	80 83       	st	Z, r24
    35f8:	1f c0       	rjmp	.+62     	; 0x3638 <main+0x45c>
    35fa:	fe 01       	movw	r30, r28
    35fc:	e9 5a       	subi	r30, 0xA9	; 169
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	88 ec       	ldi	r24, 0xC8	; 200
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24
    3608:	fe 01       	movw	r30, r28
    360a:	e9 5a       	subi	r30, 0xA9	; 169
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <main+0x436>
    3616:	fe 01       	movw	r30, r28
    3618:	e9 5a       	subi	r30, 0xA9	; 169
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	91 83       	std	Z+1, r25	; 0x01
    361e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3620:	de 01       	movw	r26, r28
    3622:	a7 5a       	subi	r26, 0xA7	; 167
    3624:	bf 4f       	sbci	r27, 0xFF	; 255
    3626:	fe 01       	movw	r30, r28
    3628:	e7 5a       	subi	r30, 0xA7	; 167
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	11 96       	adiw	r26, 0x01	; 1
    3634:	9c 93       	st	X, r25
    3636:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3638:	fe 01       	movw	r30, r28
    363a:	e7 5a       	subi	r30, 0xA7	; 167
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	80 81       	ld	r24, Z
    3640:	91 81       	ldd	r25, Z+1	; 0x01
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	d1 f6       	brne	.-76     	; 0x35fa <main+0x41e>
    3646:	27 c0       	rjmp	.+78     	; 0x3696 <main+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3648:	8e 01       	movw	r16, r28
    364a:	07 5a       	subi	r16, 0xA7	; 167
    364c:	1f 4f       	sbci	r17, 0xFF	; 255
    364e:	fe 01       	movw	r30, r28
    3650:	e5 5a       	subi	r30, 0xA5	; 165
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	60 81       	ld	r22, Z
    3656:	71 81       	ldd	r23, Z+1	; 0x01
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	93 81       	ldd	r25, Z+3	; 0x03
    365c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	f8 01       	movw	r30, r16
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	80 83       	st	Z, r24
    366a:	de 01       	movw	r26, r28
    366c:	ab 5a       	subi	r26, 0xAB	; 171
    366e:	bf 4f       	sbci	r27, 0xFF	; 255
    3670:	fe 01       	movw	r30, r28
    3672:	e7 5a       	subi	r30, 0xA7	; 167
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	8d 93       	st	X+, r24
    367c:	9c 93       	st	X, r25
    367e:	fe 01       	movw	r30, r28
    3680:	eb 5a       	subi	r30, 0xAB	; 171
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	80 81       	ld	r24, Z
    3686:	91 81       	ldd	r25, Z+1	; 0x01
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <main+0x4ac>
    368c:	fe 01       	movw	r30, r28
    368e:	eb 5a       	subi	r30, 0xAB	; 171
    3690:	ff 4f       	sbci	r31, 0xFF	; 255
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
					}
					while (KEYPAD_getPressedKey() != 'E')
						; /*polling waiting Enter*/
					/*sending data*/
					for (password_counter_digit = 0; password_counter_digit < 5;
							password_counter_digit++) {
    3696:	de 01       	movw	r26, r28
    3698:	a3 58       	subi	r26, 0x83	; 131
    369a:	bf 4f       	sbci	r27, 0xFF	; 255
    369c:	fe 01       	movw	r30, r28
    369e:	e3 58       	subi	r30, 0x83	; 131
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	80 81       	ld	r24, Z
    36a4:	8f 5f       	subi	r24, 0xFF	; 255
    36a6:	8c 93       	st	X, r24
						}
					}
					while (KEYPAD_getPressedKey() != 'E')
						; /*polling waiting Enter*/
					/*sending data*/
					for (password_counter_digit = 0; password_counter_digit < 5;
    36a8:	fe 01       	movw	r30, r28
    36aa:	e3 58       	subi	r30, 0x83	; 131
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 81       	ld	r24, Z
    36b0:	85 30       	cpi	r24, 0x05	; 5
    36b2:	08 f4       	brcc	.+2      	; 0x36b6 <main+0x4da>
    36b4:	2e cf       	rjmp	.-420    	; 0x3512 <main+0x336>
							password_counter_digit++) {
						UART_sendByte(password[password_counter_digit]);
						_delay_ms(10);
					}
					state = RECREATE_PASS;/*not problem occurred and go to next state*/
    36b6:	fe 01       	movw	r30, r28
    36b8:	e4 58       	subi	r30, 0x84	; 132
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	80 83       	st	Z, r24
    36c0:	cf c1       	rjmp	.+926    	; 0x3a60 <main+0x884>
					break;
				} else {
					state = CREATE_PASS;/*a problem occurred and retry state*/
    36c2:	fe 01       	movw	r30, r28
    36c4:	e4 58       	subi	r30, 0x84	; 132
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	10 82       	st	Z, r1
	if (UART_recieveByte() == IAM_READY) {/*to make sure that ready to send and recieve*/
		while (1) {
			/*******************************************************************************
			 *                                    CREATE_PASS                              *
			 *******************************************************************************/
			while (state == CREATE_PASS) {
    36ca:	fe 01       	movw	r30, r28
    36cc:	e4 58       	subi	r30, 0x84	; 132
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	80 81       	ld	r24, Z
    36d2:	88 23       	and	r24, r24
    36d4:	09 f4       	brne	.+2      	; 0x36d8 <main+0x4fc>
    36d6:	08 ce       	rjmp	.-1008   	; 0x32e8 <main+0x10c>
    36d8:	c3 c1       	rjmp	.+902    	; 0x3a60 <main+0x884>
			}
			/*******************************************************************************
			 *                                    RECREATE_PASS                            *
			 *******************************************************************************/
			while (state == RECREATE_PASS) {
				uint8 local_state = 0;/*to receive uart state */
    36da:	fe 01       	movw	r30, r28
    36dc:	e6 58       	subi	r30, 0x86	; 134
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	10 82       	st	Z, r1
				LCD_displayStringRowColumn(0, 0, "Plz re-enter the ");
    36e2:	21 e7       	ldi	r18, 0x71	; 113
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	60 e0       	ldi	r22, 0x00	; 0
    36ea:	a9 01       	movw	r20, r18
    36ec:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "same pass:");
    36f0:	23 e8       	ldi	r18, 0x83	; 131
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	a9 01       	movw	r20, r18
    36fa:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
				UART_sendByte(UART_RECREATE_PASS_READY);
    36fe:	8c e0       	ldi	r24, 0x0C	; 12
    3700:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
				local_state = UART_recieveByte();
    3704:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    3708:	fe 01       	movw	r30, r28
    370a:	e6 58       	subi	r30, 0x86	; 134
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 83       	st	Z, r24
				if (local_state == UART_RECREATE_PASS_YES_READY) {
    3710:	fe 01       	movw	r30, r28
    3712:	e6 58       	subi	r30, 0x86	; 134
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 81       	ld	r24, Z
    3718:	8d 30       	cpi	r24, 0x0D	; 13
    371a:	09 f0       	breq	.+2      	; 0x371e <main+0x542>
    371c:	9c c1       	rjmp	.+824    	; 0x3a56 <main+0x87a>
					/*take password and save it on arry*/
					for (password_counter_digit = 0; password_counter_digit < 5;
    371e:	fe 01       	movw	r30, r28
    3720:	e3 58       	subi	r30, 0x83	; 131
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	10 82       	st	Z, r1
    3726:	dd c0       	rjmp	.+442    	; 0x38e2 <main+0x706>
							) {
						temp_keypad = KEYPAD_getPressedKey();
    3728:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <KEYPAD_getPressedKey>
    372c:	fe 01       	movw	r30, r28
    372e:	e2 58       	subi	r30, 0x82	; 130
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	80 83       	st	Z, r24
    3734:	fe 01       	movw	r30, r28
    3736:	ef 5a       	subi	r30, 0xAF	; 175
    3738:	ff 4f       	sbci	r31, 0xFF	; 255
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	a6 e1       	ldi	r26, 0x16	; 22
    3740:	b4 e4       	ldi	r27, 0x44	; 68
    3742:	80 83       	st	Z, r24
    3744:	91 83       	std	Z+1, r25	; 0x01
    3746:	a2 83       	std	Z+2, r26	; 0x02
    3748:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    374a:	8e 01       	movw	r16, r28
    374c:	03 5b       	subi	r16, 0xB3	; 179
    374e:	1f 4f       	sbci	r17, 0xFF	; 255
    3750:	fe 01       	movw	r30, r28
    3752:	ef 5a       	subi	r30, 0xAF	; 175
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	60 81       	ld	r22, Z
    3758:	71 81       	ldd	r23, Z+1	; 0x01
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	93 81       	ldd	r25, Z+3	; 0x03
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	4a ef       	ldi	r20, 0xFA	; 250
    3764:	54 e4       	ldi	r21, 0x44	; 68
    3766:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	f8 01       	movw	r30, r16
    3770:	80 83       	st	Z, r24
    3772:	91 83       	std	Z+1, r25	; 0x01
    3774:	a2 83       	std	Z+2, r26	; 0x02
    3776:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3778:	fe 01       	movw	r30, r28
    377a:	e3 5b       	subi	r30, 0xB3	; 179
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	60 81       	ld	r22, Z
    3780:	71 81       	ldd	r23, Z+1	; 0x01
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e8       	ldi	r20, 0x80	; 128
    378c:	5f e3       	ldi	r21, 0x3F	; 63
    378e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    3792:	88 23       	and	r24, r24
    3794:	44 f4       	brge	.+16     	; 0x37a6 <main+0x5ca>
		__ticks = 1;
    3796:	fe 01       	movw	r30, r28
    3798:	e5 5b       	subi	r30, 0xB5	; 181
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	91 83       	std	Z+1, r25	; 0x01
    37a2:	80 83       	st	Z, r24
    37a4:	64 c0       	rjmp	.+200    	; 0x386e <main+0x692>
	else if (__tmp > 65535)
    37a6:	fe 01       	movw	r30, r28
    37a8:	e3 5b       	subi	r30, 0xB3	; 179
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	60 81       	ld	r22, Z
    37ae:	71 81       	ldd	r23, Z+1	; 0x01
    37b0:	82 81       	ldd	r24, Z+2	; 0x02
    37b2:	93 81       	ldd	r25, Z+3	; 0x03
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	3f ef       	ldi	r19, 0xFF	; 255
    37b8:	4f e7       	ldi	r20, 0x7F	; 127
    37ba:	57 e4       	ldi	r21, 0x47	; 71
    37bc:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    37c0:	18 16       	cp	r1, r24
    37c2:	0c f0       	brlt	.+2      	; 0x37c6 <main+0x5ea>
    37c4:	43 c0       	rjmp	.+134    	; 0x384c <main+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c6:	fe 01       	movw	r30, r28
    37c8:	ef 5a       	subi	r30, 0xAF	; 175
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	60 81       	ld	r22, Z
    37ce:	71 81       	ldd	r23, Z+1	; 0x01
    37d0:	82 81       	ldd	r24, Z+2	; 0x02
    37d2:	93 81       	ldd	r25, Z+3	; 0x03
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e2       	ldi	r20, 0x20	; 32
    37da:	51 e4       	ldi	r21, 0x41	; 65
    37dc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	8e 01       	movw	r16, r28
    37e6:	05 5b       	subi	r16, 0xB5	; 181
    37e8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ea:	bc 01       	movw	r22, r24
    37ec:	cd 01       	movw	r24, r26
    37ee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	f8 01       	movw	r30, r16
    37f8:	91 83       	std	Z+1, r25	; 0x01
    37fa:	80 83       	st	Z, r24
    37fc:	1f c0       	rjmp	.+62     	; 0x383c <main+0x660>
    37fe:	fe 01       	movw	r30, r28
    3800:	e7 5b       	subi	r30, 0xB7	; 183
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	88 ec       	ldi	r24, 0xC8	; 200
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	91 83       	std	Z+1, r25	; 0x01
    380a:	80 83       	st	Z, r24
    380c:	fe 01       	movw	r30, r28
    380e:	e7 5b       	subi	r30, 0xB7	; 183
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	80 81       	ld	r24, Z
    3814:	91 81       	ldd	r25, Z+1	; 0x01
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	f1 f7       	brne	.-4      	; 0x3816 <main+0x63a>
    381a:	fe 01       	movw	r30, r28
    381c:	e7 5b       	subi	r30, 0xB7	; 183
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	91 83       	std	Z+1, r25	; 0x01
    3822:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3824:	de 01       	movw	r26, r28
    3826:	a5 5b       	subi	r26, 0xB5	; 181
    3828:	bf 4f       	sbci	r27, 0xFF	; 255
    382a:	fe 01       	movw	r30, r28
    382c:	e5 5b       	subi	r30, 0xB5	; 181
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	80 81       	ld	r24, Z
    3832:	91 81       	ldd	r25, Z+1	; 0x01
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	11 96       	adiw	r26, 0x01	; 1
    3838:	9c 93       	st	X, r25
    383a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    383c:	fe 01       	movw	r30, r28
    383e:	e5 5b       	subi	r30, 0xB5	; 181
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	00 97       	sbiw	r24, 0x00	; 0
    3848:	d1 f6       	brne	.-76     	; 0x37fe <main+0x622>
    384a:	28 c0       	rjmp	.+80     	; 0x389c <main+0x6c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    384c:	8e 01       	movw	r16, r28
    384e:	05 5b       	subi	r16, 0xB5	; 181
    3850:	1f 4f       	sbci	r17, 0xFF	; 255
    3852:	fe 01       	movw	r30, r28
    3854:	e3 5b       	subi	r30, 0xB3	; 179
    3856:	ff 4f       	sbci	r31, 0xFF	; 255
    3858:	60 81       	ld	r22, Z
    385a:	71 81       	ldd	r23, Z+1	; 0x01
    385c:	82 81       	ldd	r24, Z+2	; 0x02
    385e:	93 81       	ldd	r25, Z+3	; 0x03
    3860:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	f8 01       	movw	r30, r16
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	80 83       	st	Z, r24
    386e:	de 01       	movw	r26, r28
    3870:	a9 5b       	subi	r26, 0xB9	; 185
    3872:	bf 4f       	sbci	r27, 0xFF	; 255
    3874:	fe 01       	movw	r30, r28
    3876:	e5 5b       	subi	r30, 0xB5	; 181
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	80 81       	ld	r24, Z
    387c:	91 81       	ldd	r25, Z+1	; 0x01
    387e:	11 96       	adiw	r26, 0x01	; 1
    3880:	9c 93       	st	X, r25
    3882:	8e 93       	st	-X, r24
    3884:	fe 01       	movw	r30, r28
    3886:	e9 5b       	subi	r30, 0xB9	; 185
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	f1 f7       	brne	.-4      	; 0x388e <main+0x6b2>
    3892:	fe 01       	movw	r30, r28
    3894:	e9 5b       	subi	r30, 0xB9	; 185
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	91 83       	std	Z+1, r25	; 0x01
    389a:	80 83       	st	Z, r24
						_delay_ms(600);
						if ((temp_keypad <= 9) && (temp_keypad >= 0)) {
    389c:	fe 01       	movw	r30, r28
    389e:	e2 58       	subi	r30, 0x82	; 130
    38a0:	ff 4f       	sbci	r31, 0xFF	; 255
    38a2:	80 81       	ld	r24, Z
    38a4:	8a 30       	cpi	r24, 0x0A	; 10
    38a6:	e8 f4       	brcc	.+58     	; 0x38e2 <main+0x706>
							//LCD_intgerToString(temp_keypad);
							LCD_displayCharacter('*');
    38a8:	8a e2       	ldi	r24, 0x2A	; 42
    38aa:	0e 94 00 12 	call	0x2400	; 0x2400 <LCD_displayCharacter>
							password[password_counter_digit] = temp_keypad;
    38ae:	fe 01       	movw	r30, r28
    38b0:	e3 58       	subi	r30, 0x83	; 131
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	80 81       	ld	r24, Z
    38b6:	28 2f       	mov	r18, r24
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	ce 01       	movw	r24, r28
    38bc:	8c 57       	subi	r24, 0x7C	; 124
    38be:	9f 4f       	sbci	r25, 0xFF	; 255
    38c0:	dc 01       	movw	r26, r24
    38c2:	a2 0f       	add	r26, r18
    38c4:	b3 1f       	adc	r27, r19
    38c6:	fe 01       	movw	r30, r28
    38c8:	e2 58       	subi	r30, 0x82	; 130
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	80 81       	ld	r24, Z
    38ce:	8c 93       	st	X, r24
							password_counter_digit++;
    38d0:	de 01       	movw	r26, r28
    38d2:	a3 58       	subi	r26, 0x83	; 131
    38d4:	bf 4f       	sbci	r27, 0xFF	; 255
    38d6:	fe 01       	movw	r30, r28
    38d8:	e3 58       	subi	r30, 0x83	; 131
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	80 81       	ld	r24, Z
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	8c 93       	st	X, r24
				LCD_displayStringRowColumn(1, 0, "same pass:");
				UART_sendByte(UART_RECREATE_PASS_READY);
				local_state = UART_recieveByte();
				if (local_state == UART_RECREATE_PASS_YES_READY) {
					/*take password and save it on arry*/
					for (password_counter_digit = 0; password_counter_digit < 5;
    38e2:	fe 01       	movw	r30, r28
    38e4:	e3 58       	subi	r30, 0x83	; 131
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	80 81       	ld	r24, Z
    38ea:	85 30       	cpi	r24, 0x05	; 5
    38ec:	08 f4       	brcc	.+2      	; 0x38f0 <main+0x714>
    38ee:	1c cf       	rjmp	.-456    	; 0x3728 <main+0x54c>
							LCD_displayCharacter('*');
							password[password_counter_digit] = temp_keypad;
							password_counter_digit++;
						}
					}
					while (KEYPAD_getPressedKey() != 'E')
    38f0:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <KEYPAD_getPressedKey>
    38f4:	85 34       	cpi	r24, 0x45	; 69
    38f6:	e1 f7       	brne	.-8      	; 0x38f0 <main+0x714>
						;/*polling waiting Enter*/
					/*sending data*/
					for (password_counter_digit = 0; password_counter_digit < 5;
    38f8:	fe 01       	movw	r30, r28
    38fa:	e3 58       	subi	r30, 0x83	; 131
    38fc:	ff 4f       	sbci	r31, 0xFF	; 255
    38fe:	10 82       	st	Z, r1
    3900:	9d c0       	rjmp	.+314    	; 0x3a3c <main+0x860>
							password_counter_digit++) {
						UART_sendByte(password[password_counter_digit]);
    3902:	fe 01       	movw	r30, r28
    3904:	e3 58       	subi	r30, 0x83	; 131
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	80 81       	ld	r24, Z
    390a:	28 2f       	mov	r18, r24
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	ce 01       	movw	r24, r28
    3910:	8c 57       	subi	r24, 0x7C	; 124
    3912:	9f 4f       	sbci	r25, 0xFF	; 255
    3914:	fc 01       	movw	r30, r24
    3916:	e2 0f       	add	r30, r18
    3918:	f3 1f       	adc	r31, r19
    391a:	80 81       	ld	r24, Z
    391c:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
    3920:	fe 01       	movw	r30, r28
    3922:	ed 5b       	subi	r30, 0xBD	; 189
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	a0 e2       	ldi	r26, 0x20	; 32
    392c:	b1 e4       	ldi	r27, 0x41	; 65
    392e:	80 83       	st	Z, r24
    3930:	91 83       	std	Z+1, r25	; 0x01
    3932:	a2 83       	std	Z+2, r26	; 0x02
    3934:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3936:	8e 01       	movw	r16, r28
    3938:	01 5c       	subi	r16, 0xC1	; 193
    393a:	1f 4f       	sbci	r17, 0xFF	; 255
    393c:	fe 01       	movw	r30, r28
    393e:	ed 5b       	subi	r30, 0xBD	; 189
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	60 81       	ld	r22, Z
    3944:	71 81       	ldd	r23, Z+1	; 0x01
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	4a ef       	ldi	r20, 0xFA	; 250
    3950:	54 e4       	ldi	r21, 0x44	; 68
    3952:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	f8 01       	movw	r30, r16
    395c:	80 83       	st	Z, r24
    395e:	91 83       	std	Z+1, r25	; 0x01
    3960:	a2 83       	std	Z+2, r26	; 0x02
    3962:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3964:	fe 01       	movw	r30, r28
    3966:	ff 96       	adiw	r30, 0x3f	; 63
    3968:	60 81       	ld	r22, Z
    396a:	71 81       	ldd	r23, Z+1	; 0x01
    396c:	82 81       	ldd	r24, Z+2	; 0x02
    396e:	93 81       	ldd	r25, Z+3	; 0x03
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e8       	ldi	r20, 0x80	; 128
    3976:	5f e3       	ldi	r21, 0x3F	; 63
    3978:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    397c:	88 23       	and	r24, r24
    397e:	2c f4       	brge	.+10     	; 0x398a <main+0x7ae>
		__ticks = 1;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9e af       	std	Y+62, r25	; 0x3e
    3986:	8d af       	std	Y+61, r24	; 0x3d
    3988:	46 c0       	rjmp	.+140    	; 0x3a16 <main+0x83a>
	else if (__tmp > 65535)
    398a:	fe 01       	movw	r30, r28
    398c:	ff 96       	adiw	r30, 0x3f	; 63
    398e:	60 81       	ld	r22, Z
    3990:	71 81       	ldd	r23, Z+1	; 0x01
    3992:	82 81       	ldd	r24, Z+2	; 0x02
    3994:	93 81       	ldd	r25, Z+3	; 0x03
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	3f ef       	ldi	r19, 0xFF	; 255
    399a:	4f e7       	ldi	r20, 0x7F	; 127
    399c:	57 e4       	ldi	r21, 0x47	; 71
    399e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    39a2:	18 16       	cp	r1, r24
    39a4:	64 f5       	brge	.+88     	; 0x39fe <main+0x822>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a6:	fe 01       	movw	r30, r28
    39a8:	ed 5b       	subi	r30, 0xBD	; 189
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	60 81       	ld	r22, Z
    39ae:	71 81       	ldd	r23, Z+1	; 0x01
    39b0:	82 81       	ldd	r24, Z+2	; 0x02
    39b2:	93 81       	ldd	r25, Z+3	; 0x03
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	40 e2       	ldi	r20, 0x20	; 32
    39ba:	51 e4       	ldi	r21, 0x41	; 65
    39bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	bc 01       	movw	r22, r24
    39c6:	cd 01       	movw	r24, r26
    39c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	9e af       	std	Y+62, r25	; 0x3e
    39d2:	8d af       	std	Y+61, r24	; 0x3d
    39d4:	0f c0       	rjmp	.+30     	; 0x39f4 <main+0x818>
    39d6:	88 ec       	ldi	r24, 0xC8	; 200
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	9c af       	std	Y+60, r25	; 0x3c
    39dc:	8b af       	std	Y+59, r24	; 0x3b
    39de:	8b ad       	ldd	r24, Y+59	; 0x3b
    39e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <main+0x806>
    39e6:	9c af       	std	Y+60, r25	; 0x3c
    39e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    39ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	9e af       	std	Y+62, r25	; 0x3e
    39f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    39f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    39f8:	00 97       	sbiw	r24, 0x00	; 0
    39fa:	69 f7       	brne	.-38     	; 0x39d6 <main+0x7fa>
    39fc:	16 c0       	rjmp	.+44     	; 0x3a2a <main+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39fe:	fe 01       	movw	r30, r28
    3a00:	ff 96       	adiw	r30, 0x3f	; 63
    3a02:	60 81       	ld	r22, Z
    3a04:	71 81       	ldd	r23, Z+1	; 0x01
    3a06:	82 81       	ldd	r24, Z+2	; 0x02
    3a08:	93 81       	ldd	r25, Z+3	; 0x03
    3a0a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	9e af       	std	Y+62, r25	; 0x3e
    3a14:	8d af       	std	Y+61, r24	; 0x3d
    3a16:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a18:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a1a:	9a af       	std	Y+58, r25	; 0x3a
    3a1c:	89 af       	std	Y+57, r24	; 0x39
    3a1e:	89 ad       	ldd	r24, Y+57	; 0x39
    3a20:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	f1 f7       	brne	.-4      	; 0x3a22 <main+0x846>
    3a26:	9a af       	std	Y+58, r25	; 0x3a
    3a28:	89 af       	std	Y+57, r24	; 0x39
					}
					while (KEYPAD_getPressedKey() != 'E')
						;/*polling waiting Enter*/
					/*sending data*/
					for (password_counter_digit = 0; password_counter_digit < 5;
							password_counter_digit++) {
    3a2a:	de 01       	movw	r26, r28
    3a2c:	a3 58       	subi	r26, 0x83	; 131
    3a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a30:	fe 01       	movw	r30, r28
    3a32:	e3 58       	subi	r30, 0x83	; 131
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	80 81       	ld	r24, Z
    3a38:	8f 5f       	subi	r24, 0xFF	; 255
    3a3a:	8c 93       	st	X, r24
						}
					}
					while (KEYPAD_getPressedKey() != 'E')
						;/*polling waiting Enter*/
					/*sending data*/
					for (password_counter_digit = 0; password_counter_digit < 5;
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	e3 58       	subi	r30, 0x83	; 131
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	80 81       	ld	r24, Z
    3a44:	85 30       	cpi	r24, 0x05	; 5
    3a46:	08 f4       	brcc	.+2      	; 0x3a4a <main+0x86e>
    3a48:	5c cf       	rjmp	.-328    	; 0x3902 <main+0x726>
							password_counter_digit++) {
						UART_sendByte(password[password_counter_digit]);
						_delay_ms(10);
					}
					state = CONFIRMA_PASS;/*not problem occurred and go to next state*/
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	e4 58       	subi	r30, 0x84	; 132
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	86 e0       	ldi	r24, 0x06	; 6
    3a52:	80 83       	st	Z, r24
    3a54:	40 c0       	rjmp	.+128    	; 0x3ad6 <main+0x8fa>
					break;
				} else {
					state = RECREATE_PASS;/*a problem occurred and retry state*/
    3a56:	fe 01       	movw	r30, r28
    3a58:	e4 58       	subi	r30, 0x84	; 132
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	80 83       	st	Z, r24
				}
			}
			/*******************************************************************************
			 *                                    RECREATE_PASS                            *
			 *******************************************************************************/
			while (state == RECREATE_PASS) {
    3a60:	fe 01       	movw	r30, r28
    3a62:	e4 58       	subi	r30, 0x84	; 132
    3a64:	ff 4f       	sbci	r31, 0xFF	; 255
    3a66:	80 81       	ld	r24, Z
    3a68:	81 30       	cpi	r24, 0x01	; 1
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <main+0x892>
    3a6c:	36 ce       	rjmp	.-916    	; 0x36da <main+0x4fe>
    3a6e:	33 c0       	rjmp	.+102    	; 0x3ad6 <main+0x8fa>
			}
			/*******************************************************************************
			 *                                    CONFIRMA_PASS                           *
			 *******************************************************************************/
			while (state == CONFIRMA_PASS) {
				uint8 local_state = 0;
    3a70:	fe 01       	movw	r30, r28
    3a72:	e7 58       	subi	r30, 0x87	; 135
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	10 82       	st	Z, r1
				uint8 local_state2 = 0;
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e8 58       	subi	r30, 0x88	; 136
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	10 82       	st	Z, r1
				UART_sendByte(UART_CONFIRMA_PASS_READY);
    3a80:	82 e1       	ldi	r24, 0x12	; 18
    3a82:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
				local_state = UART_recieveByte();
    3a86:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	e7 58       	subi	r30, 0x87	; 135
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	80 83       	st	Z, r24
				if (local_state == UART_CONFIRMA_PASS_YES_READY) {
    3a92:	fe 01       	movw	r30, r28
    3a94:	e7 58       	subi	r30, 0x87	; 135
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	80 81       	ld	r24, Z
    3a9a:	83 31       	cpi	r24, 0x13	; 19
    3a9c:	e1 f4       	brne	.+56     	; 0x3ad6 <main+0x8fa>
					local_state2 = UART_recieveByte();
    3a9e:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	e8 58       	subi	r30, 0x88	; 136
    3aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa8:	80 83       	st	Z, r24
					if (local_state2 == UART_CONFIRMA_PASS_FINSH) {
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e8 58       	subi	r30, 0x88	; 136
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 81       	ld	r24, Z
    3ab2:	86 31       	cpi	r24, 0x16	; 22
    3ab4:	31 f4       	brne	.+12     	; 0x3ac2 <main+0x8e6>
						state = MAIN;/*pass is confirm and go to main*/
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e4 58       	subi	r30, 0x84	; 132
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	85 e0       	ldi	r24, 0x05	; 5
    3abe:	80 83       	st	Z, r24
    3ac0:	16 c1       	rjmp	.+556    	; 0x3cee <main+0xb12>
						break;
					} else if (local_state2 == UART_PASS_MISMATCH) {
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e8 58       	subi	r30, 0x88	; 136
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	80 81       	ld	r24, Z
    3aca:	8f 30       	cpi	r24, 0x0F	; 15
    3acc:	21 f4       	brne	.+8      	; 0x3ad6 <main+0x8fa>
						state = CREATE_PASS;/*pass not matched*/
    3ace:	fe 01       	movw	r30, r28
    3ad0:	e4 58       	subi	r30, 0x84	; 132
    3ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad4:	10 82       	st	Z, r1
				}
			}
			/*******************************************************************************
			 *                                    CONFIRMA_PASS                           *
			 *******************************************************************************/
			while (state == CONFIRMA_PASS) {
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	e4 58       	subi	r30, 0x84	; 132
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	80 81       	ld	r24, Z
    3ade:	86 30       	cpi	r24, 0x06	; 6
    3ae0:	39 f2       	breq	.-114    	; 0x3a70 <main+0x894>
    3ae2:	05 c1       	rjmp	.+522    	; 0x3cee <main+0xb12>
			}
			/*******************************************************************************
			 *                                    MAIN_State                               *
			 *******************************************************************************/
			while (state == MAIN) {
				uint8 local_state = 0;
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e9 58       	subi	r30, 0x89	; 137
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	10 82       	st	Z, r1
				g_try = 0;
    3aec:	10 92 09 01 	sts	0x0109, r1
				LCD_clearScreen();
    3af0:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
				UART_sendByte(UART_MAIN_READY);
    3af4:	84 e1       	ldi	r24, 0x14	; 20
    3af6:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
				local_state = UART_recieveByte();
    3afa:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    3afe:	fe 01       	movw	r30, r28
    3b00:	e9 58       	subi	r30, 0x89	; 137
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 83       	st	Z, r24
				if (local_state == UART_MAIN_YES_READY) {
    3b06:	fe 01       	movw	r30, r28
    3b08:	e9 58       	subi	r30, 0x89	; 137
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	80 81       	ld	r24, Z
    3b0e:	85 31       	cpi	r24, 0x15	; 21
    3b10:	09 f0       	breq	.+2      	; 0x3b14 <main+0x938>
    3b12:	ed c0       	rjmp	.+474    	; 0x3cee <main+0xb12>
					LCD_displayStringRowColumn(0, 0, "+ : Open Door ");
    3b14:	2e e8       	ldi	r18, 0x8E	; 142
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	60 e0       	ldi	r22, 0x00	; 0
    3b1c:	a9 01       	movw	r20, r18
    3b1e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "- : Change pass ");
    3b22:	2d e9       	ldi	r18, 0x9D	; 157
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	60 e0       	ldi	r22, 0x00	; 0
    3b2a:	a9 01       	movw	r20, r18
    3b2c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
					while (1) {
						temp_keypad = KEYPAD_getPressedKey();
    3b30:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <KEYPAD_getPressedKey>
    3b34:	fe 01       	movw	r30, r28
    3b36:	e2 58       	subi	r30, 0x82	; 130
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 83       	st	Z, r24
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	a6 e1       	ldi	r26, 0x16	; 22
    3b42:	b4 e4       	ldi	r27, 0x44	; 68
    3b44:	8d ab       	std	Y+53, r24	; 0x35
    3b46:	9e ab       	std	Y+54, r25	; 0x36
    3b48:	af ab       	std	Y+55, r26	; 0x37
    3b4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b4c:	6d a9       	ldd	r22, Y+53	; 0x35
    3b4e:	7e a9       	ldd	r23, Y+54	; 0x36
    3b50:	8f a9       	ldd	r24, Y+55	; 0x37
    3b52:	98 ad       	ldd	r25, Y+56	; 0x38
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	4a ef       	ldi	r20, 0xFA	; 250
    3b5a:	54 e4       	ldi	r21, 0x44	; 68
    3b5c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	89 ab       	std	Y+49, r24	; 0x31
    3b66:	9a ab       	std	Y+50, r25	; 0x32
    3b68:	ab ab       	std	Y+51, r26	; 0x33
    3b6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b6c:	69 a9       	ldd	r22, Y+49	; 0x31
    3b6e:	7a a9       	ldd	r23, Y+50	; 0x32
    3b70:	8b a9       	ldd	r24, Y+51	; 0x33
    3b72:	9c a9       	ldd	r25, Y+52	; 0x34
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e8       	ldi	r20, 0x80	; 128
    3b7a:	5f e3       	ldi	r21, 0x3F	; 63
    3b7c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    3b80:	88 23       	and	r24, r24
    3b82:	2c f4       	brge	.+10     	; 0x3b8e <main+0x9b2>
		__ticks = 1;
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	98 ab       	std	Y+48, r25	; 0x30
    3b8a:	8f a7       	std	Y+47, r24	; 0x2f
    3b8c:	3f c0       	rjmp	.+126    	; 0x3c0c <main+0xa30>
	else if (__tmp > 65535)
    3b8e:	69 a9       	ldd	r22, Y+49	; 0x31
    3b90:	7a a9       	ldd	r23, Y+50	; 0x32
    3b92:	8b a9       	ldd	r24, Y+51	; 0x33
    3b94:	9c a9       	ldd	r25, Y+52	; 0x34
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	3f ef       	ldi	r19, 0xFF	; 255
    3b9a:	4f e7       	ldi	r20, 0x7F	; 127
    3b9c:	57 e4       	ldi	r21, 0x47	; 71
    3b9e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3ba2:	18 16       	cp	r1, r24
    3ba4:	4c f5       	brge	.+82     	; 0x3bf8 <main+0xa1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba6:	6d a9       	ldd	r22, Y+53	; 0x35
    3ba8:	7e a9       	ldd	r23, Y+54	; 0x36
    3baa:	8f a9       	ldd	r24, Y+55	; 0x37
    3bac:	98 ad       	ldd	r25, Y+56	; 0x38
    3bae:	20 e0       	ldi	r18, 0x00	; 0
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	40 e2       	ldi	r20, 0x20	; 32
    3bb4:	51 e4       	ldi	r21, 0x41	; 65
    3bb6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3bba:	dc 01       	movw	r26, r24
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	cd 01       	movw	r24, r26
    3bc2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	98 ab       	std	Y+48, r25	; 0x30
    3bcc:	8f a7       	std	Y+47, r24	; 0x2f
    3bce:	0f c0       	rjmp	.+30     	; 0x3bee <main+0xa12>
    3bd0:	88 ec       	ldi	r24, 0xC8	; 200
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	9e a7       	std	Y+46, r25	; 0x2e
    3bd6:	8d a7       	std	Y+45, r24	; 0x2d
    3bd8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3bda:	9e a5       	ldd	r25, Y+46	; 0x2e
    3bdc:	01 97       	sbiw	r24, 0x01	; 1
    3bde:	f1 f7       	brne	.-4      	; 0x3bdc <main+0xa00>
    3be0:	9e a7       	std	Y+46, r25	; 0x2e
    3be2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3be6:	98 a9       	ldd	r25, Y+48	; 0x30
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	98 ab       	std	Y+48, r25	; 0x30
    3bec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bee:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bf0:	98 a9       	ldd	r25, Y+48	; 0x30
    3bf2:	00 97       	sbiw	r24, 0x00	; 0
    3bf4:	69 f7       	brne	.-38     	; 0x3bd0 <main+0x9f4>
    3bf6:	14 c0       	rjmp	.+40     	; 0x3c20 <main+0xa44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf8:	69 a9       	ldd	r22, Y+49	; 0x31
    3bfa:	7a a9       	ldd	r23, Y+50	; 0x32
    3bfc:	8b a9       	ldd	r24, Y+51	; 0x33
    3bfe:	9c a9       	ldd	r25, Y+52	; 0x34
    3c00:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	98 ab       	std	Y+48, r25	; 0x30
    3c0a:	8f a7       	std	Y+47, r24	; 0x2f
    3c0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c0e:	98 a9       	ldd	r25, Y+48	; 0x30
    3c10:	9c a7       	std	Y+44, r25	; 0x2c
    3c12:	8b a7       	std	Y+43, r24	; 0x2b
    3c14:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c16:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <main+0xa3c>
    3c1c:	9c a7       	std	Y+44, r25	; 0x2c
    3c1e:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(600);
						if (temp_keypad == '-' || temp_keypad == '+') {
    3c20:	fe 01       	movw	r30, r28
    3c22:	e2 58       	subi	r30, 0x82	; 130
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	80 81       	ld	r24, Z
    3c28:	8d 32       	cpi	r24, 0x2D	; 45
    3c2a:	39 f0       	breq	.+14     	; 0x3c3a <main+0xa5e>
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e2 58       	subi	r30, 0x82	; 130
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	80 81       	ld	r24, Z
    3c34:	8b 32       	cpi	r24, 0x2B	; 43
    3c36:	09 f0       	breq	.+2      	; 0x3c3a <main+0xa5e>
    3c38:	7b cf       	rjmp	.-266    	; 0x3b30 <main+0x954>
							break;
						}
					}
					if (temp_keypad == '+') {
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	e2 58       	subi	r30, 0x82	; 130
    3c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c40:	80 81       	ld	r24, Z
    3c42:	8b 32       	cpi	r24, 0x2B	; 43
    3c44:	21 f5       	brne	.+72     	; 0x3c8e <main+0xab2>
						uint8 local_state2 = 0;
    3c46:	fe 01       	movw	r30, r28
    3c48:	ea 58       	subi	r30, 0x8A	; 138
    3c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4c:	10 82       	st	Z, r1
						UART_sendByte(UART_MOTOR_READY);
    3c4e:	80 e1       	ldi	r24, 0x10	; 16
    3c50:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
						local_state2 = UART_recieveByte();
    3c54:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    3c58:	fe 01       	movw	r30, r28
    3c5a:	ea 58       	subi	r30, 0x8A	; 138
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	80 83       	st	Z, r24

						if (local_state2 == UART_MOTOR_YES_READY) {
    3c60:	fe 01       	movw	r30, r28
    3c62:	ea 58       	subi	r30, 0x8A	; 138
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	81 31       	cpi	r24, 0x11	; 17
    3c6a:	59 f4       	brne	.+22     	; 0x3c82 <main+0xaa6>
							LCD_clearScreen();
    3c6c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
							g_main = MOTOR_STATE;/*to get it after check pass*/
    3c70:	83 e0       	ldi	r24, 0x03	; 3
    3c72:	80 93 0a 01 	sts	0x010A, r24
							state = CHECK_PASS;/*to check pass*/
    3c76:	fe 01       	movw	r30, r28
    3c78:	e4 58       	subi	r30, 0x84	; 132
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	82 e0       	ldi	r24, 0x02	; 2
    3c7e:	80 83       	st	Z, r24
    3c80:	7d c0       	rjmp	.+250    	; 0x3d7c <main+0xba0>
							break;
						} else {
							state = MAIN;
    3c82:	fe 01       	movw	r30, r28
    3c84:	e4 58       	subi	r30, 0x84	; 132
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	85 e0       	ldi	r24, 0x05	; 5
    3c8a:	80 83       	st	Z, r24
    3c8c:	77 c0       	rjmp	.+238    	; 0x3d7c <main+0xba0>
							break;
						}

					} else if (temp_keypad == '-') {
    3c8e:	fe 01       	movw	r30, r28
    3c90:	e2 58       	subi	r30, 0x82	; 130
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	8d 32       	cpi	r24, 0x2D	; 45
    3c98:	21 f5       	brne	.+72     	; 0x3ce2 <main+0xb06>
						uint8 local_state2 = 0;
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	eb 58       	subi	r30, 0x8B	; 139
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	10 82       	st	Z, r1
						UART_sendByte(UART_CHECK_PASS_READY);
    3ca2:	8e e1       	ldi	r24, 0x1E	; 30
    3ca4:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
						local_state2 = UART_recieveByte();
    3ca8:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    3cac:	fe 01       	movw	r30, r28
    3cae:	eb 58       	subi	r30, 0x8B	; 139
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	80 83       	st	Z, r24
						if (local_state2 == UART_CHECK_PASS_YES_READY) {
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	eb 58       	subi	r30, 0x8B	; 139
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	80 81       	ld	r24, Z
    3cbc:	8f 31       	cpi	r24, 0x1F	; 31
    3cbe:	59 f4       	brne	.+22     	; 0x3cd6 <main+0xafa>
							LCD_clearScreen();
    3cc0:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
							g_main = CHANGE_PASS;/*to get it after check pass*/
    3cc4:	84 e0       	ldi	r24, 0x04	; 4
    3cc6:	80 93 0a 01 	sts	0x010A, r24
							state = CHECK_PASS;/*to check pass*/
    3cca:	fe 01       	movw	r30, r28
    3ccc:	e4 58       	subi	r30, 0x84	; 132
    3cce:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd0:	82 e0       	ldi	r24, 0x02	; 2
    3cd2:	80 83       	st	Z, r24
    3cd4:	53 c0       	rjmp	.+166    	; 0x3d7c <main+0xba0>
							break;
						} else {
							state = MAIN;/*a problem occurred and retry state*/
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	e4 58       	subi	r30, 0x84	; 132
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	85 e0       	ldi	r24, 0x05	; 5
    3cde:	80 83       	st	Z, r24
    3ce0:	4d c0       	rjmp	.+154    	; 0x3d7c <main+0xba0>
							break;
						}

					} else {
						state = MAIN;
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e4 58       	subi	r30, 0x84	; 132
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	85 e0       	ldi	r24, 0x05	; 5
    3cea:	80 83       	st	Z, r24
    3cec:	47 c0       	rjmp	.+142    	; 0x3d7c <main+0xba0>
				}
			}
			/*******************************************************************************
			 *                                    MAIN_State                               *
			 *******************************************************************************/
			while (state == MAIN) {
    3cee:	fe 01       	movw	r30, r28
    3cf0:	e4 58       	subi	r30, 0x84	; 132
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	80 81       	ld	r24, Z
    3cf6:	85 30       	cpi	r24, 0x05	; 5
    3cf8:	09 f4       	brne	.+2      	; 0x3cfc <main+0xb20>
    3cfa:	f4 ce       	rjmp	.-536    	; 0x3ae4 <main+0x908>
    3cfc:	3f c0       	rjmp	.+126    	; 0x3d7c <main+0xba0>
			}
			/*******************************************************************************
			 *                                    MOTOR_STATE                              *
			 *******************************************************************************/
			while (state == MOTOR_STATE) {
				uint8 local_state = 0;
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ec 58       	subi	r30, 0x8C	; 140
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	10 82       	st	Z, r1
				UART_sendByte(UART_MOTOR_READY);
    3d06:	80 e1       	ldi	r24, 0x10	; 16
    3d08:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
				local_state = UART_recieveByte();
    3d0c:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    3d10:	fe 01       	movw	r30, r28
    3d12:	ec 58       	subi	r30, 0x8C	; 140
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	80 83       	st	Z, r24
				if (local_state == UART_MOTOR_YES_READY) {
    3d18:	fe 01       	movw	r30, r28
    3d1a:	ec 58       	subi	r30, 0x8C	; 140
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	80 81       	ld	r24, Z
    3d20:	81 31       	cpi	r24, 0x11	; 17
    3d22:	39 f5       	brne	.+78     	; 0x3d72 <main+0xb96>
					LCD_clearScreen();
    3d24:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Door is ");
    3d28:	2e ea       	ldi	r18, 0xAE	; 174
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	a9 01       	movw	r20, r18
    3d32:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Unlocking");
    3d36:	27 eb       	ldi	r18, 0xB7	; 183
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	60 e0       	ldi	r22, 0x00	; 0
    3d3e:	a9 01       	movw	r20, r18
    3d40:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
					/*rotates motor for 15-seconds CW
					 + hold the motor for 3-seconds.*/
					Delay_By_Uing_Timer1_Using_interput(18);
    3d44:	82 e1       	ldi	r24, 0x12	; 18
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	0e 94 3b 21 	call	0x4276	; 0x4276 <Delay_By_Uing_Timer1_Using_interput>
					LCD_clearScreen();
    3d4c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Door is locking");
    3d50:	21 ec       	ldi	r18, 0xC1	; 193
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	80 e0       	ldi	r24, 0x00	; 0
    3d56:	60 e0       	ldi	r22, 0x00	; 0
    3d58:	a9 01       	movw	r20, r18
    3d5a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
					/*rotates motor for 15-seconds A-CW*/
					Delay_By_Uing_Timer1_Using_interput(15);
    3d5e:	8f e0       	ldi	r24, 0x0F	; 15
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 3b 21 	call	0x4276	; 0x4276 <Delay_By_Uing_Timer1_Using_interput>
					state = MAIN;/*back to main after finsh its job*/
    3d66:	fe 01       	movw	r30, r28
    3d68:	e4 58       	subi	r30, 0x84	; 132
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	85 e0       	ldi	r24, 0x05	; 5
    3d6e:	80 83       	st	Z, r24
    3d70:	3a c2       	rjmp	.+1140   	; 0x41e6 <main+0x100a>
					break;
				} else {
					state = MOTOR_STATE;/*a problem occurred and retry state*/
    3d72:	fe 01       	movw	r30, r28
    3d74:	e4 58       	subi	r30, 0x84	; 132
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	83 e0       	ldi	r24, 0x03	; 3
    3d7a:	80 83       	st	Z, r24
				}
			}
			/*******************************************************************************
			 *                                    MOTOR_STATE                              *
			 *******************************************************************************/
			while (state == MOTOR_STATE) {
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e4 58       	subi	r30, 0x84	; 132
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	80 81       	ld	r24, Z
    3d84:	83 30       	cpi	r24, 0x03	; 3
    3d86:	09 f4       	brne	.+2      	; 0x3d8a <main+0xbae>
    3d88:	ba cf       	rjmp	.-140    	; 0x3cfe <main+0xb22>
    3d8a:	2d c2       	rjmp	.+1114   	; 0x41e6 <main+0x100a>
			}
			/*******************************************************************************
			 *                                    CHECK_PASS                              *
			 *******************************************************************************/
			while (state == CHECK_PASS) {
				uint8 local_state = 0, local_state2 = 0;
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	ed 58       	subi	r30, 0x8D	; 141
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	10 82       	st	Z, r1
    3d94:	fe 01       	movw	r30, r28
    3d96:	ee 58       	subi	r30, 0x8E	; 142
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	10 82       	st	Z, r1
				UART_sendByte(UART_CHECK_PASS_READY);
    3d9c:	8e e1       	ldi	r24, 0x1E	; 30
    3d9e:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
				local_state = UART_recieveByte();
    3da2:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    3da6:	fe 01       	movw	r30, r28
    3da8:	ed 58       	subi	r30, 0x8D	; 141
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	80 83       	st	Z, r24
				if (local_state == UART_CHECK_PASS_YES_READY) {
    3dae:	fe 01       	movw	r30, r28
    3db0:	ed 58       	subi	r30, 0x8D	; 141
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	80 81       	ld	r24, Z
    3db6:	8f 31       	cpi	r24, 0x1F	; 31
    3db8:	09 f0       	breq	.+2      	; 0x3dbc <main+0xbe0>
    3dba:	10 c2       	rjmp	.+1056   	; 0x41dc <main+0x1000>
					if (g_try < 2) {
    3dbc:	80 91 09 01 	lds	r24, 0x0109
    3dc0:	82 30       	cpi	r24, 0x02	; 2
    3dc2:	70 f4       	brcc	.+28     	; 0x3de0 <main+0xc04>
						LCD_clearScreen();
    3dc4:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "Plz enter pass: ");
    3dc8:	20 e6       	ldi	r18, 0x60	; 96
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	60 e0       	ldi	r22, 0x00	; 0
    3dd0:	a9 01       	movw	r20, r18
    3dd2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
						LCD_moveCursor(1, 0);
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	60 e0       	ldi	r22, 0x00	; 0
    3dda:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
    3dde:	0d c0       	rjmp	.+26     	; 0x3dfa <main+0xc1e>
					} else {
						LCD_clearScreen();
    3de0:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "last time pass: ");
    3de4:	21 ed       	ldi	r18, 0xD1	; 209
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	a9 01       	movw	r20, r18
    3dee:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <LCD_displayStringRowColumn>
						LCD_moveCursor(1, 0);
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
					}
					for (password_counter_digit = 0; password_counter_digit < 5;
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e3 58       	subi	r30, 0x83	; 131
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	10 82       	st	Z, r1
    3e02:	9b c0       	rjmp	.+310    	; 0x3f3a <main+0xd5e>
							) {
						temp_keypad = KEYPAD_getPressedKey();
    3e04:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <KEYPAD_getPressedKey>
    3e08:	fe 01       	movw	r30, r28
    3e0a:	e2 58       	subi	r30, 0x82	; 130
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	80 83       	st	Z, r24
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	a6 e1       	ldi	r26, 0x16	; 22
    3e16:	b4 e4       	ldi	r27, 0x44	; 68
    3e18:	8f a3       	std	Y+39, r24	; 0x27
    3e1a:	98 a7       	std	Y+40, r25	; 0x28
    3e1c:	a9 a7       	std	Y+41, r26	; 0x29
    3e1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e20:	6f a1       	ldd	r22, Y+39	; 0x27
    3e22:	78 a5       	ldd	r23, Y+40	; 0x28
    3e24:	89 a5       	ldd	r24, Y+41	; 0x29
    3e26:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	4a ef       	ldi	r20, 0xFA	; 250
    3e2e:	54 e4       	ldi	r21, 0x44	; 68
    3e30:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	8b a3       	std	Y+35, r24	; 0x23
    3e3a:	9c a3       	std	Y+36, r25	; 0x24
    3e3c:	ad a3       	std	Y+37, r26	; 0x25
    3e3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e40:	6b a1       	ldd	r22, Y+35	; 0x23
    3e42:	7c a1       	ldd	r23, Y+36	; 0x24
    3e44:	8d a1       	ldd	r24, Y+37	; 0x25
    3e46:	9e a1       	ldd	r25, Y+38	; 0x26
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e8       	ldi	r20, 0x80	; 128
    3e4e:	5f e3       	ldi	r21, 0x3F	; 63
    3e50:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    3e54:	88 23       	and	r24, r24
    3e56:	2c f4       	brge	.+10     	; 0x3e62 <main+0xc86>
		__ticks = 1;
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	9a a3       	std	Y+34, r25	; 0x22
    3e5e:	89 a3       	std	Y+33, r24	; 0x21
    3e60:	3f c0       	rjmp	.+126    	; 0x3ee0 <main+0xd04>
	else if (__tmp > 65535)
    3e62:	6b a1       	ldd	r22, Y+35	; 0x23
    3e64:	7c a1       	ldd	r23, Y+36	; 0x24
    3e66:	8d a1       	ldd	r24, Y+37	; 0x25
    3e68:	9e a1       	ldd	r25, Y+38	; 0x26
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	3f ef       	ldi	r19, 0xFF	; 255
    3e6e:	4f e7       	ldi	r20, 0x7F	; 127
    3e70:	57 e4       	ldi	r21, 0x47	; 71
    3e72:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3e76:	18 16       	cp	r1, r24
    3e78:	4c f5       	brge	.+82     	; 0x3ecc <main+0xcf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7a:	6f a1       	ldd	r22, Y+39	; 0x27
    3e7c:	78 a5       	ldd	r23, Y+40	; 0x28
    3e7e:	89 a5       	ldd	r24, Y+41	; 0x29
    3e80:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e2       	ldi	r20, 0x20	; 32
    3e88:	51 e4       	ldi	r21, 0x41	; 65
    3e8a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	bc 01       	movw	r22, r24
    3e94:	cd 01       	movw	r24, r26
    3e96:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	9a a3       	std	Y+34, r25	; 0x22
    3ea0:	89 a3       	std	Y+33, r24	; 0x21
    3ea2:	0f c0       	rjmp	.+30     	; 0x3ec2 <main+0xce6>
    3ea4:	88 ec       	ldi	r24, 0xC8	; 200
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	98 a3       	std	Y+32, r25	; 0x20
    3eaa:	8f 8f       	std	Y+31, r24	; 0x1f
    3eac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3eae:	98 a1       	ldd	r25, Y+32	; 0x20
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <main+0xcd4>
    3eb4:	98 a3       	std	Y+32, r25	; 0x20
    3eb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    3eba:	9a a1       	ldd	r25, Y+34	; 0x22
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	9a a3       	std	Y+34, r25	; 0x22
    3ec0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ec4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	69 f7       	brne	.-38     	; 0x3ea4 <main+0xcc8>
    3eca:	14 c0       	rjmp	.+40     	; 0x3ef4 <main+0xd18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ecc:	6b a1       	ldd	r22, Y+35	; 0x23
    3ece:	7c a1       	ldd	r23, Y+36	; 0x24
    3ed0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ed2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ed4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	9a a3       	std	Y+34, r25	; 0x22
    3ede:	89 a3       	std	Y+33, r24	; 0x21
    3ee0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ee2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ee4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ee6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ee8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <main+0xd10>
    3ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ef2:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(600);
						if ((temp_keypad <= 9) && (temp_keypad >= 0)) {
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e2 58       	subi	r30, 0x82	; 130
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 81       	ld	r24, Z
    3efc:	8a 30       	cpi	r24, 0x0A	; 10
    3efe:	e8 f4       	brcc	.+58     	; 0x3f3a <main+0xd5e>
							//LCD_intgerToString(temp_keypad);
							LCD_displayCharacter('*');
    3f00:	8a e2       	ldi	r24, 0x2A	; 42
    3f02:	0e 94 00 12 	call	0x2400	; 0x2400 <LCD_displayCharacter>
							password[password_counter_digit] = temp_keypad;
    3f06:	fe 01       	movw	r30, r28
    3f08:	e3 58       	subi	r30, 0x83	; 131
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	80 81       	ld	r24, Z
    3f0e:	28 2f       	mov	r18, r24
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	ce 01       	movw	r24, r28
    3f14:	8c 57       	subi	r24, 0x7C	; 124
    3f16:	9f 4f       	sbci	r25, 0xFF	; 255
    3f18:	dc 01       	movw	r26, r24
    3f1a:	a2 0f       	add	r26, r18
    3f1c:	b3 1f       	adc	r27, r19
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e2 58       	subi	r30, 0x82	; 130
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	80 81       	ld	r24, Z
    3f26:	8c 93       	st	X, r24
							password_counter_digit++;
    3f28:	de 01       	movw	r26, r28
    3f2a:	a3 58       	subi	r26, 0x83	; 131
    3f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e3 58       	subi	r30, 0x83	; 131
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 81       	ld	r24, Z
    3f36:	8f 5f       	subi	r24, 0xFF	; 255
    3f38:	8c 93       	st	X, r24
					} else {
						LCD_clearScreen();
						LCD_displayStringRowColumn(0, 0, "last time pass: ");
						LCD_moveCursor(1, 0);
					}
					for (password_counter_digit = 0; password_counter_digit < 5;
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e3 58       	subi	r30, 0x83	; 131
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	80 81       	ld	r24, Z
    3f42:	85 30       	cpi	r24, 0x05	; 5
    3f44:	08 f4       	brcc	.+2      	; 0x3f48 <main+0xd6c>
    3f46:	5e cf       	rjmp	.-324    	; 0x3e04 <main+0xc28>
							LCD_displayCharacter('*');
							password[password_counter_digit] = temp_keypad;
							password_counter_digit++;
						}
					}
					while (KEYPAD_getPressedKey() != 'E')
    3f48:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <KEYPAD_getPressedKey>
    3f4c:	85 34       	cpi	r24, 0x45	; 69
    3f4e:	e1 f7       	brne	.-8      	; 0x3f48 <main+0xd6c>
						;
					for (password_counter_digit = 0; password_counter_digit < 5;
    3f50:	fe 01       	movw	r30, r28
    3f52:	e3 58       	subi	r30, 0x83	; 131
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	10 82       	st	Z, r1
    3f58:	8a c0       	rjmp	.+276    	; 0x406e <main+0xe92>
							password_counter_digit++) {
						UART_sendByte(password[password_counter_digit]);
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e3 58       	subi	r30, 0x83	; 131
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	80 81       	ld	r24, Z
    3f62:	28 2f       	mov	r18, r24
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	ce 01       	movw	r24, r28
    3f68:	8c 57       	subi	r24, 0x7C	; 124
    3f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	e2 0f       	add	r30, r18
    3f70:	f3 1f       	adc	r31, r19
    3f72:	80 81       	ld	r24, Z
    3f74:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	a0 e2       	ldi	r26, 0x20	; 32
    3f7e:	b1 e4       	ldi	r27, 0x41	; 65
    3f80:	89 8f       	std	Y+25, r24	; 0x19
    3f82:	9a 8f       	std	Y+26, r25	; 0x1a
    3f84:	ab 8f       	std	Y+27, r26	; 0x1b
    3f86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f88:	69 8d       	ldd	r22, Y+25	; 0x19
    3f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	4a ef       	ldi	r20, 0xFA	; 250
    3f96:	54 e4       	ldi	r21, 0x44	; 68
    3f98:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	8d 8b       	std	Y+21, r24	; 0x15
    3fa2:	9e 8b       	std	Y+22, r25	; 0x16
    3fa4:	af 8b       	std	Y+23, r26	; 0x17
    3fa6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    3faa:	7e 89       	ldd	r23, Y+22	; 0x16
    3fac:	8f 89       	ldd	r24, Y+23	; 0x17
    3fae:	98 8d       	ldd	r25, Y+24	; 0x18
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e8       	ldi	r20, 0x80	; 128
    3fb6:	5f e3       	ldi	r21, 0x3F	; 63
    3fb8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    3fbc:	88 23       	and	r24, r24
    3fbe:	2c f4       	brge	.+10     	; 0x3fca <main+0xdee>
		__ticks = 1;
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	9c 8b       	std	Y+20, r25	; 0x14
    3fc6:	8b 8b       	std	Y+19, r24	; 0x13
    3fc8:	3f c0       	rjmp	.+126    	; 0x4048 <main+0xe6c>
	else if (__tmp > 65535)
    3fca:	6d 89       	ldd	r22, Y+21	; 0x15
    3fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    3fce:	8f 89       	ldd	r24, Y+23	; 0x17
    3fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	3f ef       	ldi	r19, 0xFF	; 255
    3fd6:	4f e7       	ldi	r20, 0x7F	; 127
    3fd8:	57 e4       	ldi	r21, 0x47	; 71
    3fda:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3fde:	18 16       	cp	r1, r24
    3fe0:	4c f5       	brge	.+82     	; 0x4034 <main+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe2:	69 8d       	ldd	r22, Y+25	; 0x19
    3fe4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	40 e2       	ldi	r20, 0x20	; 32
    3ff0:	51 e4       	ldi	r21, 0x41	; 65
    3ff2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	bc 01       	movw	r22, r24
    3ffc:	cd 01       	movw	r24, r26
    3ffe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	9c 8b       	std	Y+20, r25	; 0x14
    4008:	8b 8b       	std	Y+19, r24	; 0x13
    400a:	0f c0       	rjmp	.+30     	; 0x402a <main+0xe4e>
    400c:	88 ec       	ldi	r24, 0xC8	; 200
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	9a 8b       	std	Y+18, r25	; 0x12
    4012:	89 8b       	std	Y+17, r24	; 0x11
    4014:	89 89       	ldd	r24, Y+17	; 0x11
    4016:	9a 89       	ldd	r25, Y+18	; 0x12
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	f1 f7       	brne	.-4      	; 0x4018 <main+0xe3c>
    401c:	9a 8b       	std	Y+18, r25	; 0x12
    401e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4020:	8b 89       	ldd	r24, Y+19	; 0x13
    4022:	9c 89       	ldd	r25, Y+20	; 0x14
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	9c 8b       	std	Y+20, r25	; 0x14
    4028:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402a:	8b 89       	ldd	r24, Y+19	; 0x13
    402c:	9c 89       	ldd	r25, Y+20	; 0x14
    402e:	00 97       	sbiw	r24, 0x00	; 0
    4030:	69 f7       	brne	.-38     	; 0x400c <main+0xe30>
    4032:	14 c0       	rjmp	.+40     	; 0x405c <main+0xe80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4034:	6d 89       	ldd	r22, Y+21	; 0x15
    4036:	7e 89       	ldd	r23, Y+22	; 0x16
    4038:	8f 89       	ldd	r24, Y+23	; 0x17
    403a:	98 8d       	ldd	r25, Y+24	; 0x18
    403c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	9c 8b       	std	Y+20, r25	; 0x14
    4046:	8b 8b       	std	Y+19, r24	; 0x13
    4048:	8b 89       	ldd	r24, Y+19	; 0x13
    404a:	9c 89       	ldd	r25, Y+20	; 0x14
    404c:	98 8b       	std	Y+16, r25	; 0x10
    404e:	8f 87       	std	Y+15, r24	; 0x0f
    4050:	8f 85       	ldd	r24, Y+15	; 0x0f
    4052:	98 89       	ldd	r25, Y+16	; 0x10
    4054:	01 97       	sbiw	r24, 0x01	; 1
    4056:	f1 f7       	brne	.-4      	; 0x4054 <main+0xe78>
    4058:	98 8b       	std	Y+16, r25	; 0x10
    405a:	8f 87       	std	Y+15, r24	; 0x0f
						}
					}
					while (KEYPAD_getPressedKey() != 'E')
						;
					for (password_counter_digit = 0; password_counter_digit < 5;
							password_counter_digit++) {
    405c:	de 01       	movw	r26, r28
    405e:	a3 58       	subi	r26, 0x83	; 131
    4060:	bf 4f       	sbci	r27, 0xFF	; 255
    4062:	fe 01       	movw	r30, r28
    4064:	e3 58       	subi	r30, 0x83	; 131
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 81       	ld	r24, Z
    406a:	8f 5f       	subi	r24, 0xFF	; 255
    406c:	8c 93       	st	X, r24
							password_counter_digit++;
						}
					}
					while (KEYPAD_getPressedKey() != 'E')
						;
					for (password_counter_digit = 0; password_counter_digit < 5;
    406e:	fe 01       	movw	r30, r28
    4070:	e3 58       	subi	r30, 0x83	; 131
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	80 81       	ld	r24, Z
    4076:	85 30       	cpi	r24, 0x05	; 5
    4078:	08 f4       	brcc	.+2      	; 0x407c <main+0xea0>
    407a:	6f cf       	rjmp	.-290    	; 0x3f5a <main+0xd7e>
							password_counter_digit++) {
						UART_sendByte(password[password_counter_digit]);
						_delay_ms(10);
					}
					local_state2 = UART_recieveByte();
    407c:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    4080:	fe 01       	movw	r30, r28
    4082:	ee 58       	subi	r30, 0x8E	; 142
    4084:	ff 4f       	sbci	r31, 0xFF	; 255
    4086:	80 83       	st	Z, r24
					if (local_state2 == UART_PASS_MATCH) {
    4088:	fe 01       	movw	r30, r28
    408a:	ee 58       	subi	r30, 0x8E	; 142
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	80 81       	ld	r24, Z
    4090:	8e 30       	cpi	r24, 0x0E	; 14
    4092:	39 f4       	brne	.+14     	; 0x40a2 <main+0xec6>
						state = g_main;/*it function after check pass*/
    4094:	fe 01       	movw	r30, r28
    4096:	e4 58       	subi	r30, 0x84	; 132
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	80 91 0a 01 	lds	r24, 0x010A
    409e:	80 83       	st	Z, r24
    40a0:	c9 c0       	rjmp	.+402    	; 0x4234 <main+0x1058>
						break;
					} else {
						LCD_clearScreen();
    40a2:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
						LCD_displayString("WRONG PASS");
    40a6:	82 ee       	ldi	r24, 0xE2	; 226
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	aa ef       	ldi	r26, 0xFA	; 250
    40b4:	b3 e4       	ldi	r27, 0x43	; 67
    40b6:	8b 87       	std	Y+11, r24	; 0x0b
    40b8:	9c 87       	std	Y+12, r25	; 0x0c
    40ba:	ad 87       	std	Y+13, r26	; 0x0d
    40bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40be:	6b 85       	ldd	r22, Y+11	; 0x0b
    40c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    40c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	4a ef       	ldi	r20, 0xFA	; 250
    40cc:	54 e4       	ldi	r21, 0x44	; 68
    40ce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	8f 83       	std	Y+7, r24	; 0x07
    40d8:	98 87       	std	Y+8, r25	; 0x08
    40da:	a9 87       	std	Y+9, r26	; 0x09
    40dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40de:	6f 81       	ldd	r22, Y+7	; 0x07
    40e0:	78 85       	ldd	r23, Y+8	; 0x08
    40e2:	89 85       	ldd	r24, Y+9	; 0x09
    40e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e8       	ldi	r20, 0x80	; 128
    40ec:	5f e3       	ldi	r21, 0x3F	; 63
    40ee:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    40f2:	88 23       	and	r24, r24
    40f4:	2c f4       	brge	.+10     	; 0x4100 <main+0xf24>
		__ticks = 1;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	9e 83       	std	Y+6, r25	; 0x06
    40fc:	8d 83       	std	Y+5, r24	; 0x05
    40fe:	3f c0       	rjmp	.+126    	; 0x417e <main+0xfa2>
	else if (__tmp > 65535)
    4100:	6f 81       	ldd	r22, Y+7	; 0x07
    4102:	78 85       	ldd	r23, Y+8	; 0x08
    4104:	89 85       	ldd	r24, Y+9	; 0x09
    4106:	9a 85       	ldd	r25, Y+10	; 0x0a
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	3f ef       	ldi	r19, 0xFF	; 255
    410c:	4f e7       	ldi	r20, 0x7F	; 127
    410e:	57 e4       	ldi	r21, 0x47	; 71
    4110:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    4114:	18 16       	cp	r1, r24
    4116:	4c f5       	brge	.+82     	; 0x416a <main+0xf8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4118:	6b 85       	ldd	r22, Y+11	; 0x0b
    411a:	7c 85       	ldd	r23, Y+12	; 0x0c
    411c:	8d 85       	ldd	r24, Y+13	; 0x0d
    411e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	40 e2       	ldi	r20, 0x20	; 32
    4126:	51 e4       	ldi	r21, 0x41	; 65
    4128:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	bc 01       	movw	r22, r24
    4132:	cd 01       	movw	r24, r26
    4134:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	9e 83       	std	Y+6, r25	; 0x06
    413e:	8d 83       	std	Y+5, r24	; 0x05
    4140:	0f c0       	rjmp	.+30     	; 0x4160 <main+0xf84>
    4142:	88 ec       	ldi	r24, 0xC8	; 200
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	9c 83       	std	Y+4, r25	; 0x04
    4148:	8b 83       	std	Y+3, r24	; 0x03
    414a:	8b 81       	ldd	r24, Y+3	; 0x03
    414c:	9c 81       	ldd	r25, Y+4	; 0x04
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	f1 f7       	brne	.-4      	; 0x414e <main+0xf72>
    4152:	9c 83       	std	Y+4, r25	; 0x04
    4154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4156:	8d 81       	ldd	r24, Y+5	; 0x05
    4158:	9e 81       	ldd	r25, Y+6	; 0x06
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	9e 83       	std	Y+6, r25	; 0x06
    415e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4160:	8d 81       	ldd	r24, Y+5	; 0x05
    4162:	9e 81       	ldd	r25, Y+6	; 0x06
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	69 f7       	brne	.-38     	; 0x4142 <main+0xf66>
    4168:	14 c0       	rjmp	.+40     	; 0x4192 <main+0xfb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    416a:	6f 81       	ldd	r22, Y+7	; 0x07
    416c:	78 85       	ldd	r23, Y+8	; 0x08
    416e:	89 85       	ldd	r24, Y+9	; 0x09
    4170:	9a 85       	ldd	r25, Y+10	; 0x0a
    4172:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	9e 83       	std	Y+6, r25	; 0x06
    417c:	8d 83       	std	Y+5, r24	; 0x05
    417e:	8d 81       	ldd	r24, Y+5	; 0x05
    4180:	9e 81       	ldd	r25, Y+6	; 0x06
    4182:	9a 83       	std	Y+2, r25	; 0x02
    4184:	89 83       	std	Y+1, r24	; 0x01
    4186:	89 81       	ldd	r24, Y+1	; 0x01
    4188:	9a 81       	ldd	r25, Y+2	; 0x02
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	f1 f7       	brne	.-4      	; 0x418a <main+0xfae>
    418e:	9a 83       	std	Y+2, r25	; 0x02
    4190:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(500);
						LCD_clearScreen();
    4192:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
						g_try++;/*that the three try for wrong pass*/
    4196:	80 91 09 01 	lds	r24, 0x0109
    419a:	8f 5f       	subi	r24, 0xFF	; 255
    419c:	80 93 09 01 	sts	0x0109, r24
						/*to checking how many times that the pass enter
						 *and if enter more than 3 times breaking loop and
						 *stop prog for min and go to main*/
						if (g_try == 3) {
    41a0:	80 91 09 01 	lds	r24, 0x0109
    41a4:	83 30       	cpi	r24, 0x03	; 3
    41a6:	a1 f4       	brne	.+40     	; 0x41d0 <main+0xff4>
							LCD_clearScreen();
    41a8:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
							LCD_moveCursor(0, 6);
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	66 e0       	ldi	r22, 0x06	; 6
    41b0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCD_moveCursor>
							LCD_displayString("ERROR");
    41b4:	8d ee       	ldi	r24, 0xED	; 237
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <LCD_displayString>
							Delay_By_Uing_Timer1_Using_interput(60);/*waiting for min*/
    41bc:	8c e3       	ldi	r24, 0x3C	; 60
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	0e 94 3b 21 	call	0x4276	; 0x4276 <Delay_By_Uing_Timer1_Using_interput>
							state = MAIN;
    41c4:	fe 01       	movw	r30, r28
    41c6:	e4 58       	subi	r30, 0x84	; 132
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	85 e0       	ldi	r24, 0x05	; 5
    41cc:	80 83       	st	Z, r24
    41ce:	32 c0       	rjmp	.+100    	; 0x4234 <main+0x1058>
							break;
						}
						state = CHECK_PASS;/*a problem occurred and retry state*/
    41d0:	fe 01       	movw	r30, r28
    41d2:	e4 58       	subi	r30, 0x84	; 132
    41d4:	ff 4f       	sbci	r31, 0xFF	; 255
    41d6:	82 e0       	ldi	r24, 0x02	; 2
    41d8:	80 83       	st	Z, r24
    41da:	05 c0       	rjmp	.+10     	; 0x41e6 <main+0x100a>
					}

				} else {
					state = CHECK_PASS;/*a problem occurred and retry state*/
    41dc:	fe 01       	movw	r30, r28
    41de:	e4 58       	subi	r30, 0x84	; 132
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	82 e0       	ldi	r24, 0x02	; 2
    41e4:	80 83       	st	Z, r24
				}
			}
			/*******************************************************************************
			 *                                    CHECK_PASS                              *
			 *******************************************************************************/
			while (state == CHECK_PASS) {
    41e6:	fe 01       	movw	r30, r28
    41e8:	e4 58       	subi	r30, 0x84	; 132
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	80 81       	ld	r24, Z
    41ee:	82 30       	cpi	r24, 0x02	; 2
    41f0:	09 f4       	brne	.+2      	; 0x41f4 <main+0x1018>
    41f2:	cc cd       	rjmp	.-1128   	; 0x3d8c <main+0xbb0>
    41f4:	1f c0       	rjmp	.+62     	; 0x4234 <main+0x1058>
			}
			/*******************************************************************************
			 *                                    CHANGE_PASS                             *
			 *******************************************************************************/
			while (state == CHANGE_PASS) {
				uint8 local_state = 0;
    41f6:	fe 01       	movw	r30, r28
    41f8:	ef 58       	subi	r30, 0x8F	; 143
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	10 82       	st	Z, r1
				UART_sendByte(UART_CHANGE_PASS_READY);
    41fe:	80 e2       	ldi	r24, 0x20	; 32
    4200:	0e 94 b4 06 	call	0xd68	; 0xd68 <UART_sendByte>
				local_state = UART_recieveByte();
    4204:	0e 94 c8 06 	call	0xd90	; 0xd90 <UART_recieveByte>
    4208:	fe 01       	movw	r30, r28
    420a:	ef 58       	subi	r30, 0x8F	; 143
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	80 83       	st	Z, r24
				if (local_state == UART_CHANGE_PASS_YES_READY) {
    4210:	fe 01       	movw	r30, r28
    4212:	ef 58       	subi	r30, 0x8F	; 143
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	80 81       	ld	r24, Z
    4218:	81 32       	cpi	r24, 0x21	; 33
    421a:	39 f4       	brne	.+14     	; 0x422a <main+0x104e>
					state = CREATE_PASS;/*go to new password*/
    421c:	fe 01       	movw	r30, r28
    421e:	e4 58       	subi	r30, 0x84	; 132
    4220:	ff 4f       	sbci	r31, 0xFF	; 255
    4222:	10 82       	st	Z, r1
					LCD_clearScreen();
    4224:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <LCD_clearScreen>
    4228:	50 ca       	rjmp	.-2912   	; 0x36ca <main+0x4ee>
					break;
				} else {
					state = CHANGE_PASS;/*a problem occurred and retry state*/
    422a:	fe 01       	movw	r30, r28
    422c:	e4 58       	subi	r30, 0x84	; 132
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	84 e0       	ldi	r24, 0x04	; 4
    4232:	80 83       	st	Z, r24
				}
			}
			/*******************************************************************************
			 *                                    CHANGE_PASS                             *
			 *******************************************************************************/
			while (state == CHANGE_PASS) {
    4234:	fe 01       	movw	r30, r28
    4236:	e4 58       	subi	r30, 0x84	; 132
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 81       	ld	r24, Z
    423c:	84 30       	cpi	r24, 0x04	; 4
    423e:	d9 f2       	breq	.-74     	; 0x41f6 <main+0x101a>
    4240:	44 ca       	rjmp	.-2936   	; 0x36ca <main+0x4ee>
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	90 e0       	ldi	r25, 0x00	; 0
//while(1)
		}
		//if
	}
//main
}
    4246:	c3 57       	subi	r28, 0x73	; 115
    4248:	df 4f       	sbci	r29, 0xFF	; 255
    424a:	0f b6       	in	r0, 0x3f	; 63
    424c:	f8 94       	cli
    424e:	de bf       	out	0x3e, r29	; 62
    4250:	0f be       	out	0x3f, r0	; 63
    4252:	cd bf       	out	0x3d, r28	; 61
    4254:	cf 91       	pop	r28
    4256:	df 91       	pop	r29
    4258:	1f 91       	pop	r17
    425a:	0f 91       	pop	r16
    425c:	08 95       	ret

0000425e <count_Seconds>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*func to count sec by callback*/
void count_Seconds(void) {
    425e:	df 93       	push	r29
    4260:	cf 93       	push	r28
    4262:	cd b7       	in	r28, 0x3d	; 61
    4264:	de b7       	in	r29, 0x3e	; 62
	g_sec = g_sec + 1;
    4266:	80 91 08 01 	lds	r24, 0x0108
    426a:	8f 5f       	subi	r24, 0xFF	; 255
    426c:	80 93 08 01 	sts	0x0108, r24
}
    4270:	cf 91       	pop	r28
    4272:	df 91       	pop	r29
    4274:	08 95       	ret

00004276 <Delay_By_Uing_Timer1_Using_interput>:
/*using timer 1 as delaying*/
void Delay_By_Uing_Timer1_Using_interput(uint16 SecDelay) {
    4276:	df 93       	push	r29
    4278:	cf 93       	push	r28
    427a:	cd b7       	in	r28, 0x3d	; 61
    427c:	de b7       	in	r29, 0x3e	; 62
    427e:	2d 97       	sbiw	r28, 0x0d	; 13
    4280:	0f b6       	in	r0, 0x3f	; 63
    4282:	f8 94       	cli
    4284:	de bf       	out	0x3e, r29	; 62
    4286:	0f be       	out	0x3f, r0	; 63
    4288:	cd bf       	out	0x3d, r28	; 61
    428a:	98 87       	std	Y+8, r25	; 0x08
    428c:	8f 83       	std	Y+7, r24	; 0x07
	Timer1_setCallBack(count_Seconds);
    428e:	8f e2       	ldi	r24, 0x2F	; 47
    4290:	91 e2       	ldi	r25, 0x21	; 33
    4292:	0e 94 75 09 	call	0x12ea	; 0x12ea <Timer1_setCallBack>

	/*Ttimer=256/8*1000000 = .000032sec
	 * ocra1 = 1sec/.000032 = 31250*/
	Timer1_ConfigType Local_timer1_Config = { 0, 31250, Timer1_Prescaler_F_256,
			Timer1_Mode_4_CTC };
    4296:	ce 01       	movw	r24, r28
    4298:	01 96       	adiw	r24, 0x01	; 1
    429a:	9a 87       	std	Y+10, r25	; 0x0a
    429c:	89 87       	std	Y+9, r24	; 0x09
    429e:	e0 e0       	ldi	r30, 0x00	; 0
    42a0:	f1 e0       	ldi	r31, 0x01	; 1
    42a2:	fc 87       	std	Y+12, r31	; 0x0c
    42a4:	eb 87       	std	Y+11, r30	; 0x0b
    42a6:	f6 e0       	ldi	r31, 0x06	; 6
    42a8:	fd 87       	std	Y+13, r31	; 0x0d
    42aa:	eb 85       	ldd	r30, Y+11	; 0x0b
    42ac:	fc 85       	ldd	r31, Y+12	; 0x0c
    42ae:	00 80       	ld	r0, Z
    42b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    42b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    42b4:	01 96       	adiw	r24, 0x01	; 1
    42b6:	9c 87       	std	Y+12, r25	; 0x0c
    42b8:	8b 87       	std	Y+11, r24	; 0x0b
    42ba:	e9 85       	ldd	r30, Y+9	; 0x09
    42bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    42be:	00 82       	st	Z, r0
    42c0:	89 85       	ldd	r24, Y+9	; 0x09
    42c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c4:	01 96       	adiw	r24, 0x01	; 1
    42c6:	9a 87       	std	Y+10, r25	; 0x0a
    42c8:	89 87       	std	Y+9, r24	; 0x09
    42ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    42cc:	91 50       	subi	r25, 0x01	; 1
    42ce:	9d 87       	std	Y+13, r25	; 0x0d
    42d0:	ed 85       	ldd	r30, Y+13	; 0x0d
    42d2:	ee 23       	and	r30, r30
    42d4:	51 f7       	brne	.-44     	; 0x42aa <Delay_By_Uing_Timer1_Using_interput+0x34>
	Timer1_init(&Local_timer1_Config);
    42d6:	ce 01       	movw	r24, r28
    42d8:	01 96       	adiw	r24, 0x01	; 1
    42da:	0e 94 aa 07 	call	0xf54	; 0xf54 <Timer1_init>
	Timer1_setCallBack(count_Seconds);
    42de:	8f e2       	ldi	r24, 0x2F	; 47
    42e0:	91 e2       	ldi	r25, 0x21	; 33
    42e2:	0e 94 75 09 	call	0x12ea	; 0x12ea <Timer1_setCallBack>
	while (g_sec < SecDelay) {
    42e6:	80 91 08 01 	lds	r24, 0x0108
    42ea:	28 2f       	mov	r18, r24
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	8f 81       	ldd	r24, Y+7	; 0x07
    42f0:	98 85       	ldd	r25, Y+8	; 0x08
    42f2:	28 17       	cp	r18, r24
    42f4:	39 07       	cpc	r19, r25
    42f6:	b8 f3       	brcs	.-18     	; 0x42e6 <Delay_By_Uing_Timer1_Using_interput+0x70>

	}

	Timer1_deInit();
    42f8:	0e 94 55 09 	call	0x12aa	; 0x12aa <Timer1_deInit>
	g_sec = 0;
    42fc:	10 92 08 01 	sts	0x0108, r1
}
    4300:	2d 96       	adiw	r28, 0x0d	; 13
    4302:	0f b6       	in	r0, 0x3f	; 63
    4304:	f8 94       	cli
    4306:	de bf       	out	0x3e, r29	; 62
    4308:	0f be       	out	0x3f, r0	; 63
    430a:	cd bf       	out	0x3d, r28	; 61
    430c:	cf 91       	pop	r28
    430e:	df 91       	pop	r29
    4310:	08 95       	ret

00004312 <__udivmodsi4>:
    4312:	a1 e2       	ldi	r26, 0x21	; 33
    4314:	1a 2e       	mov	r1, r26
    4316:	aa 1b       	sub	r26, r26
    4318:	bb 1b       	sub	r27, r27
    431a:	fd 01       	movw	r30, r26
    431c:	0d c0       	rjmp	.+26     	; 0x4338 <__udivmodsi4_ep>

0000431e <__udivmodsi4_loop>:
    431e:	aa 1f       	adc	r26, r26
    4320:	bb 1f       	adc	r27, r27
    4322:	ee 1f       	adc	r30, r30
    4324:	ff 1f       	adc	r31, r31
    4326:	a2 17       	cp	r26, r18
    4328:	b3 07       	cpc	r27, r19
    432a:	e4 07       	cpc	r30, r20
    432c:	f5 07       	cpc	r31, r21
    432e:	20 f0       	brcs	.+8      	; 0x4338 <__udivmodsi4_ep>
    4330:	a2 1b       	sub	r26, r18
    4332:	b3 0b       	sbc	r27, r19
    4334:	e4 0b       	sbc	r30, r20
    4336:	f5 0b       	sbc	r31, r21

00004338 <__udivmodsi4_ep>:
    4338:	66 1f       	adc	r22, r22
    433a:	77 1f       	adc	r23, r23
    433c:	88 1f       	adc	r24, r24
    433e:	99 1f       	adc	r25, r25
    4340:	1a 94       	dec	r1
    4342:	69 f7       	brne	.-38     	; 0x431e <__udivmodsi4_loop>
    4344:	60 95       	com	r22
    4346:	70 95       	com	r23
    4348:	80 95       	com	r24
    434a:	90 95       	com	r25
    434c:	9b 01       	movw	r18, r22
    434e:	ac 01       	movw	r20, r24
    4350:	bd 01       	movw	r22, r26
    4352:	cf 01       	movw	r24, r30
    4354:	08 95       	ret

00004356 <__prologue_saves__>:
    4356:	2f 92       	push	r2
    4358:	3f 92       	push	r3
    435a:	4f 92       	push	r4
    435c:	5f 92       	push	r5
    435e:	6f 92       	push	r6
    4360:	7f 92       	push	r7
    4362:	8f 92       	push	r8
    4364:	9f 92       	push	r9
    4366:	af 92       	push	r10
    4368:	bf 92       	push	r11
    436a:	cf 92       	push	r12
    436c:	df 92       	push	r13
    436e:	ef 92       	push	r14
    4370:	ff 92       	push	r15
    4372:	0f 93       	push	r16
    4374:	1f 93       	push	r17
    4376:	cf 93       	push	r28
    4378:	df 93       	push	r29
    437a:	cd b7       	in	r28, 0x3d	; 61
    437c:	de b7       	in	r29, 0x3e	; 62
    437e:	ca 1b       	sub	r28, r26
    4380:	db 0b       	sbc	r29, r27
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	f8 94       	cli
    4386:	de bf       	out	0x3e, r29	; 62
    4388:	0f be       	out	0x3f, r0	; 63
    438a:	cd bf       	out	0x3d, r28	; 61
    438c:	09 94       	ijmp

0000438e <__epilogue_restores__>:
    438e:	2a 88       	ldd	r2, Y+18	; 0x12
    4390:	39 88       	ldd	r3, Y+17	; 0x11
    4392:	48 88       	ldd	r4, Y+16	; 0x10
    4394:	5f 84       	ldd	r5, Y+15	; 0x0f
    4396:	6e 84       	ldd	r6, Y+14	; 0x0e
    4398:	7d 84       	ldd	r7, Y+13	; 0x0d
    439a:	8c 84       	ldd	r8, Y+12	; 0x0c
    439c:	9b 84       	ldd	r9, Y+11	; 0x0b
    439e:	aa 84       	ldd	r10, Y+10	; 0x0a
    43a0:	b9 84       	ldd	r11, Y+9	; 0x09
    43a2:	c8 84       	ldd	r12, Y+8	; 0x08
    43a4:	df 80       	ldd	r13, Y+7	; 0x07
    43a6:	ee 80       	ldd	r14, Y+6	; 0x06
    43a8:	fd 80       	ldd	r15, Y+5	; 0x05
    43aa:	0c 81       	ldd	r16, Y+4	; 0x04
    43ac:	1b 81       	ldd	r17, Y+3	; 0x03
    43ae:	aa 81       	ldd	r26, Y+2	; 0x02
    43b0:	b9 81       	ldd	r27, Y+1	; 0x01
    43b2:	ce 0f       	add	r28, r30
    43b4:	d1 1d       	adc	r29, r1
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	f8 94       	cli
    43ba:	de bf       	out	0x3e, r29	; 62
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	cd bf       	out	0x3d, r28	; 61
    43c0:	ed 01       	movw	r28, r26
    43c2:	08 95       	ret

000043c4 <dtostrf>:
    43c4:	ef 92       	push	r14
    43c6:	ff 92       	push	r15
    43c8:	0f 93       	push	r16
    43ca:	1f 93       	push	r17
    43cc:	f2 2f       	mov	r31, r18
    43ce:	f0 2e       	mov	r15, r16
    43d0:	47 fd       	sbrc	r20, 7
    43d2:	02 c0       	rjmp	.+4      	; 0x43d8 <dtostrf+0x14>
    43d4:	e4 e0       	ldi	r30, 0x04	; 4
    43d6:	01 c0       	rjmp	.+2      	; 0x43da <dtostrf+0x16>
    43d8:	e4 e1       	ldi	r30, 0x14	; 20
    43da:	24 2f       	mov	r18, r20
    43dc:	33 27       	eor	r19, r19
    43de:	27 fd       	sbrc	r18, 7
    43e0:	30 95       	com	r19
    43e2:	37 ff       	sbrs	r19, 7
    43e4:	03 c0       	rjmp	.+6      	; 0x43ec <dtostrf+0x28>
    43e6:	30 95       	com	r19
    43e8:	21 95       	neg	r18
    43ea:	3f 4f       	sbci	r19, 0xFF	; 255
    43ec:	4f 2d       	mov	r20, r15
    43ee:	51 2f       	mov	r21, r17
    43f0:	0f 2f       	mov	r16, r31
    43f2:	ee 2e       	mov	r14, r30
    43f4:	0e 94 24 22 	call	0x4448	; 0x4448 <dtoa_prf>
    43f8:	8f 2d       	mov	r24, r15
    43fa:	91 2f       	mov	r25, r17
    43fc:	1f 91       	pop	r17
    43fe:	0f 91       	pop	r16
    4400:	ff 90       	pop	r15
    4402:	ef 90       	pop	r14
    4404:	08 95       	ret

00004406 <itoa>:
    4406:	fb 01       	movw	r30, r22
    4408:	9f 01       	movw	r18, r30
    440a:	e8 94       	clt
    440c:	42 30       	cpi	r20, 0x02	; 2
    440e:	c4 f0       	brlt	.+48     	; 0x4440 <itoa+0x3a>
    4410:	45 32       	cpi	r20, 0x25	; 37
    4412:	b4 f4       	brge	.+44     	; 0x4440 <itoa+0x3a>
    4414:	4a 30       	cpi	r20, 0x0A	; 10
    4416:	29 f4       	brne	.+10     	; 0x4422 <itoa+0x1c>
    4418:	97 fb       	bst	r25, 7
    441a:	1e f4       	brtc	.+6      	; 0x4422 <itoa+0x1c>
    441c:	90 95       	com	r25
    441e:	81 95       	neg	r24
    4420:	9f 4f       	sbci	r25, 0xFF	; 255
    4422:	64 2f       	mov	r22, r20
    4424:	77 27       	eor	r23, r23
    4426:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__udivmodhi4>
    442a:	80 5d       	subi	r24, 0xD0	; 208
    442c:	8a 33       	cpi	r24, 0x3A	; 58
    442e:	0c f0       	brlt	.+2      	; 0x4432 <itoa+0x2c>
    4430:	89 5d       	subi	r24, 0xD9	; 217
    4432:	81 93       	st	Z+, r24
    4434:	cb 01       	movw	r24, r22
    4436:	00 97       	sbiw	r24, 0x00	; 0
    4438:	a1 f7       	brne	.-24     	; 0x4422 <itoa+0x1c>
    443a:	16 f4       	brtc	.+4      	; 0x4440 <itoa+0x3a>
    443c:	5d e2       	ldi	r21, 0x2D	; 45
    443e:	51 93       	st	Z+, r21
    4440:	10 82       	st	Z, r1
    4442:	c9 01       	movw	r24, r18
    4444:	0c 94 5e 24 	jmp	0x48bc	; 0x48bc <strrev>

00004448 <dtoa_prf>:
    4448:	a9 e0       	ldi	r26, 0x09	; 9
    444a:	b0 e0       	ldi	r27, 0x00	; 0
    444c:	ea e2       	ldi	r30, 0x2A	; 42
    444e:	f2 e2       	ldi	r31, 0x22	; 34
    4450:	0c 94 af 21 	jmp	0x435e	; 0x435e <__prologue_saves__+0x8>
    4454:	6a 01       	movw	r12, r20
    4456:	12 2f       	mov	r17, r18
    4458:	a0 2e       	mov	r10, r16
    445a:	be 2c       	mov	r11, r14
    445c:	2b e3       	ldi	r18, 0x3B	; 59
    445e:	20 17       	cp	r18, r16
    4460:	18 f4       	brcc	.+6      	; 0x4468 <dtoa_prf+0x20>
    4462:	2c e3       	ldi	r18, 0x3C	; 60
    4464:	92 2e       	mov	r9, r18
    4466:	02 c0       	rjmp	.+4      	; 0x446c <dtoa_prf+0x24>
    4468:	90 2e       	mov	r9, r16
    446a:	93 94       	inc	r9
    446c:	ae 01       	movw	r20, r28
    446e:	4f 5f       	subi	r20, 0xFF	; 255
    4470:	5f 4f       	sbci	r21, 0xFF	; 255
    4472:	27 e0       	ldi	r18, 0x07	; 7
    4474:	09 2d       	mov	r16, r9
    4476:	0e 94 86 23 	call	0x470c	; 0x470c <__ftoa_engine>
    447a:	bc 01       	movw	r22, r24
    447c:	89 81       	ldd	r24, Y+1	; 0x01
    447e:	e8 2e       	mov	r14, r24
    4480:	ff 24       	eor	r15, r15
    4482:	c7 01       	movw	r24, r14
    4484:	89 70       	andi	r24, 0x09	; 9
    4486:	90 70       	andi	r25, 0x00	; 0
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	11 f4       	brne	.+4      	; 0x4490 <dtoa_prf+0x48>
    448c:	ad e2       	ldi	r26, 0x2D	; 45
    448e:	09 c0       	rjmp	.+18     	; 0x44a2 <dtoa_prf+0x5a>
    4490:	b1 fe       	sbrs	r11, 1
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <dtoa_prf+0x50>
    4494:	ab e2       	ldi	r26, 0x2B	; 43
    4496:	05 c0       	rjmp	.+10     	; 0x44a2 <dtoa_prf+0x5a>
    4498:	b0 fc       	sbrc	r11, 0
    449a:	02 c0       	rjmp	.+4      	; 0x44a0 <dtoa_prf+0x58>
    449c:	a0 e0       	ldi	r26, 0x00	; 0
    449e:	01 c0       	rjmp	.+2      	; 0x44a2 <dtoa_prf+0x5a>
    44a0:	a0 e2       	ldi	r26, 0x20	; 32
    44a2:	e3 fe       	sbrs	r14, 3
    44a4:	3b c0       	rjmp	.+118    	; 0x451c <dtoa_prf+0xd4>
    44a6:	aa 23       	and	r26, r26
    44a8:	11 f4       	brne	.+4      	; 0x44ae <dtoa_prf+0x66>
    44aa:	23 e0       	ldi	r18, 0x03	; 3
    44ac:	01 c0       	rjmp	.+2      	; 0x44b0 <dtoa_prf+0x68>
    44ae:	24 e0       	ldi	r18, 0x04	; 4
    44b0:	21 17       	cp	r18, r17
    44b2:	10 f0       	brcs	.+4      	; 0x44b8 <dtoa_prf+0x70>
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	02 c0       	rjmp	.+4      	; 0x44bc <dtoa_prf+0x74>
    44b8:	12 1b       	sub	r17, r18
    44ba:	21 2f       	mov	r18, r17
    44bc:	eb 2c       	mov	r14, r11
    44be:	b4 fe       	sbrs	r11, 4
    44c0:	02 c0       	rjmp	.+4      	; 0x44c6 <dtoa_prf+0x7e>
    44c2:	32 2f       	mov	r19, r18
    44c4:	0a c0       	rjmp	.+20     	; 0x44da <dtoa_prf+0x92>
    44c6:	f6 01       	movw	r30, r12
    44c8:	32 2f       	mov	r19, r18
    44ca:	80 e2       	ldi	r24, 0x20	; 32
    44cc:	02 c0       	rjmp	.+4      	; 0x44d2 <dtoa_prf+0x8a>
    44ce:	81 93       	st	Z+, r24
    44d0:	31 50       	subi	r19, 0x01	; 1
    44d2:	33 23       	and	r19, r19
    44d4:	e1 f7       	brne	.-8      	; 0x44ce <dtoa_prf+0x86>
    44d6:	c2 0e       	add	r12, r18
    44d8:	d1 1c       	adc	r13, r1
    44da:	aa 23       	and	r26, r26
    44dc:	19 f0       	breq	.+6      	; 0x44e4 <dtoa_prf+0x9c>
    44de:	f6 01       	movw	r30, r12
    44e0:	a1 93       	st	Z+, r26
    44e2:	6f 01       	movw	r12, r30
    44e4:	f6 01       	movw	r30, r12
    44e6:	31 96       	adiw	r30, 0x01	; 1
    44e8:	e2 fe       	sbrs	r14, 2
    44ea:	05 c0       	rjmp	.+10     	; 0x44f6 <dtoa_prf+0xae>
    44ec:	9e e4       	ldi	r25, 0x4E	; 78
    44ee:	d6 01       	movw	r26, r12
    44f0:	9c 93       	st	X, r25
    44f2:	81 e4       	ldi	r24, 0x41	; 65
    44f4:	04 c0       	rjmp	.+8      	; 0x44fe <dtoa_prf+0xb6>
    44f6:	9e e6       	ldi	r25, 0x6E	; 110
    44f8:	d6 01       	movw	r26, r12
    44fa:	9c 93       	st	X, r25
    44fc:	81 e6       	ldi	r24, 0x61	; 97
    44fe:	11 96       	adiw	r26, 0x01	; 1
    4500:	8c 93       	st	X, r24
    4502:	91 83       	std	Z+1, r25	; 0x01
    4504:	32 96       	adiw	r30, 0x02	; 2
    4506:	df 01       	movw	r26, r30
    4508:	83 2f       	mov	r24, r19
    450a:	90 e2       	ldi	r25, 0x20	; 32
    450c:	02 c0       	rjmp	.+4      	; 0x4512 <dtoa_prf+0xca>
    450e:	9d 93       	st	X+, r25
    4510:	81 50       	subi	r24, 0x01	; 1
    4512:	88 23       	and	r24, r24
    4514:	e1 f7       	brne	.-8      	; 0x450e <dtoa_prf+0xc6>
    4516:	e3 0f       	add	r30, r19
    4518:	f1 1d       	adc	r31, r1
    451a:	40 c0       	rjmp	.+128    	; 0x459c <dtoa_prf+0x154>
    451c:	e2 fe       	sbrs	r14, 2
    451e:	42 c0       	rjmp	.+132    	; 0x45a4 <dtoa_prf+0x15c>
    4520:	aa 23       	and	r26, r26
    4522:	11 f4       	brne	.+4      	; 0x4528 <dtoa_prf+0xe0>
    4524:	23 e0       	ldi	r18, 0x03	; 3
    4526:	01 c0       	rjmp	.+2      	; 0x452a <dtoa_prf+0xe2>
    4528:	24 e0       	ldi	r18, 0x04	; 4
    452a:	21 17       	cp	r18, r17
    452c:	10 f0       	brcs	.+4      	; 0x4532 <dtoa_prf+0xea>
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	02 c0       	rjmp	.+4      	; 0x4536 <dtoa_prf+0xee>
    4532:	12 1b       	sub	r17, r18
    4534:	21 2f       	mov	r18, r17
    4536:	eb 2c       	mov	r14, r11
    4538:	b4 fe       	sbrs	r11, 4
    453a:	02 c0       	rjmp	.+4      	; 0x4540 <dtoa_prf+0xf8>
    453c:	92 2f       	mov	r25, r18
    453e:	0a c0       	rjmp	.+20     	; 0x4554 <dtoa_prf+0x10c>
    4540:	f6 01       	movw	r30, r12
    4542:	92 2f       	mov	r25, r18
    4544:	80 e2       	ldi	r24, 0x20	; 32
    4546:	02 c0       	rjmp	.+4      	; 0x454c <dtoa_prf+0x104>
    4548:	81 93       	st	Z+, r24
    454a:	91 50       	subi	r25, 0x01	; 1
    454c:	99 23       	and	r25, r25
    454e:	e1 f7       	brne	.-8      	; 0x4548 <dtoa_prf+0x100>
    4550:	c2 0e       	add	r12, r18
    4552:	d1 1c       	adc	r13, r1
    4554:	aa 23       	and	r26, r26
    4556:	19 f0       	breq	.+6      	; 0x455e <dtoa_prf+0x116>
    4558:	f6 01       	movw	r30, r12
    455a:	a1 93       	st	Z+, r26
    455c:	6f 01       	movw	r12, r30
    455e:	f6 01       	movw	r30, r12
    4560:	31 96       	adiw	r30, 0x01	; 1
    4562:	e2 fe       	sbrs	r14, 2
    4564:	08 c0       	rjmp	.+16     	; 0x4576 <dtoa_prf+0x12e>
    4566:	89 e4       	ldi	r24, 0x49	; 73
    4568:	d6 01       	movw	r26, r12
    456a:	8c 93       	st	X, r24
    456c:	8e e4       	ldi	r24, 0x4E	; 78
    456e:	11 96       	adiw	r26, 0x01	; 1
    4570:	8c 93       	st	X, r24
    4572:	86 e4       	ldi	r24, 0x46	; 70
    4574:	07 c0       	rjmp	.+14     	; 0x4584 <dtoa_prf+0x13c>
    4576:	89 e6       	ldi	r24, 0x69	; 105
    4578:	d6 01       	movw	r26, r12
    457a:	8c 93       	st	X, r24
    457c:	8e e6       	ldi	r24, 0x6E	; 110
    457e:	11 96       	adiw	r26, 0x01	; 1
    4580:	8c 93       	st	X, r24
    4582:	86 e6       	ldi	r24, 0x66	; 102
    4584:	81 83       	std	Z+1, r24	; 0x01
    4586:	32 96       	adiw	r30, 0x02	; 2
    4588:	df 01       	movw	r26, r30
    458a:	89 2f       	mov	r24, r25
    458c:	20 e2       	ldi	r18, 0x20	; 32
    458e:	02 c0       	rjmp	.+4      	; 0x4594 <dtoa_prf+0x14c>
    4590:	2d 93       	st	X+, r18
    4592:	81 50       	subi	r24, 0x01	; 1
    4594:	88 23       	and	r24, r24
    4596:	e1 f7       	brne	.-8      	; 0x4590 <dtoa_prf+0x148>
    4598:	e9 0f       	add	r30, r25
    459a:	f1 1d       	adc	r31, r1
    459c:	10 82       	st	Z, r1
    459e:	2e ef       	ldi	r18, 0xFE	; 254
    45a0:	3f ef       	ldi	r19, 0xFF	; 255
    45a2:	af c0       	rjmp	.+350    	; 0x4702 <dtoa_prf+0x2ba>
    45a4:	16 16       	cp	r1, r22
    45a6:	17 06       	cpc	r1, r23
    45a8:	1c f0       	brlt	.+6      	; 0x45b0 <dtoa_prf+0x168>
    45aa:	41 e0       	ldi	r20, 0x01	; 1
    45ac:	50 e0       	ldi	r21, 0x00	; 0
    45ae:	03 c0       	rjmp	.+6      	; 0x45b6 <dtoa_prf+0x16e>
    45b0:	ab 01       	movw	r20, r22
    45b2:	4f 5f       	subi	r20, 0xFF	; 255
    45b4:	5f 4f       	sbci	r21, 0xFF	; 255
    45b6:	aa 20       	and	r10, r10
    45b8:	19 f4       	brne	.+6      	; 0x45c0 <dtoa_prf+0x178>
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	03 c0       	rjmp	.+6      	; 0x45c6 <dtoa_prf+0x17e>
    45c0:	8a 2d       	mov	r24, r10
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	01 96       	adiw	r24, 0x01	; 1
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	30 e0       	ldi	r19, 0x00	; 0
    45ca:	aa 23       	and	r26, r26
    45cc:	11 f0       	breq	.+4      	; 0x45d2 <dtoa_prf+0x18a>
    45ce:	21 e0       	ldi	r18, 0x01	; 1
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	24 0f       	add	r18, r20
    45d4:	35 1f       	adc	r19, r21
    45d6:	28 0f       	add	r18, r24
    45d8:	39 1f       	adc	r19, r25
    45da:	81 2f       	mov	r24, r17
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	28 17       	cp	r18, r24
    45e0:	39 07       	cpc	r19, r25
    45e2:	14 f0       	brlt	.+4      	; 0x45e8 <dtoa_prf+0x1a0>
    45e4:	20 e0       	ldi	r18, 0x00	; 0
    45e6:	02 c0       	rjmp	.+4      	; 0x45ec <dtoa_prf+0x1a4>
    45e8:	12 1b       	sub	r17, r18
    45ea:	21 2f       	mov	r18, r17
    45ec:	4b 2d       	mov	r20, r11
    45ee:	50 e0       	ldi	r21, 0x00	; 0
    45f0:	ca 01       	movw	r24, r20
    45f2:	80 71       	andi	r24, 0x10	; 16
    45f4:	90 70       	andi	r25, 0x00	; 0
    45f6:	b4 fc       	sbrc	r11, 4
    45f8:	0d c0       	rjmp	.+26     	; 0x4614 <dtoa_prf+0x1cc>
    45fa:	b3 fc       	sbrc	r11, 3
    45fc:	0b c0       	rjmp	.+22     	; 0x4614 <dtoa_prf+0x1cc>
    45fe:	f6 01       	movw	r30, r12
    4600:	32 2f       	mov	r19, r18
    4602:	40 e2       	ldi	r20, 0x20	; 32
    4604:	02 c0       	rjmp	.+4      	; 0x460a <dtoa_prf+0x1c2>
    4606:	41 93       	st	Z+, r20
    4608:	31 50       	subi	r19, 0x01	; 1
    460a:	33 23       	and	r19, r19
    460c:	e1 f7       	brne	.-8      	; 0x4606 <dtoa_prf+0x1be>
    460e:	c2 0e       	add	r12, r18
    4610:	d1 1c       	adc	r13, r1
    4612:	01 c0       	rjmp	.+2      	; 0x4616 <dtoa_prf+0x1ce>
    4614:	32 2f       	mov	r19, r18
    4616:	aa 23       	and	r26, r26
    4618:	19 f0       	breq	.+6      	; 0x4620 <dtoa_prf+0x1d8>
    461a:	f6 01       	movw	r30, r12
    461c:	a1 93       	st	Z+, r26
    461e:	6f 01       	movw	r12, r30
    4620:	89 2b       	or	r24, r25
    4622:	11 f0       	breq	.+4      	; 0x4628 <dtoa_prf+0x1e0>
    4624:	13 2f       	mov	r17, r19
    4626:	0a c0       	rjmp	.+20     	; 0x463c <dtoa_prf+0x1f4>
    4628:	f6 01       	movw	r30, r12
    462a:	13 2f       	mov	r17, r19
    462c:	80 e3       	ldi	r24, 0x30	; 48
    462e:	02 c0       	rjmp	.+4      	; 0x4634 <dtoa_prf+0x1ec>
    4630:	81 93       	st	Z+, r24
    4632:	11 50       	subi	r17, 0x01	; 1
    4634:	11 23       	and	r17, r17
    4636:	e1 f7       	brne	.-8      	; 0x4630 <dtoa_prf+0x1e8>
    4638:	c3 0e       	add	r12, r19
    463a:	d1 1c       	adc	r13, r1
    463c:	09 2d       	mov	r16, r9
    463e:	06 0f       	add	r16, r22
    4640:	ba 80       	ldd	r11, Y+2	; 0x02
    4642:	90 e1       	ldi	r25, 0x10	; 16
    4644:	89 2e       	mov	r8, r25
    4646:	91 2c       	mov	r9, r1
    4648:	8e 20       	and	r8, r14
    464a:	9f 20       	and	r9, r15
    464c:	e4 fe       	sbrs	r14, 4
    464e:	04 c0       	rjmp	.+8      	; 0x4658 <dtoa_prf+0x210>
    4650:	f1 e3       	ldi	r31, 0x31	; 49
    4652:	bf 16       	cp	r11, r31
    4654:	09 f4       	brne	.+2      	; 0x4658 <dtoa_prf+0x210>
    4656:	01 50       	subi	r16, 0x01	; 1
    4658:	10 16       	cp	r1, r16
    465a:	14 f0       	brlt	.+4      	; 0x4660 <dtoa_prf+0x218>
    465c:	01 e0       	ldi	r16, 0x01	; 1
    465e:	03 c0       	rjmp	.+6      	; 0x4666 <dtoa_prf+0x21e>
    4660:	09 30       	cpi	r16, 0x09	; 9
    4662:	08 f0       	brcs	.+2      	; 0x4666 <dtoa_prf+0x21e>
    4664:	08 e0       	ldi	r16, 0x08	; 8
    4666:	9b 01       	movw	r18, r22
    4668:	77 ff       	sbrs	r23, 7
    466a:	02 c0       	rjmp	.+4      	; 0x4670 <dtoa_prf+0x228>
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	cb 01       	movw	r24, r22
    4672:	01 96       	adiw	r24, 0x01	; 1
    4674:	82 1b       	sub	r24, r18
    4676:	93 0b       	sbc	r25, r19
    4678:	fe 01       	movw	r30, r28
    467a:	31 96       	adiw	r30, 0x01	; 1
    467c:	e8 0f       	add	r30, r24
    467e:	f9 1f       	adc	r31, r25
    4680:	8e e2       	ldi	r24, 0x2E	; 46
    4682:	f8 2e       	mov	r15, r24
    4684:	3b 01       	movw	r6, r22
    4686:	60 1a       	sub	r6, r16
    4688:	71 08       	sbc	r7, r1
    468a:	8a 2d       	mov	r24, r10
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	44 27       	eor	r20, r20
    4690:	55 27       	eor	r21, r21
    4692:	48 1b       	sub	r20, r24
    4694:	59 0b       	sbc	r21, r25
    4696:	8f ef       	ldi	r24, 0xFF	; 255
    4698:	2f 3f       	cpi	r18, 0xFF	; 255
    469a:	38 07       	cpc	r19, r24
    469c:	19 f4       	brne	.+6      	; 0x46a4 <dtoa_prf+0x25c>
    469e:	d6 01       	movw	r26, r12
    46a0:	fd 92       	st	X+, r15
    46a2:	6d 01       	movw	r12, r26
    46a4:	62 17       	cp	r22, r18
    46a6:	73 07       	cpc	r23, r19
    46a8:	2c f0       	brlt	.+10     	; 0x46b4 <dtoa_prf+0x26c>
    46aa:	62 16       	cp	r6, r18
    46ac:	73 06       	cpc	r7, r19
    46ae:	14 f4       	brge	.+4      	; 0x46b4 <dtoa_prf+0x26c>
    46b0:	80 81       	ld	r24, Z
    46b2:	01 c0       	rjmp	.+2      	; 0x46b6 <dtoa_prf+0x26e>
    46b4:	80 e3       	ldi	r24, 0x30	; 48
    46b6:	21 50       	subi	r18, 0x01	; 1
    46b8:	30 40       	sbci	r19, 0x00	; 0
    46ba:	31 96       	adiw	r30, 0x01	; 1
    46bc:	24 17       	cp	r18, r20
    46be:	35 07       	cpc	r19, r21
    46c0:	24 f0       	brlt	.+8      	; 0x46ca <dtoa_prf+0x282>
    46c2:	d6 01       	movw	r26, r12
    46c4:	8d 93       	st	X+, r24
    46c6:	6d 01       	movw	r12, r26
    46c8:	e6 cf       	rjmp	.-52     	; 0x4696 <dtoa_prf+0x24e>
    46ca:	26 17       	cp	r18, r22
    46cc:	37 07       	cpc	r19, r23
    46ce:	49 f4       	brne	.+18     	; 0x46e2 <dtoa_prf+0x29a>
    46d0:	b5 e3       	ldi	r27, 0x35	; 53
    46d2:	bb 15       	cp	r27, r11
    46d4:	28 f0       	brcs	.+10     	; 0x46e0 <dtoa_prf+0x298>
    46d6:	bb 16       	cp	r11, r27
    46d8:	21 f4       	brne	.+8      	; 0x46e2 <dtoa_prf+0x29a>
    46da:	81 14       	cp	r8, r1
    46dc:	91 04       	cpc	r9, r1
    46de:	09 f4       	brne	.+2      	; 0x46e2 <dtoa_prf+0x29a>
    46e0:	81 e3       	ldi	r24, 0x31	; 49
    46e2:	f6 01       	movw	r30, r12
    46e4:	81 93       	st	Z+, r24
    46e6:	d6 01       	movw	r26, r12
    46e8:	81 2f       	mov	r24, r17
    46ea:	90 e2       	ldi	r25, 0x20	; 32
    46ec:	02 c0       	rjmp	.+4      	; 0x46f2 <dtoa_prf+0x2aa>
    46ee:	9c 93       	st	X, r25
    46f0:	81 50       	subi	r24, 0x01	; 1
    46f2:	11 96       	adiw	r26, 0x01	; 1
    46f4:	88 23       	and	r24, r24
    46f6:	d9 f7       	brne	.-10     	; 0x46ee <dtoa_prf+0x2a6>
    46f8:	e1 0f       	add	r30, r17
    46fa:	f1 1d       	adc	r31, r1
    46fc:	10 82       	st	Z, r1
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	c9 01       	movw	r24, r18
    4704:	29 96       	adiw	r28, 0x09	; 9
    4706:	ee e0       	ldi	r30, 0x0E	; 14
    4708:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <__epilogue_restores__+0x8>

0000470c <__ftoa_engine>:
    470c:	28 30       	cpi	r18, 0x08	; 8
    470e:	08 f0       	brcs	.+2      	; 0x4712 <__ftoa_engine+0x6>
    4710:	27 e0       	ldi	r18, 0x07	; 7
    4712:	33 27       	eor	r19, r19
    4714:	da 01       	movw	r26, r20
    4716:	99 0f       	add	r25, r25
    4718:	31 1d       	adc	r19, r1
    471a:	87 fd       	sbrc	r24, 7
    471c:	91 60       	ori	r25, 0x01	; 1
    471e:	00 96       	adiw	r24, 0x00	; 0
    4720:	61 05       	cpc	r22, r1
    4722:	71 05       	cpc	r23, r1
    4724:	39 f4       	brne	.+14     	; 0x4734 <__ftoa_engine+0x28>
    4726:	32 60       	ori	r19, 0x02	; 2
    4728:	2e 5f       	subi	r18, 0xFE	; 254
    472a:	3d 93       	st	X+, r19
    472c:	30 e3       	ldi	r19, 0x30	; 48
    472e:	2a 95       	dec	r18
    4730:	e1 f7       	brne	.-8      	; 0x472a <__ftoa_engine+0x1e>
    4732:	08 95       	ret
    4734:	9f 3f       	cpi	r25, 0xFF	; 255
    4736:	30 f0       	brcs	.+12     	; 0x4744 <__ftoa_engine+0x38>
    4738:	80 38       	cpi	r24, 0x80	; 128
    473a:	71 05       	cpc	r23, r1
    473c:	61 05       	cpc	r22, r1
    473e:	09 f0       	breq	.+2      	; 0x4742 <__ftoa_engine+0x36>
    4740:	3c 5f       	subi	r19, 0xFC	; 252
    4742:	3c 5f       	subi	r19, 0xFC	; 252
    4744:	3d 93       	st	X+, r19
    4746:	91 30       	cpi	r25, 0x01	; 1
    4748:	08 f0       	brcs	.+2      	; 0x474c <__ftoa_engine+0x40>
    474a:	80 68       	ori	r24, 0x80	; 128
    474c:	91 1d       	adc	r25, r1
    474e:	df 93       	push	r29
    4750:	cf 93       	push	r28
    4752:	1f 93       	push	r17
    4754:	0f 93       	push	r16
    4756:	ff 92       	push	r15
    4758:	ef 92       	push	r14
    475a:	19 2f       	mov	r17, r25
    475c:	98 7f       	andi	r25, 0xF8	; 248
    475e:	96 95       	lsr	r25
    4760:	e9 2f       	mov	r30, r25
    4762:	96 95       	lsr	r25
    4764:	96 95       	lsr	r25
    4766:	e9 0f       	add	r30, r25
    4768:	ff 27       	eor	r31, r31
    476a:	e2 55       	subi	r30, 0x52	; 82
    476c:	ff 4f       	sbci	r31, 0xFF	; 255
    476e:	99 27       	eor	r25, r25
    4770:	33 27       	eor	r19, r19
    4772:	ee 24       	eor	r14, r14
    4774:	ff 24       	eor	r15, r15
    4776:	a7 01       	movw	r20, r14
    4778:	e7 01       	movw	r28, r14
    477a:	05 90       	lpm	r0, Z+
    477c:	08 94       	sec
    477e:	07 94       	ror	r0
    4780:	28 f4       	brcc	.+10     	; 0x478c <__ftoa_engine+0x80>
    4782:	36 0f       	add	r19, r22
    4784:	e7 1e       	adc	r14, r23
    4786:	f8 1e       	adc	r15, r24
    4788:	49 1f       	adc	r20, r25
    478a:	51 1d       	adc	r21, r1
    478c:	66 0f       	add	r22, r22
    478e:	77 1f       	adc	r23, r23
    4790:	88 1f       	adc	r24, r24
    4792:	99 1f       	adc	r25, r25
    4794:	06 94       	lsr	r0
    4796:	a1 f7       	brne	.-24     	; 0x4780 <__ftoa_engine+0x74>
    4798:	05 90       	lpm	r0, Z+
    479a:	07 94       	ror	r0
    479c:	28 f4       	brcc	.+10     	; 0x47a8 <__ftoa_engine+0x9c>
    479e:	e7 0e       	add	r14, r23
    47a0:	f8 1e       	adc	r15, r24
    47a2:	49 1f       	adc	r20, r25
    47a4:	56 1f       	adc	r21, r22
    47a6:	c1 1d       	adc	r28, r1
    47a8:	77 0f       	add	r23, r23
    47aa:	88 1f       	adc	r24, r24
    47ac:	99 1f       	adc	r25, r25
    47ae:	66 1f       	adc	r22, r22
    47b0:	06 94       	lsr	r0
    47b2:	a1 f7       	brne	.-24     	; 0x479c <__ftoa_engine+0x90>
    47b4:	05 90       	lpm	r0, Z+
    47b6:	07 94       	ror	r0
    47b8:	28 f4       	brcc	.+10     	; 0x47c4 <__ftoa_engine+0xb8>
    47ba:	f8 0e       	add	r15, r24
    47bc:	49 1f       	adc	r20, r25
    47be:	56 1f       	adc	r21, r22
    47c0:	c7 1f       	adc	r28, r23
    47c2:	d1 1d       	adc	r29, r1
    47c4:	88 0f       	add	r24, r24
    47c6:	99 1f       	adc	r25, r25
    47c8:	66 1f       	adc	r22, r22
    47ca:	77 1f       	adc	r23, r23
    47cc:	06 94       	lsr	r0
    47ce:	a1 f7       	brne	.-24     	; 0x47b8 <__ftoa_engine+0xac>
    47d0:	05 90       	lpm	r0, Z+
    47d2:	07 94       	ror	r0
    47d4:	20 f4       	brcc	.+8      	; 0x47de <__ftoa_engine+0xd2>
    47d6:	49 0f       	add	r20, r25
    47d8:	56 1f       	adc	r21, r22
    47da:	c7 1f       	adc	r28, r23
    47dc:	d8 1f       	adc	r29, r24
    47de:	99 0f       	add	r25, r25
    47e0:	66 1f       	adc	r22, r22
    47e2:	77 1f       	adc	r23, r23
    47e4:	88 1f       	adc	r24, r24
    47e6:	06 94       	lsr	r0
    47e8:	a9 f7       	brne	.-22     	; 0x47d4 <__ftoa_engine+0xc8>
    47ea:	84 91       	lpm	r24, Z+
    47ec:	10 95       	com	r17
    47ee:	17 70       	andi	r17, 0x07	; 7
    47f0:	41 f0       	breq	.+16     	; 0x4802 <__ftoa_engine+0xf6>
    47f2:	d6 95       	lsr	r29
    47f4:	c7 95       	ror	r28
    47f6:	57 95       	ror	r21
    47f8:	47 95       	ror	r20
    47fa:	f7 94       	ror	r15
    47fc:	e7 94       	ror	r14
    47fe:	1a 95       	dec	r17
    4800:	c1 f7       	brne	.-16     	; 0x47f2 <__ftoa_engine+0xe6>
    4802:	e4 e5       	ldi	r30, 0x54	; 84
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	68 94       	set
    4808:	15 90       	lpm	r1, Z+
    480a:	15 91       	lpm	r17, Z+
    480c:	35 91       	lpm	r19, Z+
    480e:	65 91       	lpm	r22, Z+
    4810:	95 91       	lpm	r25, Z+
    4812:	05 90       	lpm	r0, Z+
    4814:	7f e2       	ldi	r23, 0x2F	; 47
    4816:	73 95       	inc	r23
    4818:	e1 18       	sub	r14, r1
    481a:	f1 0a       	sbc	r15, r17
    481c:	43 0b       	sbc	r20, r19
    481e:	56 0b       	sbc	r21, r22
    4820:	c9 0b       	sbc	r28, r25
    4822:	d0 09       	sbc	r29, r0
    4824:	c0 f7       	brcc	.-16     	; 0x4816 <__ftoa_engine+0x10a>
    4826:	e1 0c       	add	r14, r1
    4828:	f1 1e       	adc	r15, r17
    482a:	43 1f       	adc	r20, r19
    482c:	56 1f       	adc	r21, r22
    482e:	c9 1f       	adc	r28, r25
    4830:	d0 1d       	adc	r29, r0
    4832:	7e f4       	brtc	.+30     	; 0x4852 <__ftoa_engine+0x146>
    4834:	70 33       	cpi	r23, 0x30	; 48
    4836:	11 f4       	brne	.+4      	; 0x483c <__ftoa_engine+0x130>
    4838:	8a 95       	dec	r24
    483a:	e6 cf       	rjmp	.-52     	; 0x4808 <__ftoa_engine+0xfc>
    483c:	e8 94       	clt
    483e:	01 50       	subi	r16, 0x01	; 1
    4840:	30 f0       	brcs	.+12     	; 0x484e <__ftoa_engine+0x142>
    4842:	08 0f       	add	r16, r24
    4844:	0a f4       	brpl	.+2      	; 0x4848 <__ftoa_engine+0x13c>
    4846:	00 27       	eor	r16, r16
    4848:	02 17       	cp	r16, r18
    484a:	08 f4       	brcc	.+2      	; 0x484e <__ftoa_engine+0x142>
    484c:	20 2f       	mov	r18, r16
    484e:	23 95       	inc	r18
    4850:	02 2f       	mov	r16, r18
    4852:	7a 33       	cpi	r23, 0x3A	; 58
    4854:	28 f0       	brcs	.+10     	; 0x4860 <__ftoa_engine+0x154>
    4856:	79 e3       	ldi	r23, 0x39	; 57
    4858:	7d 93       	st	X+, r23
    485a:	2a 95       	dec	r18
    485c:	e9 f7       	brne	.-6      	; 0x4858 <__ftoa_engine+0x14c>
    485e:	10 c0       	rjmp	.+32     	; 0x4880 <__ftoa_engine+0x174>
    4860:	7d 93       	st	X+, r23
    4862:	2a 95       	dec	r18
    4864:	89 f6       	brne	.-94     	; 0x4808 <__ftoa_engine+0xfc>
    4866:	06 94       	lsr	r0
    4868:	97 95       	ror	r25
    486a:	67 95       	ror	r22
    486c:	37 95       	ror	r19
    486e:	17 95       	ror	r17
    4870:	17 94       	ror	r1
    4872:	e1 18       	sub	r14, r1
    4874:	f1 0a       	sbc	r15, r17
    4876:	43 0b       	sbc	r20, r19
    4878:	56 0b       	sbc	r21, r22
    487a:	c9 0b       	sbc	r28, r25
    487c:	d0 09       	sbc	r29, r0
    487e:	98 f0       	brcs	.+38     	; 0x48a6 <__ftoa_engine+0x19a>
    4880:	23 95       	inc	r18
    4882:	7e 91       	ld	r23, -X
    4884:	73 95       	inc	r23
    4886:	7a 33       	cpi	r23, 0x3A	; 58
    4888:	08 f0       	brcs	.+2      	; 0x488c <__ftoa_engine+0x180>
    488a:	70 e3       	ldi	r23, 0x30	; 48
    488c:	7c 93       	st	X, r23
    488e:	20 13       	cpse	r18, r16
    4890:	b8 f7       	brcc	.-18     	; 0x4880 <__ftoa_engine+0x174>
    4892:	7e 91       	ld	r23, -X
    4894:	70 61       	ori	r23, 0x10	; 16
    4896:	7d 93       	st	X+, r23
    4898:	30 f0       	brcs	.+12     	; 0x48a6 <__ftoa_engine+0x19a>
    489a:	83 95       	inc	r24
    489c:	71 e3       	ldi	r23, 0x31	; 49
    489e:	7d 93       	st	X+, r23
    48a0:	70 e3       	ldi	r23, 0x30	; 48
    48a2:	2a 95       	dec	r18
    48a4:	e1 f7       	brne	.-8      	; 0x489e <__ftoa_engine+0x192>
    48a6:	11 24       	eor	r1, r1
    48a8:	ef 90       	pop	r14
    48aa:	ff 90       	pop	r15
    48ac:	0f 91       	pop	r16
    48ae:	1f 91       	pop	r17
    48b0:	cf 91       	pop	r28
    48b2:	df 91       	pop	r29
    48b4:	99 27       	eor	r25, r25
    48b6:	87 fd       	sbrc	r24, 7
    48b8:	90 95       	com	r25
    48ba:	08 95       	ret

000048bc <strrev>:
    48bc:	dc 01       	movw	r26, r24
    48be:	fc 01       	movw	r30, r24
    48c0:	67 2f       	mov	r22, r23
    48c2:	71 91       	ld	r23, Z+
    48c4:	77 23       	and	r23, r23
    48c6:	e1 f7       	brne	.-8      	; 0x48c0 <strrev+0x4>
    48c8:	32 97       	sbiw	r30, 0x02	; 2
    48ca:	04 c0       	rjmp	.+8      	; 0x48d4 <strrev+0x18>
    48cc:	7c 91       	ld	r23, X
    48ce:	6d 93       	st	X+, r22
    48d0:	70 83       	st	Z, r23
    48d2:	62 91       	ld	r22, -Z
    48d4:	ae 17       	cp	r26, r30
    48d6:	bf 07       	cpc	r27, r31
    48d8:	c8 f3       	brcs	.-14     	; 0x48cc <strrev+0x10>
    48da:	08 95       	ret

000048dc <__udivmodhi4>:
    48dc:	aa 1b       	sub	r26, r26
    48de:	bb 1b       	sub	r27, r27
    48e0:	51 e1       	ldi	r21, 0x11	; 17
    48e2:	07 c0       	rjmp	.+14     	; 0x48f2 <__udivmodhi4_ep>

000048e4 <__udivmodhi4_loop>:
    48e4:	aa 1f       	adc	r26, r26
    48e6:	bb 1f       	adc	r27, r27
    48e8:	a6 17       	cp	r26, r22
    48ea:	b7 07       	cpc	r27, r23
    48ec:	10 f0       	brcs	.+4      	; 0x48f2 <__udivmodhi4_ep>
    48ee:	a6 1b       	sub	r26, r22
    48f0:	b7 0b       	sbc	r27, r23

000048f2 <__udivmodhi4_ep>:
    48f2:	88 1f       	adc	r24, r24
    48f4:	99 1f       	adc	r25, r25
    48f6:	5a 95       	dec	r21
    48f8:	a9 f7       	brne	.-22     	; 0x48e4 <__udivmodhi4_loop>
    48fa:	80 95       	com	r24
    48fc:	90 95       	com	r25
    48fe:	bc 01       	movw	r22, r24
    4900:	cd 01       	movw	r24, r26
    4902:	08 95       	ret

00004904 <_exit>:
    4904:	f8 94       	cli

00004906 <__stop_program>:
    4906:	ff cf       	rjmp	.-2      	; 0x4906 <__stop_program>
