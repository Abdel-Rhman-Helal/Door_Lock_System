/*
 ===================================================
 Author    : Abdel Rhman Helal Saleh
 File Name : twi_Reg.h
 Data      : Oct 22, 2023
 Time      : 8:57:19 PM
 ===================================================
 */
#ifndef MCAL_TWI_TWI_H_
#define MCAL_TWI_TWI_H_

#include "../../lib/std_types.h"

/*******************************************************************************
 *                      Preprocessor Macros                                    *
 *******************************************************************************/

/* I2C Status Bits in the TWSR Register */
#define TWI_START         0x08 /* start has been sent */
#define TWI_REP_START     0x10 /* repeated start */
#define TWI_MT_SLA_W_ACK  0x18 /* Master transmit ( slave address + Write request ) to slave + ACK received from slave. */
#define TWI_MT_SLA_R_ACK  0x40 /* Master transmit ( slave address + Read request ) to slave + ACK received from slave. */
#define TWI_MT_DATA_ACK   0x28 /* Master transmit data and ACK has been received from Slave. */
#define TWI_MR_DATA_ACK   0x50 /* Master received data and send ACK to slave. */
#define TWI_MR_DATA_NACK  0x58 /* Master received data but doesn't send ACK to slave. */

/*******************************************************************************
 *                               Types Declaration                             *
 *******************************************************************************/
typedef uint8 TWI_Address;
typedef enum {
	TWI_NORMAL_Mode = 100000,
	TWI_FAST_Mode = 400000,
	TWI_FAST_Mode_PLUS = 1000000,
	TWI_HIGH_SPEED_Mode = 3400000
} TWI_BaudRate;

typedef enum {
	TWI_Prescaler_FCU_1 = 1,
	TWI_Prescaler_FCU_4 = 4,
	TWI_Prescaler_FCU_16 = 16,
	TWI_Prescaler_FCU_64 = 64
} TWI_Prescaler;

typedef struct {
	TWI_Address address;
	TWI_BaudRate bit_rate;
	TWI_Prescaler Prescaler;
} TWI_ConfigType;

/*******************************************************************************
 *                      Functions Prototypes                                   *
 *******************************************************************************/
void TWI_init(const TWI_ConfigType *Config_Ptr);
void TWI_start(void);
void TWI_stop(void);
void TWI_writeByte(uint8 data);
uint8 TWI_readByteWithACK(void);
uint8 TWI_readByteWithNACK(void);
uint8 TWI_getStatus(void);

#endif /* MCAL_TWI_TWI_H_ */
